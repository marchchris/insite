{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertUninitialized = exports.AbstractCursor = exports.CURSOR_FLAGS = void 0;\nconst utils_1 = require(\"../utils\");\nconst bson_1 = require(\"../bson\");\nconst sessions_1 = require(\"../sessions\");\nconst error_1 = require(\"../error\");\nconst read_preference_1 = require(\"../read_preference\");\nconst stream_1 = require(\"stream\");\nconst read_concern_1 = require(\"../read_concern\");\nconst mongo_types_1 = require(\"../mongo_types\");\n/** @internal */\nconst kId = Symbol('id');\n/** @internal */\nconst kDocuments = Symbol('documents');\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kNamespace = Symbol('namespace');\n/** @internal */\nconst kTopology = Symbol('topology');\n/** @internal */\nconst kSession = Symbol('session');\n/** @internal */\nconst kOptions = Symbol('options');\n/** @internal */\nconst kTransform = Symbol('transform');\n/** @internal */\nconst kInitialized = Symbol('initialized');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kKilled = Symbol('killed');\n/** @public */\nexports.CURSOR_FLAGS = ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'exhaust', 'partial'];\n/** @public */\nclass AbstractCursor extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  constructor(topology, namespace, options = {}) {\n    super();\n    this[kTopology] = topology;\n    this[kNamespace] = namespace;\n    this[kDocuments] = []; // TODO: https://github.com/microsoft/TypeScript/issues/36230\n    this[kInitialized] = false;\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kOptions] = {\n      readPreference: options.readPreference && options.readPreference instanceof read_preference_1.ReadPreference ? options.readPreference : read_preference_1.ReadPreference.primary,\n      ...(0, bson_1.pluckBSONSerializeOptions)(options)\n    };\n    const readConcern = read_concern_1.ReadConcern.fromOptions(options);\n    if (readConcern) {\n      this[kOptions].readConcern = readConcern;\n    }\n    if (typeof options.batchSize === 'number') {\n      this[kOptions].batchSize = options.batchSize;\n    }\n    if (options.comment != null) {\n      this[kOptions].comment = options.comment;\n    }\n    if (typeof options.maxTimeMS === 'number') {\n      this[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n    if (options.session instanceof sessions_1.ClientSession) {\n      this[kSession] = options.session;\n    }\n  }\n  get id() {\n    return this[kId];\n  }\n  /** @internal */\n  get topology() {\n    return this[kTopology];\n  }\n  /** @internal */\n  get server() {\n    return this[kServer];\n  }\n  get namespace() {\n    return this[kNamespace];\n  }\n  get readPreference() {\n    return this[kOptions].readPreference;\n  }\n  get readConcern() {\n    return this[kOptions].readConcern;\n  }\n  /** @internal */\n  get session() {\n    return this[kSession];\n  }\n  set session(clientSession) {\n    this[kSession] = clientSession;\n  }\n  /** @internal */\n  get cursorOptions() {\n    return this[kOptions];\n  }\n  get closed() {\n    return this[kClosed];\n  }\n  get killed() {\n    return this[kKilled];\n  }\n  get loadBalanced() {\n    return this[kTopology].loadBalanced;\n  }\n  /** Returns current buffered documents length */\n  bufferedCount() {\n    return this[kDocuments].length;\n  }\n  /** Returns current buffered documents */\n  readBufferedDocuments(number) {\n    return this[kDocuments].splice(0, number !== null && number !== void 0 ? number : this[kDocuments].length);\n  }\n  [Symbol.asyncIterator]() {\n    return {\n      next: () => this.next().then(value => value != null ? {\n        value,\n        done: false\n      } : {\n        value: undefined,\n        done: true\n      })\n    };\n  }\n  stream(options) {\n    if (options === null || options === void 0 ? void 0 : options.transform) {\n      const transform = options.transform;\n      const readable = makeCursorStream(this);\n      return readable.pipe(new stream_1.Transform({\n        objectMode: true,\n        highWaterMark: 1,\n        transform(chunk, _, callback) {\n          try {\n            const transformed = transform(chunk);\n            callback(undefined, transformed);\n          } catch (err) {\n            callback(err);\n          }\n        }\n      }));\n    }\n    return makeCursorStream(this);\n  }\n  hasNext(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(undefined, false);\n      }\n      if (this[kDocuments].length) {\n        return done(undefined, true);\n      }\n      next(this, true, (err, doc) => {\n        if (err) return done(err);\n        if (doc) {\n          this[kDocuments].unshift(doc);\n          done(undefined, true);\n          return;\n        }\n        done(undefined, false);\n      });\n    });\n  }\n  next(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(new error_1.MongoCursorExhaustedError());\n      }\n      next(this, true, done);\n    });\n  }\n  tryNext(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this[kId] === bson_1.Long.ZERO) {\n        return done(new error_1.MongoCursorExhaustedError());\n      }\n      next(this, false, done);\n    });\n  }\n  forEach(iterator, callback) {\n    if (typeof iterator !== 'function') {\n      throw new error_1.MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n    }\n    return (0, utils_1.maybePromise)(callback, done => {\n      const transform = this[kTransform];\n      const fetchDocs = () => {\n        next(this, true, (err, doc) => {\n          if (err || doc == null) return done(err);\n          let result;\n          // NOTE: no need to transform because `next` will do this automatically\n          try {\n            result = iterator(doc); // TODO(NODE-3283): Improve transform typing\n          } catch (error) {\n            return done(error);\n          }\n          if (result === false) return done();\n          // these do need to be transformed since they are copying the rest of the batch\n          const internalDocs = this[kDocuments].splice(0, this[kDocuments].length);\n          for (let i = 0; i < internalDocs.length; ++i) {\n            try {\n              result = iterator(transform ? transform(internalDocs[i]) : internalDocs[i] // TODO(NODE-3283): Improve transform typing\n              );\n            } catch (error) {\n              return done(error);\n            }\n            if (result === false) return done();\n          }\n          fetchDocs();\n        });\n      };\n      fetchDocs();\n    });\n  }\n  close(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    const needsToEmitClosed = !this[kClosed];\n    this[kClosed] = true;\n    return (0, utils_1.maybePromise)(callback, done => cleanupCursor(this, {\n      needsToEmitClosed\n    }, done));\n  }\n  toArray(callback) {\n    return (0, utils_1.maybePromise)(callback, done => {\n      const docs = [];\n      const transform = this[kTransform];\n      const fetchDocs = () => {\n        // NOTE: if we add a `nextBatch` then we should use it here\n        next(this, true, (err, doc) => {\n          if (err) return done(err);\n          if (doc == null) return done(undefined, docs);\n          // NOTE: no need to transform because `next` will do this automatically\n          docs.push(doc);\n          // these do need to be transformed since they are copying the rest of the batch\n          const internalDocs = transform ? this[kDocuments].splice(0, this[kDocuments].length).map(transform) : this[kDocuments].splice(0, this[kDocuments].length); // TODO(NODE-3283): Improve transform typing\n          if (internalDocs) {\n            docs.push(...internalDocs);\n          }\n          fetchDocs();\n        });\n      };\n      fetchDocs();\n    });\n  }\n  /**\n   * Add a cursor flag to the cursor\n   *\n   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n   * @param value - The flag boolean value.\n   */\n  addCursorFlag(flag, value) {\n    assertUninitialized(this);\n    if (!exports.CURSOR_FLAGS.includes(flag)) {\n      throw new error_1.MongoInvalidArgumentError(`Flag ${flag} is not one of ${exports.CURSOR_FLAGS}`);\n    }\n    if (typeof value !== 'boolean') {\n      throw new error_1.MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n    }\n    this[kOptions][flag] = value;\n    return this;\n  }\n  /**\n   * Map all documents using the provided function\n   * If there is a transform set on the cursor, that will be called first and the result passed to\n   * this function's transform.\n   *\n   * @remarks\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling map,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<Document> = coll.find();\n   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n   * ```\n   * @param transform - The mapping transformation method.\n   */\n  map(transform) {\n    assertUninitialized(this);\n    const oldTransform = this[kTransform]; // TODO(NODE-3283): Improve transform typing\n    if (oldTransform) {\n      this[kTransform] = doc => {\n        return transform(oldTransform(doc));\n      };\n    } else {\n      this[kTransform] = transform;\n    }\n    return this;\n  }\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n  withReadPreference(readPreference) {\n    assertUninitialized(this);\n    if (readPreference instanceof read_preference_1.ReadPreference) {\n      this[kOptions].readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this[kOptions].readPreference = read_preference_1.ReadPreference.fromString(readPreference);\n    } else {\n      throw new error_1.MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n    }\n    return this;\n  }\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n  withReadConcern(readConcern) {\n    assertUninitialized(this);\n    const resolvedReadConcern = read_concern_1.ReadConcern.fromOptions({\n      readConcern\n    });\n    if (resolvedReadConcern) {\n      this[kOptions].readConcern = resolvedReadConcern;\n    }\n    return this;\n  }\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  maxTimeMS(value) {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n    this[kOptions].maxTimeMS = value;\n    return this;\n  }\n  /**\n   * Set the batch size for the cursor.\n   *\n   * @param value - The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\n   */\n  batchSize(value) {\n    assertUninitialized(this);\n    if (this[kOptions].tailable) {\n      throw new error_1.MongoTailableCursorError('Tailable cursor does not support batchSize');\n    }\n    if (typeof value !== 'number') {\n      throw new error_1.MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n    }\n    this[kOptions].batchSize = value;\n    return this;\n  }\n  /**\n   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n   * if the resultant data has already been retrieved by this cursor.\n   */\n  rewind() {\n    if (!this[kInitialized]) {\n      return;\n    }\n    this[kId] = undefined;\n    this[kDocuments] = [];\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kInitialized] = false;\n    const session = this[kSession];\n    if (session) {\n      // We only want to end this session if we created it, and it hasn't ended yet\n      if (session.explicit === false && !session.hasEnded) {\n        session.endSession();\n      }\n      this[kSession] = undefined;\n    }\n  }\n  /** @internal */\n  _getMore(batchSize, callback) {\n    const cursorId = this[kId];\n    const cursorNs = this[kNamespace];\n    const server = this[kServer];\n    if (cursorId == null) {\n      callback(new error_1.MongoRuntimeError('Unable to iterate cursor with no id'));\n      return;\n    }\n    if (server == null) {\n      callback(new error_1.MongoRuntimeError('Unable to iterate cursor without selected server'));\n      return;\n    }\n    server.getMore(cursorNs, cursorId, {\n      ...this[kOptions],\n      session: this[kSession],\n      batchSize\n    }, callback);\n  }\n}\nexports.AbstractCursor = AbstractCursor;\n/** @event */\nAbstractCursor.CLOSE = 'close';\nfunction nextDocument(cursor) {\n  if (cursor[kDocuments] == null || !cursor[kDocuments].length) {\n    return null;\n  }\n  const doc = cursor[kDocuments].shift();\n  if (doc) {\n    const transform = cursor[kTransform];\n    if (transform) {\n      return transform(doc);\n    }\n    return doc;\n  }\n  return null;\n}\nfunction next(cursor, blocking, callback) {\n  const cursorId = cursor[kId];\n  if (cursor.closed) {\n    return callback(undefined, null);\n  }\n  if (cursor[kDocuments] && cursor[kDocuments].length) {\n    callback(undefined, nextDocument(cursor));\n    return;\n  }\n  if (cursorId == null) {\n    // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n    if (cursor[kSession] == null && cursor[kTopology].hasSessionSupport()) {\n      cursor[kSession] = cursor[kTopology].startSession({\n        owner: cursor,\n        explicit: false\n      });\n    }\n    cursor._initialize(cursor[kSession], (err, state) => {\n      if (state) {\n        const response = state.response;\n        cursor[kServer] = state.server;\n        cursor[kSession] = state.session;\n        if (response.cursor) {\n          cursor[kId] = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : response.cursor.id;\n          if (response.cursor.ns) {\n            cursor[kNamespace] = (0, utils_1.ns)(response.cursor.ns);\n          }\n          cursor[kDocuments] = response.cursor.firstBatch;\n        } else {\n          // NOTE: This is for support of older servers (<3.2) which do not use commands\n          cursor[kId] = typeof response.cursorId === 'number' ? bson_1.Long.fromNumber(response.cursorId) : response.cursorId;\n          cursor[kDocuments] = response.documents;\n        }\n        // When server responses return without a cursor document, we close this cursor\n        // and return the raw server response. This is often the case for explain commands\n        // for example\n        if (cursor[kId] == null) {\n          cursor[kId] = bson_1.Long.ZERO;\n          // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n          cursor[kDocuments] = [state.response];\n        }\n      }\n      // the cursor is now initialized, even if an error occurred or it is dead\n      cursor[kInitialized] = true;\n      if (err || cursorIsDead(cursor)) {\n        return cleanupCursor(cursor, {\n          error: err\n        }, () => callback(err, nextDocument(cursor)));\n      }\n      next(cursor, blocking, callback);\n    });\n    return;\n  }\n  if (cursorIsDead(cursor)) {\n    return cleanupCursor(cursor, undefined, () => callback(undefined, null));\n  }\n  // otherwise need to call getMore\n  const batchSize = cursor[kOptions].batchSize || 1000;\n  cursor._getMore(batchSize, (err, response) => {\n    if (response) {\n      const cursorId = typeof response.cursor.id === 'number' ? bson_1.Long.fromNumber(response.cursor.id) : response.cursor.id;\n      cursor[kDocuments] = response.cursor.nextBatch;\n      cursor[kId] = cursorId;\n    }\n    if (err || cursorIsDead(cursor)) {\n      return cleanupCursor(cursor, {\n        error: err\n      }, () => callback(err, nextDocument(cursor)));\n    }\n    if (cursor[kDocuments].length === 0 && blocking === false) {\n      return callback(undefined, null);\n    }\n    next(cursor, blocking, callback);\n  });\n}\nfunction cursorIsDead(cursor) {\n  const cursorId = cursor[kId];\n  return !!cursorId && cursorId.isZero();\n}\nfunction cleanupCursor(cursor, options, callback) {\n  var _a;\n  const cursorId = cursor[kId];\n  const cursorNs = cursor[kNamespace];\n  const server = cursor[kServer];\n  const session = cursor[kSession];\n  const error = options === null || options === void 0 ? void 0 : options.error;\n  const needsToEmitClosed = (_a = options === null || options === void 0 ? void 0 : options.needsToEmitClosed) !== null && _a !== void 0 ? _a : cursor[kDocuments].length === 0;\n  if (error) {\n    if (cursor.loadBalanced && error instanceof error_1.MongoNetworkError) {\n      return completeCleanup();\n    }\n  }\n  if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n    if (needsToEmitClosed) {\n      cursor[kClosed] = true;\n      cursor[kId] = bson_1.Long.ZERO;\n      cursor.emit(AbstractCursor.CLOSE);\n    }\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({\n          error\n        }, callback);\n      }\n      if (!session.inTransaction()) {\n        (0, sessions_1.maybeClearPinnedConnection)(session, {\n          error\n        });\n      }\n    }\n    return callback();\n  }\n  function completeCleanup() {\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({\n          error\n        }, () => {\n          cursor.emit(AbstractCursor.CLOSE);\n          callback();\n        });\n      }\n      if (!session.inTransaction()) {\n        (0, sessions_1.maybeClearPinnedConnection)(session, {\n          error\n        });\n      }\n    }\n    cursor.emit(AbstractCursor.CLOSE);\n    return callback();\n  }\n  cursor[kKilled] = true;\n  server.killCursors(cursorNs, [cursorId], {\n    ...(0, bson_1.pluckBSONSerializeOptions)(cursor[kOptions]),\n    session\n  }, () => completeCleanup());\n}\n/** @internal */\nfunction assertUninitialized(cursor) {\n  if (cursor[kInitialized]) {\n    throw new error_1.MongoCursorInUseError();\n  }\n}\nexports.assertUninitialized = assertUninitialized;\nfunction makeCursorStream(cursor) {\n  const readable = new stream_1.Readable({\n    objectMode: true,\n    autoDestroy: false,\n    highWaterMark: 1\n  });\n  let initialized = false;\n  let reading = false;\n  let needToClose = true; // NOTE: we must close the cursor if we never read from it, use `_construct` in future node versions\n  readable._read = function () {\n    if (initialized === false) {\n      needToClose = false;\n      initialized = true;\n    }\n    if (!reading) {\n      reading = true;\n      readNext();\n    }\n  };\n  readable._destroy = function (error, cb) {\n    if (needToClose) {\n      cursor.close(err => process.nextTick(cb, err || error));\n    } else {\n      cb(error);\n    }\n  };\n  function readNext() {\n    needToClose = false;\n    next(cursor, true, (err, result) => {\n      needToClose = err ? !cursor.closed : result != null;\n      if (err) {\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\n        //       propagate the error message by removing this special case.\n        if (err.message.match(/server is closed/)) {\n          cursor.close();\n          return readable.push(null);\n        }\n        // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n        //       to be \"operation interrupted\", where a cursor has been closed but there is an\n        //       active getMore in-flight. This used to check if the cursor was killed but once\n        //       that changed to happen in cleanup legitimate errors would not destroy the\n        //       stream. There are change streams test specifically test these cases.\n        if (err.message.match(/interrupted/)) {\n          return readable.push(null);\n        }\n        return readable.destroy(err);\n      }\n      if (result == null) {\n        readable.push(null);\n      } else if (readable.destroyed) {\n        cursor.close();\n      } else {\n        if (readable.push(result)) {\n          return readNext();\n        }\n        reading = false;\n      }\n    });\n  }\n  return readable;\n}","map":{"version":3,"names":["utils_1","require","bson_1","sessions_1","error_1","read_preference_1","stream_1","read_concern_1","mongo_types_1","kId","Symbol","kDocuments","kServer","kNamespace","kTopology","kSession","kOptions","kTransform","kInitialized","kClosed","kKilled","exports","CURSOR_FLAGS","AbstractCursor","TypedEventEmitter","constructor","topology","namespace","options","readPreference","ReadPreference","primary","pluckBSONSerializeOptions","readConcern","ReadConcern","fromOptions","batchSize","comment","maxTimeMS","session","ClientSession","id","server","clientSession","cursorOptions","closed","killed","loadBalanced","bufferedCount","length","readBufferedDocuments","number","splice","asyncIterator","next","then","value","done","undefined","stream","transform","readable","makeCursorStream","pipe","Transform","objectMode","highWaterMark","chunk","_","callback","transformed","err","hasNext","maybePromise","Long","ZERO","doc","unshift","MongoCursorExhaustedError","tryNext","forEach","iterator","MongoInvalidArgumentError","fetchDocs","result","error","internalDocs","i","close","needsToEmitClosed","cleanupCursor","toArray","docs","push","map","addCursorFlag","flag","assertUninitialized","includes","oldTransform","withReadPreference","fromString","withReadConcern","resolvedReadConcern","tailable","MongoTailableCursorError","rewind","explicit","hasEnded","endSession","_getMore","cursorId","cursorNs","MongoRuntimeError","getMore","CLOSE","nextDocument","cursor","shift","blocking","hasSessionSupport","startSession","owner","_initialize","state","response","fromNumber","ns","firstBatch","documents","cursorIsDead","nextBatch","isZero","_a","MongoNetworkError","completeCleanup","emit","inTransaction","maybeClearPinnedConnection","killCursors","MongoCursorInUseError","Readable","autoDestroy","initialized","reading","needToClose","_read","readNext","_destroy","cb","process","nextTick","message","match","destroy","destroyed"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\mongodb\\src\\cursor\\abstract_cursor.ts"],"sourcesContent":["import { Callback, maybePromise, MongoDBNamespace, ns } from '../utils';\nimport { Long, Document, BSONSerializeOptions, pluckBSONSerializeOptions } from '../bson';\nimport { ClientSession, maybeClearPinnedConnection } from '../sessions';\nimport {\n  AnyError,\n  MongoRuntimeError,\n  MongoNetworkError,\n  MongoInvalidArgumentError,\n  MongoCursorExhaustedError,\n  MongoTailableCursorError,\n  MongoCursorInUseError\n} from '../error';\nimport { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport type { Server } from '../sdam/server';\nimport type { Topology } from '../sdam/topology';\nimport { Readable, Transform } from 'stream';\nimport type { ExecutionResult } from '../operations/execute_operation';\nimport { ReadConcern, ReadConcernLike } from '../read_concern';\nimport { TODO_NODE_3286, TypedEventEmitter } from '../mongo_types';\n\n/** @internal */\nconst kId = Symbol('id');\n/** @internal */\nconst kDocuments = Symbol('documents');\n/** @internal */\nconst kServer = Symbol('server');\n/** @internal */\nconst kNamespace = Symbol('namespace');\n/** @internal */\nconst kTopology = Symbol('topology');\n/** @internal */\nconst kSession = Symbol('session');\n/** @internal */\nconst kOptions = Symbol('options');\n/** @internal */\nconst kTransform = Symbol('transform');\n/** @internal */\nconst kInitialized = Symbol('initialized');\n/** @internal */\nconst kClosed = Symbol('closed');\n/** @internal */\nconst kKilled = Symbol('killed');\n\n/** @public */\nexport const CURSOR_FLAGS = [\n  'tailable',\n  'oplogReplay',\n  'noCursorTimeout',\n  'awaitData',\n  'exhaust',\n  'partial'\n] as const;\n\n/** @public\n * @deprecated This interface is deprecated */\nexport interface CursorCloseOptions {\n  /** Bypass calling killCursors when closing the cursor. */\n  /** @deprecated  the skipKillCursors option is deprecated */\n  skipKillCursors?: boolean;\n}\n\n/** @public */\nexport interface CursorStreamOptions {\n  /** A transformation method applied to each document emitted by the stream */\n  transform?(doc: Document): Document;\n}\n\n/** @public */\nexport type CursorFlag = typeof CURSOR_FLAGS[number];\n\n/** @public */\nexport interface AbstractCursorOptions extends BSONSerializeOptions {\n  session?: ClientSession;\n  readPreference?: ReadPreferenceLike;\n  readConcern?: ReadConcernLike;\n  batchSize?: number;\n  maxTimeMS?: number;\n  comment?: Document | string;\n  tailable?: boolean;\n  awaitData?: boolean;\n  noCursorTimeout?: boolean;\n}\n\n/** @internal */\nexport type InternalAbstractCursorOptions = Omit<AbstractCursorOptions, 'readPreference'> & {\n  // resolved\n  readPreference: ReadPreference;\n  readConcern?: ReadConcern;\n\n  // cursor flags, some are deprecated\n  oplogReplay?: boolean;\n  exhaust?: boolean;\n  partial?: boolean;\n};\n\n/** @public */\nexport type AbstractCursorEvents = {\n  [AbstractCursor.CLOSE](): void;\n};\n\n/** @public */\nexport abstract class AbstractCursor<\n  TSchema = any,\n  CursorEvents extends AbstractCursorEvents = AbstractCursorEvents\n> extends TypedEventEmitter<CursorEvents> {\n  /** @internal */\n  [kId]?: Long;\n  /** @internal */\n  [kSession]?: ClientSession;\n  /** @internal */\n  [kServer]?: Server;\n  /** @internal */\n  [kNamespace]: MongoDBNamespace;\n  /** @internal */\n  [kDocuments]: TSchema[];\n  /** @internal */\n  [kTopology]: Topology;\n  /** @internal */\n  [kTransform]?: (doc: TSchema) => Document;\n  /** @internal */\n  [kInitialized]: boolean;\n  /** @internal */\n  [kClosed]: boolean;\n  /** @internal */\n  [kKilled]: boolean;\n  /** @internal */\n  [kOptions]: InternalAbstractCursorOptions;\n\n  /** @event */\n  static readonly CLOSE = 'close' as const;\n\n  /** @internal */\n  constructor(\n    topology: Topology,\n    namespace: MongoDBNamespace,\n    options: AbstractCursorOptions = {}\n  ) {\n    super();\n\n    this[kTopology] = topology;\n    this[kNamespace] = namespace;\n    this[kDocuments] = []; // TODO: https://github.com/microsoft/TypeScript/issues/36230\n    this[kInitialized] = false;\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kOptions] = {\n      readPreference:\n        options.readPreference && options.readPreference instanceof ReadPreference\n          ? options.readPreference\n          : ReadPreference.primary,\n      ...pluckBSONSerializeOptions(options)\n    };\n\n    const readConcern = ReadConcern.fromOptions(options);\n    if (readConcern) {\n      this[kOptions].readConcern = readConcern;\n    }\n\n    if (typeof options.batchSize === 'number') {\n      this[kOptions].batchSize = options.batchSize;\n    }\n\n    if (options.comment != null) {\n      this[kOptions].comment = options.comment;\n    }\n\n    if (typeof options.maxTimeMS === 'number') {\n      this[kOptions].maxTimeMS = options.maxTimeMS;\n    }\n\n    if (options.session instanceof ClientSession) {\n      this[kSession] = options.session;\n    }\n  }\n\n  get id(): Long | undefined {\n    return this[kId];\n  }\n\n  /** @internal */\n  get topology(): Topology {\n    return this[kTopology];\n  }\n\n  /** @internal */\n  get server(): Server | undefined {\n    return this[kServer];\n  }\n\n  get namespace(): MongoDBNamespace {\n    return this[kNamespace];\n  }\n\n  get readPreference(): ReadPreference {\n    return this[kOptions].readPreference;\n  }\n\n  get readConcern(): ReadConcern | undefined {\n    return this[kOptions].readConcern;\n  }\n\n  /** @internal */\n  get session(): ClientSession | undefined {\n    return this[kSession];\n  }\n\n  set session(clientSession: ClientSession | undefined) {\n    this[kSession] = clientSession;\n  }\n\n  /** @internal */\n  get cursorOptions(): InternalAbstractCursorOptions {\n    return this[kOptions];\n  }\n\n  get closed(): boolean {\n    return this[kClosed];\n  }\n\n  get killed(): boolean {\n    return this[kKilled];\n  }\n\n  get loadBalanced(): boolean {\n    return this[kTopology].loadBalanced;\n  }\n\n  /** Returns current buffered documents length */\n  bufferedCount(): number {\n    return this[kDocuments].length;\n  }\n\n  /** Returns current buffered documents */\n  readBufferedDocuments(number?: number): TSchema[] {\n    return this[kDocuments].splice(0, number ?? this[kDocuments].length);\n  }\n\n  [Symbol.asyncIterator](): AsyncIterator<TSchema, void> {\n    return {\n      next: () =>\n        this.next().then(value =>\n          value != null ? { value, done: false } : { value: undefined, done: true }\n        )\n    };\n  }\n\n  stream(options?: CursorStreamOptions): Readable {\n    if (options?.transform) {\n      const transform = options.transform;\n      const readable = makeCursorStream(this);\n\n      return readable.pipe(\n        new Transform({\n          objectMode: true,\n          highWaterMark: 1,\n          transform(chunk, _, callback) {\n            try {\n              const transformed = transform(chunk);\n              callback(undefined, transformed);\n            } catch (err) {\n              callback(err);\n            }\n          }\n        })\n      );\n    }\n\n    return makeCursorStream(this);\n  }\n\n  hasNext(): Promise<boolean>;\n  hasNext(callback: Callback<boolean>): void;\n  hasNext(callback?: Callback<boolean>): Promise<boolean> | void {\n    return maybePromise(callback, done => {\n      if (this[kId] === Long.ZERO) {\n        return done(undefined, false);\n      }\n\n      if (this[kDocuments].length) {\n        return done(undefined, true);\n      }\n\n      next<TSchema>(this, true, (err, doc) => {\n        if (err) return done(err);\n\n        if (doc) {\n          this[kDocuments].unshift(doc);\n          done(undefined, true);\n          return;\n        }\n\n        done(undefined, false);\n      });\n    });\n  }\n\n  /** Get the next available document from the cursor, returns null if no more documents are available. */\n  next(): Promise<TSchema | null>;\n  next(callback: Callback<TSchema | null>): void;\n  next(callback?: Callback<TSchema | null>): Promise<TSchema | null> | void;\n  next(callback?: Callback<TSchema | null>): Promise<TSchema | null> | void {\n    return maybePromise(callback, done => {\n      if (this[kId] === Long.ZERO) {\n        return done(new MongoCursorExhaustedError());\n      }\n\n      next(this, true, done);\n    });\n  }\n\n  /**\n   * Try to get the next available document from the cursor or `null` if an empty batch is returned\n   */\n  tryNext(): Promise<TSchema | null>;\n  tryNext(callback: Callback<TSchema | null>): void;\n  tryNext(callback?: Callback<TSchema | null>): Promise<TSchema | null> | void {\n    return maybePromise(callback, done => {\n      if (this[kId] === Long.ZERO) {\n        return done(new MongoCursorExhaustedError());\n      }\n\n      next(this, false, done);\n    });\n  }\n\n  /**\n   * Iterates over all the documents for this cursor using the iterator, callback pattern.\n   *\n   * @param iterator - The iteration callback.\n   * @param callback - The end callback.\n   */\n  forEach(iterator: (doc: TSchema) => boolean | void): Promise<void>;\n  forEach(iterator: (doc: TSchema) => boolean | void, callback: Callback<void>): void;\n  forEach(\n    iterator: (doc: TSchema) => boolean | void,\n    callback?: Callback<void>\n  ): Promise<void> | void {\n    if (typeof iterator !== 'function') {\n      throw new MongoInvalidArgumentError('Argument \"iterator\" must be a function');\n    }\n    return maybePromise(callback, done => {\n      const transform = this[kTransform];\n      const fetchDocs = () => {\n        next<TSchema>(this, true, (err, doc) => {\n          if (err || doc == null) return done(err);\n          let result;\n          // NOTE: no need to transform because `next` will do this automatically\n          try {\n            result = iterator(doc); // TODO(NODE-3283): Improve transform typing\n          } catch (error) {\n            return done(error);\n          }\n\n          if (result === false) return done();\n\n          // these do need to be transformed since they are copying the rest of the batch\n          const internalDocs = this[kDocuments].splice(0, this[kDocuments].length);\n          for (let i = 0; i < internalDocs.length; ++i) {\n            try {\n              result = iterator(\n                (transform ? transform(internalDocs[i]) : internalDocs[i]) as TSchema // TODO(NODE-3283): Improve transform typing\n              );\n            } catch (error) {\n              return done(error);\n            }\n            if (result === false) return done();\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n\n  close(): void;\n  close(callback: Callback): void;\n  /**\n   * @deprecated options argument is deprecated\n   */\n  close(options: CursorCloseOptions): Promise<void>;\n  /**\n   * @deprecated options argument is deprecated\n   */\n  close(options: CursorCloseOptions, callback: Callback): void;\n  close(options?: CursorCloseOptions | Callback, callback?: Callback): Promise<void> | void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n\n    const needsToEmitClosed = !this[kClosed];\n    this[kClosed] = true;\n\n    return maybePromise(callback, done => cleanupCursor(this, { needsToEmitClosed }, done));\n  }\n\n  /**\n   * Returns an array of documents. The caller is responsible for making sure that there\n   * is enough memory to store the results. Note that the array only contains partial\n   * results when this cursor had been previously accessed. In that case,\n   * cursor.rewind() can be used to reset the cursor.\n   *\n   * @param callback - The result callback.\n   */\n  toArray(): Promise<TSchema[]>;\n  toArray(callback: Callback<TSchema[]>): void;\n  toArray(callback?: Callback<TSchema[]>): Promise<TSchema[]> | void {\n    return maybePromise(callback, done => {\n      const docs: TSchema[] = [];\n      const transform = this[kTransform];\n      const fetchDocs = () => {\n        // NOTE: if we add a `nextBatch` then we should use it here\n        next<TSchema>(this, true, (err, doc) => {\n          if (err) return done(err);\n          if (doc == null) return done(undefined, docs);\n\n          // NOTE: no need to transform because `next` will do this automatically\n          docs.push(doc);\n\n          // these do need to be transformed since they are copying the rest of the batch\n          const internalDocs = (\n            transform\n              ? this[kDocuments].splice(0, this[kDocuments].length).map(transform)\n              : this[kDocuments].splice(0, this[kDocuments].length)\n          ) as TSchema[]; // TODO(NODE-3283): Improve transform typing\n\n          if (internalDocs) {\n            docs.push(...internalDocs);\n          }\n\n          fetchDocs();\n        });\n      };\n\n      fetchDocs();\n    });\n  }\n\n  /**\n   * Add a cursor flag to the cursor\n   *\n   * @param flag - The flag to set, must be one of following ['tailable', 'oplogReplay', 'noCursorTimeout', 'awaitData', 'partial' -.\n   * @param value - The flag boolean value.\n   */\n  addCursorFlag(flag: CursorFlag, value: boolean): this {\n    assertUninitialized(this);\n    if (!CURSOR_FLAGS.includes(flag)) {\n      throw new MongoInvalidArgumentError(`Flag ${flag} is not one of ${CURSOR_FLAGS}`);\n    }\n\n    if (typeof value !== 'boolean') {\n      throw new MongoInvalidArgumentError(`Flag ${flag} must be a boolean value`);\n    }\n\n    this[kOptions][flag] = value;\n    return this;\n  }\n\n  /**\n   * Map all documents using the provided function\n   * If there is a transform set on the cursor, that will be called first and the result passed to\n   * this function's transform.\n   *\n   * @remarks\n   * **Note for Typescript Users:** adding a transform changes the return type of the iteration of this cursor,\n   * it **does not** return a new instance of a cursor. This means when calling map,\n   * you should always assign the result to a new variable in order to get a correctly typed cursor variable.\n   * Take note of the following example:\n   *\n   * @example\n   * ```typescript\n   * const cursor: FindCursor<Document> = coll.find();\n   * const mappedCursor: FindCursor<number> = cursor.map(doc => Object.keys(doc).length);\n   * const keyCounts: number[] = await mappedCursor.toArray(); // cursor.toArray() still returns Document[]\n   * ```\n   * @param transform - The mapping transformation method.\n   */\n  map<T = any>(transform: (doc: TSchema) => T): AbstractCursor<T> {\n    assertUninitialized(this);\n    const oldTransform = this[kTransform] as (doc: TSchema) => TSchema; // TODO(NODE-3283): Improve transform typing\n    if (oldTransform) {\n      this[kTransform] = doc => {\n        return transform(oldTransform(doc));\n      };\n    } else {\n      this[kTransform] = transform;\n    }\n\n    return this as unknown as AbstractCursor<T>;\n  }\n\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n  withReadPreference(readPreference: ReadPreferenceLike): this {\n    assertUninitialized(this);\n    if (readPreference instanceof ReadPreference) {\n      this[kOptions].readPreference = readPreference;\n    } else if (typeof readPreference === 'string') {\n      this[kOptions].readPreference = ReadPreference.fromString(readPreference);\n    } else {\n      throw new MongoInvalidArgumentError(`Invalid read preference: ${readPreference}`);\n    }\n\n    return this;\n  }\n\n  /**\n   * Set the ReadPreference for the cursor.\n   *\n   * @param readPreference - The new read preference for the cursor.\n   */\n  withReadConcern(readConcern: ReadConcernLike): this {\n    assertUninitialized(this);\n    const resolvedReadConcern = ReadConcern.fromOptions({ readConcern });\n    if (resolvedReadConcern) {\n      this[kOptions].readConcern = resolvedReadConcern;\n    }\n\n    return this;\n  }\n\n  /**\n   * Set a maxTimeMS on the cursor query, allowing for hard timeout limits on queries (Only supported on MongoDB 2.6 or higher)\n   *\n   * @param value - Number of milliseconds to wait before aborting the query.\n   */\n  maxTimeMS(value: number): this {\n    assertUninitialized(this);\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Argument for maxTimeMS must be a number');\n    }\n\n    this[kOptions].maxTimeMS = value;\n    return this;\n  }\n\n  /**\n   * Set the batch size for the cursor.\n   *\n   * @param value - The number of documents to return per batch. See {@link https://docs.mongodb.com/manual/reference/command/find/|find command documentation}.\n   */\n  batchSize(value: number): this {\n    assertUninitialized(this);\n    if (this[kOptions].tailable) {\n      throw new MongoTailableCursorError('Tailable cursor does not support batchSize');\n    }\n\n    if (typeof value !== 'number') {\n      throw new MongoInvalidArgumentError('Operation \"batchSize\" requires an integer');\n    }\n\n    this[kOptions].batchSize = value;\n    return this;\n  }\n\n  /**\n   * Rewind this cursor to its uninitialized state. Any options that are present on the cursor will\n   * remain in effect. Iterating this cursor will cause new queries to be sent to the server, even\n   * if the resultant data has already been retrieved by this cursor.\n   */\n  rewind(): void {\n    if (!this[kInitialized]) {\n      return;\n    }\n\n    this[kId] = undefined;\n    this[kDocuments] = [];\n    this[kClosed] = false;\n    this[kKilled] = false;\n    this[kInitialized] = false;\n\n    const session = this[kSession];\n    if (session) {\n      // We only want to end this session if we created it, and it hasn't ended yet\n      if (session.explicit === false && !session.hasEnded) {\n        session.endSession();\n      }\n\n      this[kSession] = undefined;\n    }\n  }\n\n  /**\n   * Returns a new uninitialized copy of this cursor, with options matching those that have been set on the current instance\n   */\n  abstract clone(): AbstractCursor<TSchema>;\n\n  /** @internal */\n  abstract _initialize(\n    session: ClientSession | undefined,\n    callback: Callback<ExecutionResult>\n  ): void;\n\n  /** @internal */\n  _getMore(batchSize: number, callback: Callback<Document>): void {\n    const cursorId = this[kId];\n    const cursorNs = this[kNamespace];\n    const server = this[kServer];\n\n    if (cursorId == null) {\n      callback(new MongoRuntimeError('Unable to iterate cursor with no id'));\n      return;\n    }\n\n    if (server == null) {\n      callback(new MongoRuntimeError('Unable to iterate cursor without selected server'));\n      return;\n    }\n\n    server.getMore(\n      cursorNs,\n      cursorId,\n      {\n        ...this[kOptions],\n        session: this[kSession],\n        batchSize\n      },\n      callback\n    );\n  }\n}\n\nfunction nextDocument<T>(cursor: AbstractCursor): T | null | undefined {\n  if (cursor[kDocuments] == null || !cursor[kDocuments].length) {\n    return null;\n  }\n\n  const doc = cursor[kDocuments].shift();\n  if (doc) {\n    const transform = cursor[kTransform];\n    if (transform) {\n      return transform(doc) as T;\n    }\n\n    return doc;\n  }\n\n  return null;\n}\n\nfunction next<T>(cursor: AbstractCursor, blocking: boolean, callback: Callback<T | null>): void {\n  const cursorId = cursor[kId];\n  if (cursor.closed) {\n    return callback(undefined, null);\n  }\n\n  if (cursor[kDocuments] && cursor[kDocuments].length) {\n    callback(undefined, nextDocument(cursor));\n    return;\n  }\n\n  if (cursorId == null) {\n    // All cursors must operate within a session, one must be made implicitly if not explicitly provided\n    if (cursor[kSession] == null && cursor[kTopology].hasSessionSupport()) {\n      cursor[kSession] = cursor[kTopology].startSession({ owner: cursor, explicit: false });\n    }\n\n    cursor._initialize(cursor[kSession], (err, state) => {\n      if (state) {\n        const response = state.response;\n        cursor[kServer] = state.server;\n        cursor[kSession] = state.session;\n\n        if (response.cursor) {\n          cursor[kId] =\n            typeof response.cursor.id === 'number'\n              ? Long.fromNumber(response.cursor.id)\n              : response.cursor.id;\n\n          if (response.cursor.ns) {\n            cursor[kNamespace] = ns(response.cursor.ns);\n          }\n\n          cursor[kDocuments] = response.cursor.firstBatch;\n        } else {\n          // NOTE: This is for support of older servers (<3.2) which do not use commands\n          cursor[kId] =\n            typeof response.cursorId === 'number'\n              ? Long.fromNumber(response.cursorId)\n              : response.cursorId;\n          cursor[kDocuments] = response.documents;\n        }\n\n        // When server responses return without a cursor document, we close this cursor\n        // and return the raw server response. This is often the case for explain commands\n        // for example\n        if (cursor[kId] == null) {\n          cursor[kId] = Long.ZERO;\n          // TODO(NODE-3286): ExecutionResult needs to accept a generic parameter\n          cursor[kDocuments] = [state.response as TODO_NODE_3286];\n        }\n      }\n\n      // the cursor is now initialized, even if an error occurred or it is dead\n      cursor[kInitialized] = true;\n\n      if (err || cursorIsDead(cursor)) {\n        return cleanupCursor(cursor, { error: err }, () => callback(err, nextDocument(cursor)));\n      }\n\n      next(cursor, blocking, callback);\n    });\n\n    return;\n  }\n\n  if (cursorIsDead(cursor)) {\n    return cleanupCursor(cursor, undefined, () => callback(undefined, null));\n  }\n\n  // otherwise need to call getMore\n  const batchSize = cursor[kOptions].batchSize || 1000;\n  cursor._getMore(batchSize, (err, response) => {\n    if (response) {\n      const cursorId =\n        typeof response.cursor.id === 'number'\n          ? Long.fromNumber(response.cursor.id)\n          : response.cursor.id;\n\n      cursor[kDocuments] = response.cursor.nextBatch;\n      cursor[kId] = cursorId;\n    }\n\n    if (err || cursorIsDead(cursor)) {\n      return cleanupCursor(cursor, { error: err }, () => callback(err, nextDocument(cursor)));\n    }\n\n    if (cursor[kDocuments].length === 0 && blocking === false) {\n      return callback(undefined, null);\n    }\n\n    next(cursor, blocking, callback);\n  });\n}\n\nfunction cursorIsDead(cursor: AbstractCursor): boolean {\n  const cursorId = cursor[kId];\n  return !!cursorId && cursorId.isZero();\n}\n\nfunction cleanupCursor(\n  cursor: AbstractCursor,\n  options: { error?: AnyError | undefined; needsToEmitClosed?: boolean } | undefined,\n  callback: Callback\n): void {\n  const cursorId = cursor[kId];\n  const cursorNs = cursor[kNamespace];\n  const server = cursor[kServer];\n  const session = cursor[kSession];\n  const error = options?.error;\n  const needsToEmitClosed = options?.needsToEmitClosed ?? cursor[kDocuments].length === 0;\n\n  if (error) {\n    if (cursor.loadBalanced && error instanceof MongoNetworkError) {\n      return completeCleanup();\n    }\n  }\n\n  if (cursorId == null || server == null || cursorId.isZero() || cursorNs == null) {\n    if (needsToEmitClosed) {\n      cursor[kClosed] = true;\n      cursor[kId] = Long.ZERO;\n      cursor.emit(AbstractCursor.CLOSE);\n    }\n\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({ error }, callback);\n      }\n\n      if (!session.inTransaction()) {\n        maybeClearPinnedConnection(session, { error });\n      }\n    }\n\n    return callback();\n  }\n\n  function completeCleanup() {\n    if (session) {\n      if (session.owner === cursor) {\n        return session.endSession({ error }, () => {\n          cursor.emit(AbstractCursor.CLOSE);\n          callback();\n        });\n      }\n\n      if (!session.inTransaction()) {\n        maybeClearPinnedConnection(session, { error });\n      }\n    }\n\n    cursor.emit(AbstractCursor.CLOSE);\n    return callback();\n  }\n\n  cursor[kKilled] = true;\n  server.killCursors(\n    cursorNs,\n    [cursorId],\n    { ...pluckBSONSerializeOptions(cursor[kOptions]), session },\n    () => completeCleanup()\n  );\n}\n\n/** @internal */\nexport function assertUninitialized(cursor: AbstractCursor): void {\n  if (cursor[kInitialized]) {\n    throw new MongoCursorInUseError();\n  }\n}\n\nfunction makeCursorStream<TSchema extends Document>(cursor: AbstractCursor<TSchema>) {\n  const readable = new Readable({\n    objectMode: true,\n    autoDestroy: false,\n    highWaterMark: 1\n  });\n\n  let initialized = false;\n  let reading = false;\n  let needToClose = true; // NOTE: we must close the cursor if we never read from it, use `_construct` in future node versions\n\n  readable._read = function () {\n    if (initialized === false) {\n      needToClose = false;\n      initialized = true;\n    }\n\n    if (!reading) {\n      reading = true;\n      readNext();\n    }\n  };\n\n  readable._destroy = function (error, cb) {\n    if (needToClose) {\n      cursor.close(err => process.nextTick(cb, err || error));\n    } else {\n      cb(error);\n    }\n  };\n\n  function readNext() {\n    needToClose = false;\n    next(cursor, true, (err, result) => {\n      needToClose = err ? !cursor.closed : result != null;\n\n      if (err) {\n        // NOTE: This is questionable, but we have a test backing the behavior. It seems the\n        //       desired behavior is that a stream ends cleanly when a user explicitly closes\n        //       a client during iteration. Alternatively, we could do the \"right\" thing and\n        //       propagate the error message by removing this special case.\n        if (err.message.match(/server is closed/)) {\n          cursor.close();\n          return readable.push(null);\n        }\n\n        // NOTE: This is also perhaps questionable. The rationale here is that these errors tend\n        //       to be \"operation interrupted\", where a cursor has been closed but there is an\n        //       active getMore in-flight. This used to check if the cursor was killed but once\n        //       that changed to happen in cleanup legitimate errors would not destroy the\n        //       stream. There are change streams test specifically test these cases.\n        if (err.message.match(/interrupted/)) {\n          return readable.push(null);\n        }\n\n        return readable.destroy(err);\n      }\n\n      if (result == null) {\n        readable.push(null);\n      } else if (readable.destroyed) {\n        cursor.close();\n      } else {\n        if (readable.push(result)) {\n          return readNext();\n        }\n\n        reading = false;\n      }\n    });\n  }\n\n  return readable;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}