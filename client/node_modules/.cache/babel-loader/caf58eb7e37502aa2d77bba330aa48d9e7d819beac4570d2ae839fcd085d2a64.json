{"ast":null,"code":"import { useTheme } from \"./chunk-JVDTBYWX.js\";\nimport { chipDismissTriggerTheme, chipIconTheme, chipLabelTheme, chipTheme } from \"./chunk-332RUHED.js\";\n\n// src/components/chip.tsx\nimport * as React from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport Ripple from \"material-ripple-effects\";\nimport { jsx } from \"react/jsx-runtime\";\nvar ChipContext = React.createContext({\n  size: \"md\",\n  color: \"primary\",\n  variant: \"solid\",\n  open: true,\n  setOpen: () => {}\n});\nfunction ChipRootBase({\n  as,\n  size,\n  color,\n  variant,\n  className,\n  open: controlledOpen,\n  onOpenChange: setControlledOpen,\n  children,\n  isPill,\n  ...props\n}, ref) {\n  const Component = as ?? \"div\";\n  const contextTheme = useTheme();\n  const theme = contextTheme?.chip ?? chipTheme;\n  const defaultProps = theme?.defaultProps;\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(true);\n  const open = controlledOpen ?? uncontrolledOpen;\n  const setOpen = setControlledOpen ?? setUncontrolledOpen;\n  size ??= defaultProps?.size ?? \"md\";\n  color ??= defaultProps?.color ?? \"primary\";\n  variant ??= defaultProps?.variant ?? \"solid\";\n  isPill ??= defaultProps?.isPill ?? true;\n  const styles = twMerge(theme.baseStyle, theme[\"size\"][size], theme[\"variant\"][variant][color], className);\n  const contextValue = React.useMemo(() => ({\n    size,\n    color,\n    variant,\n    open,\n    setOpen\n  }), [size, color, variant, open, setOpen]);\n  return open ? /* @__PURE__ */jsx(Component, {\n    ...props,\n    ref,\n    \"data-open\": open,\n    \"data-shape\": isPill ? \"pill\" : \"default\",\n    className: styles,\n    children: /* @__PURE__ */jsx(ChipContext.Provider, {\n      value: contextValue,\n      children\n    })\n  }) : null;\n}\nChipRootBase.displayName = \"MaterialTailwind.Chip\";\nvar ChipRoot = React.forwardRef(ChipRootBase);\nfunction ChipLabelRoot({\n  as,\n  className,\n  children,\n  ...props\n}, ref) {\n  const Component = as ?? \"span\";\n  const contextTheme = useTheme();\n  const {\n    size\n  } = React.useContext(ChipContext);\n  const theme = contextTheme?.chipLabel ?? chipLabelTheme;\n  const styles = twMerge(theme.baseStyle, theme[\"size\"][size || \"md\"], className);\n  return /* @__PURE__ */jsx(Component, {\n    ...props,\n    ref,\n    className: styles,\n    children\n  });\n}\nChipLabelRoot.displayName = \"MaterialTailwind.ChipLabel\";\nvar ChipLabel = React.forwardRef(ChipLabelRoot);\nfunction ChipIconRoot({\n  as,\n  className,\n  children,\n  ...props\n}, ref) {\n  const Component = as ?? \"span\";\n  const contextTheme = useTheme();\n  const {\n    size\n  } = React.useContext(ChipContext);\n  const theme = contextTheme?.chipIcon ?? chipIconTheme;\n  const styles = twMerge(theme.baseStyle, theme[\"size\"][size || \"md\"], className);\n  return /* @__PURE__ */jsx(Component, {\n    ...props,\n    ref,\n    className: styles,\n    children\n  });\n}\nChipIconRoot.displayName = \"MaterialTailwind.ChipIcon\";\nvar ChipIcon = React.forwardRef(ChipIconRoot);\nfunction ChipDismissTriggerRoot({\n  as,\n  ripple,\n  className,\n  children,\n  ...props\n}, ref) {\n  const Component = as ?? \"button\";\n  const contextTheme = useTheme();\n  const {\n    size,\n    color,\n    variant,\n    setOpen\n  } = React.useContext(ChipContext);\n  const theme = contextTheme?.chipDismissTrigger ?? chipDismissTriggerTheme;\n  const defaultProps = theme?.defaultProps;\n  ripple ??= defaultProps?.ripple ?? true;\n  const rippleEffect = ripple !== void 0 && new Ripple();\n  const handleClick = event => {\n    setOpen?.(false);\n    props.onClick?.(event);\n    const isDarkRipple = variant === \"ghost\" || variant === \"outline\" || color === \"secondary\" || color === \"warning\";\n    if (ripple) {\n      rippleEffect.create(event, isDarkRipple ? \"dark\" : \"light\");\n    }\n  };\n  const styles = twMerge(theme.baseStyle, theme[\"size\"][size || \"md\"], className);\n  return /* @__PURE__ */jsx(Component, {\n    ...props,\n    ref,\n    className: styles,\n    onClick: handleClick,\n    children: children || /* @__PURE__ */jsx(\"svg\", {\n      viewBox: \"0 0 24 24\",\n      fill: \"none\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      color: \"currentColor\",\n      className: \"h-full w-full\",\n      children: /* @__PURE__ */jsx(\"path\", {\n        d: \"M6.75827 17.2426L12.0009 12M17.2435 6.75736L12.0009 12M12.0009 12L6.75827 6.75736M12.0009 12L17.2435 17.2426\",\n        stroke: \"currentColor\",\n        strokeLinecap: \"round\",\n        strokeLinejoin: \"round\"\n      })\n    })\n  });\n}\nChipDismissTriggerRoot.displayName = \"MaterialTailwind.ChipDismissTrigger\";\nvar ChipDismissTrigger = React.forwardRef(ChipDismissTriggerRoot);\nvar Chip = Object.assign(ChipRoot, {\n  Icon: ChipIcon,\n  Label: ChipLabel,\n  DismissTrigger: ChipDismissTrigger\n});\nvar chip_default = Chip;\nexport { ChipContext, ChipRoot, ChipLabel, ChipIcon, ChipDismissTrigger, Chip, chip_default };","map":{"version":3,"names":["useTheme","chipDismissTriggerTheme","chipIconTheme","chipLabelTheme","chipTheme","React","twMerge","Ripple","jsx","ChipContext","createContext","size","color","variant","open","setOpen","ChipRootBase","as","className","controlledOpen","onOpenChange","setControlledOpen","children","isPill","props","ref","Component","contextTheme","theme","chip","defaultProps","uncontrolledOpen","setUncontrolledOpen","useState","styles","baseStyle","contextValue","useMemo","Provider","value","displayName","ChipRoot","forwardRef","ChipLabelRoot","useContext","chipLabel","ChipLabel","ChipIconRoot","chipIcon","ChipIcon","ChipDismissTriggerRoot","ripple","chipDismissTrigger","rippleEffect","handleClick","event","onClick","isDarkRipple","create","viewBox","fill","xmlns","d","stroke","strokeLinecap","strokeLinejoin","ChipDismissTrigger","Chip","Object","assign","Icon","Label","DismissTrigger","chip_default"],"sources":["C:/Users/chris/Desktop/insite/node_modules/@material-tailwind/react/dist/chunk-IIM6BP3Z.js"],"sourcesContent":["import {\n  useTheme\n} from \"./chunk-JVDTBYWX.js\";\nimport {\n  chipDismissTriggerTheme,\n  chipIconTheme,\n  chipLabelTheme,\n  chipTheme\n} from \"./chunk-332RUHED.js\";\n\n// src/components/chip.tsx\nimport * as React from \"react\";\nimport { twMerge } from \"tailwind-merge\";\nimport Ripple from \"material-ripple-effects\";\nimport { jsx } from \"react/jsx-runtime\";\nvar ChipContext = React.createContext({\n  size: \"md\",\n  color: \"primary\",\n  variant: \"solid\",\n  open: true,\n  setOpen: () => {\n  }\n});\nfunction ChipRootBase({\n  as,\n  size,\n  color,\n  variant,\n  className,\n  open: controlledOpen,\n  onOpenChange: setControlledOpen,\n  children,\n  isPill,\n  ...props\n}, ref) {\n  const Component = as ?? \"div\";\n  const contextTheme = useTheme();\n  const theme = contextTheme?.chip ?? chipTheme;\n  const defaultProps = theme?.defaultProps;\n  const [uncontrolledOpen, setUncontrolledOpen] = React.useState(true);\n  const open = controlledOpen ?? uncontrolledOpen;\n  const setOpen = setControlledOpen ?? setUncontrolledOpen;\n  size ??= defaultProps?.size ?? \"md\";\n  color ??= defaultProps?.color ?? \"primary\";\n  variant ??= defaultProps?.variant ?? \"solid\";\n  isPill ??= defaultProps?.isPill ?? true;\n  const styles = twMerge(\n    theme.baseStyle,\n    theme[\"size\"][size],\n    theme[\"variant\"][variant][color],\n    className\n  );\n  const contextValue = React.useMemo(\n    () => ({\n      size,\n      color,\n      variant,\n      open,\n      setOpen\n    }),\n    [size, color, variant, open, setOpen]\n  );\n  return open ? /* @__PURE__ */ jsx(\n    Component,\n    {\n      ...props,\n      ref,\n      \"data-open\": open,\n      \"data-shape\": isPill ? \"pill\" : \"default\",\n      className: styles,\n      children: /* @__PURE__ */ jsx(ChipContext.Provider, { value: contextValue, children })\n    }\n  ) : null;\n}\nChipRootBase.displayName = \"MaterialTailwind.Chip\";\nvar ChipRoot = React.forwardRef(ChipRootBase);\nfunction ChipLabelRoot({ as, className, children, ...props }, ref) {\n  const Component = as ?? \"span\";\n  const contextTheme = useTheme();\n  const { size } = React.useContext(ChipContext);\n  const theme = contextTheme?.chipLabel ?? chipLabelTheme;\n  const styles = twMerge(\n    theme.baseStyle,\n    theme[\"size\"][size || \"md\"],\n    className\n  );\n  return /* @__PURE__ */ jsx(Component, { ...props, ref, className: styles, children });\n}\nChipLabelRoot.displayName = \"MaterialTailwind.ChipLabel\";\nvar ChipLabel = React.forwardRef(ChipLabelRoot);\nfunction ChipIconRoot({ as, className, children, ...props }, ref) {\n  const Component = as ?? \"span\";\n  const contextTheme = useTheme();\n  const { size } = React.useContext(ChipContext);\n  const theme = contextTheme?.chipIcon ?? chipIconTheme;\n  const styles = twMerge(\n    theme.baseStyle,\n    theme[\"size\"][size || \"md\"],\n    className\n  );\n  return /* @__PURE__ */ jsx(Component, { ...props, ref, className: styles, children });\n}\nChipIconRoot.displayName = \"MaterialTailwind.ChipIcon\";\nvar ChipIcon = React.forwardRef(ChipIconRoot);\nfunction ChipDismissTriggerRoot({ as, ripple, className, children, ...props }, ref) {\n  const Component = as ?? \"button\";\n  const contextTheme = useTheme();\n  const { size, color, variant, setOpen } = React.useContext(ChipContext);\n  const theme = contextTheme?.chipDismissTrigger ?? chipDismissTriggerTheme;\n  const defaultProps = theme?.defaultProps;\n  ripple ??= defaultProps?.ripple ?? true;\n  const rippleEffect = ripple !== void 0 && new Ripple();\n  const handleClick = (event) => {\n    setOpen?.(false);\n    props.onClick?.(event);\n    const isDarkRipple = variant === \"ghost\" || variant === \"outline\" || color === \"secondary\" || color === \"warning\";\n    if (ripple) {\n      rippleEffect.create(event, isDarkRipple ? \"dark\" : \"light\");\n    }\n  };\n  const styles = twMerge(\n    theme.baseStyle,\n    theme[\"size\"][size || \"md\"],\n    className\n  );\n  return /* @__PURE__ */ jsx(Component, { ...props, ref, className: styles, onClick: handleClick, children: children || /* @__PURE__ */ jsx(\n    \"svg\",\n    {\n      viewBox: \"0 0 24 24\",\n      fill: \"none\",\n      xmlns: \"http://www.w3.org/2000/svg\",\n      color: \"currentColor\",\n      className: \"h-full w-full\",\n      children: /* @__PURE__ */ jsx(\n        \"path\",\n        {\n          d: \"M6.75827 17.2426L12.0009 12M17.2435 6.75736L12.0009 12M12.0009 12L6.75827 6.75736M12.0009 12L17.2435 17.2426\",\n          stroke: \"currentColor\",\n          strokeLinecap: \"round\",\n          strokeLinejoin: \"round\"\n        }\n      )\n    }\n  ) });\n}\nChipDismissTriggerRoot.displayName = \"MaterialTailwind.ChipDismissTrigger\";\nvar ChipDismissTrigger = React.forwardRef(ChipDismissTriggerRoot);\nvar Chip = Object.assign(ChipRoot, {\n  Icon: ChipIcon,\n  Label: ChipLabel,\n  DismissTrigger: ChipDismissTrigger\n});\nvar chip_default = Chip;\n\nexport {\n  ChipContext,\n  ChipRoot,\n  ChipLabel,\n  ChipIcon,\n  ChipDismissTrigger,\n  Chip,\n  chip_default\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}