{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MongoDBAWS = void 0;\nconst http = require(\"http\");\nconst crypto = require(\"crypto\");\nconst url = require(\"url\");\nconst BSON = require(\"../../bson\");\nconst auth_provider_1 = require(\"./auth_provider\");\nconst mongo_credentials_1 = require(\"./mongo_credentials\");\nconst error_1 = require(\"../../error\");\nconst utils_1 = require(\"../../utils\");\nconst deps_1 = require(\"../../deps\");\nconst defaultAuthProviders_1 = require(\"./defaultAuthProviders\");\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions = {\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\nclass MongoDBAWS extends auth_provider_1.AuthProvider {\n  auth(authContext, callback) {\n    const {\n      connection,\n      credentials\n    } = authContext;\n    if (!credentials) {\n      return callback(new error_1.MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n    if ('kModuleError' in deps_1.aws4) {\n      return callback(deps_1.aws4['kModuleError']);\n    }\n    const {\n      sign\n    } = deps_1.aws4;\n    if ((0, utils_1.maxWireVersion)(connection) < 9) {\n      callback(new error_1.MongoCompatibilityError('MONGODB-AWS authentication requires MongoDB version 4.4 or later'));\n      return;\n    }\n    if (!credentials.username) {\n      makeTempCredentials(credentials, (err, tempCredentials) => {\n        if (err || !tempCredentials) return callback(err);\n        authContext.credentials = tempCredentials;\n        this.auth(authContext, callback);\n      });\n      return;\n    }\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\n    const awsCredentials = accessKeyId && secretAccessKey && sessionToken ? {\n      accessKeyId,\n      secretAccessKey,\n      sessionToken\n    } : accessKeyId && secretAccessKey ? {\n      accessKeyId,\n      secretAccessKey\n    } : undefined;\n    const db = credentials.source;\n    crypto.randomBytes(32, (err, nonce) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n      const saslStart = {\n        saslStart: 1,\n        mechanism: 'MONGODB-AWS',\n        payload: BSON.serialize({\n          r: nonce,\n          p: ASCII_N\n        }, bsonOptions)\n      };\n      connection.command((0, utils_1.ns)(`${db}.$cmd`), saslStart, undefined, (err, res) => {\n        if (err) return callback(err);\n        const serverResponse = BSON.deserialize(res.payload.buffer, bsonOptions);\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n          callback(\n          // TODO(NODE-3483)\n          new error_1.MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`));\n          return;\n        }\n        if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n          // TODO(NODE-3483)\n          callback(new error_1.MongoRuntimeError('Server nonce does not begin with client nonce'));\n          return;\n        }\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n          // TODO(NODE-3483)\n          callback(new error_1.MongoRuntimeError(`Server returned an invalid host: \"${host}\"`));\n          return;\n        }\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign({\n          method: 'POST',\n          host,\n          region: deriveRegion(serverResponse.h),\n          service: 'sts',\n          headers: {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            'Content-Length': body.length,\n            'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n            'X-MongoDB-GS2-CB-Flag': 'n'\n          },\n          path: '/',\n          body\n        }, awsCredentials);\n        const payload = {\n          a: options.headers.Authorization,\n          d: options.headers['X-Amz-Date']\n        };\n        if (sessionToken) {\n          payload.t = sessionToken;\n        }\n        const saslContinue = {\n          saslContinue: 1,\n          conversationId: 1,\n          payload: BSON.serialize(payload, bsonOptions)\n        };\n        connection.command((0, utils_1.ns)(`${db}.$cmd`), saslContinue, undefined, callback);\n      });\n    });\n  }\n}\nexports.MongoDBAWS = MongoDBAWS;\nfunction makeTempCredentials(credentials, callback) {\n  function done(creds) {\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n      callback(new error_1.MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials'));\n      return;\n    }\n    callback(undefined, new mongo_credentials_1.MongoCredentials({\n      username: creds.AccessKeyId,\n      password: creds.SecretAccessKey,\n      source: credentials.source,\n      mechanism: defaultAuthProviders_1.AuthMechanism.MONGODB_AWS,\n      mechanismProperties: {\n        AWS_SESSION_TOKEN: creds.Token\n      }\n    }));\n  }\n  // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n  // is set then drivers MUST assume that it was set by an AWS ECS agent\n  if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n    request(`${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`, undefined, (err, res) => {\n      if (err) return callback(err);\n      done(res);\n    });\n    return;\n  }\n  // Otherwise assume we are on an EC2 instance\n  // get a token\n  request(`${AWS_EC2_URI}/latest/api/token`, {\n    method: 'PUT',\n    json: false,\n    headers: {\n      'X-aws-ec2-metadata-token-ttl-seconds': 30\n    }\n  }, (err, token) => {\n    if (err) return callback(err);\n    // get role name\n    request(`${AWS_EC2_URI}/${AWS_EC2_PATH}`, {\n      json: false,\n      headers: {\n        'X-aws-ec2-metadata-token': token\n      }\n    }, (err, roleName) => {\n      if (err) return callback(err);\n      // get temp credentials\n      request(`${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`, {\n        headers: {\n          'X-aws-ec2-metadata-token': token\n        }\n      }, (err, creds) => {\n        if (err) return callback(err);\n        done(creds);\n      });\n    });\n  });\n}\nfunction deriveRegion(host) {\n  const parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n  return parts[1];\n}\nfunction request(uri, _options, callback) {\n  const options = Object.assign({\n    method: 'GET',\n    timeout: 10000,\n    json: true\n  }, url.parse(uri), _options);\n  const req = http.request(options, res => {\n    res.setEncoding('utf8');\n    let data = '';\n    res.on('data', d => data += d);\n    res.on('end', () => {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n      try {\n        const parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        // TODO(NODE-3483)\n        callback(new error_1.MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n      }\n    });\n  });\n  req.on('error', err => callback(err));\n  req.end();\n}","map":{"version":3,"names":["http","require","crypto","url","BSON","auth_provider_1","mongo_credentials_1","error_1","utils_1","deps_1","defaultAuthProviders_1","ASCII_N","AWS_RELATIVE_URI","AWS_EC2_URI","AWS_EC2_PATH","bsonOptions","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","MongoDBAWS","AuthProvider","auth","authContext","callback","connection","credentials","MongoMissingCredentialsError","aws4","sign","maxWireVersion","MongoCompatibilityError","username","makeTempCredentials","err","tempCredentials","accessKeyId","secretAccessKey","password","sessionToken","mechanismProperties","AWS_SESSION_TOKEN","awsCredentials","undefined","db","source","randomBytes","nonce","saslStart","mechanism","payload","serialize","r","p","command","ns","res","serverResponse","deserialize","buffer","host","h","serverNonce","s","length","MongoRuntimeError","compare","indexOf","body","options","method","region","deriveRegion","service","headers","toString","path","a","Authorization","d","t","saslContinue","conversationId","exports","done","creds","AccessKeyId","SecretAccessKey","Token","MongoCredentials","AuthMechanism","MONGODB_AWS","process","env","AWS_CONTAINER_CREDENTIALS_RELATIVE_URI","request","json","token","roleName","parts","split","uri","_options","Object","assign","timeout","parse","req","setEncoding","data","on","parsed","JSON","end"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\mongodb\\src\\cmap\\auth\\mongodb_aws.ts"],"sourcesContent":["import * as http from 'http';\nimport * as crypto from 'crypto';\nimport * as url from 'url';\nimport * as BSON from '../../bson';\nimport { AuthProvider, AuthContext } from './auth_provider';\nimport { MongoCredentials } from './mongo_credentials';\nimport {\n  MongoRuntimeError,\n  MongoMissingCredentialsError,\n  MongoCompatibilityError\n} from '../../error';\nimport { maxWireVersion, Callback, ns } from '../../utils';\nimport type { BSONSerializeOptions } from '../../bson';\n\nimport { aws4 } from '../../deps';\nimport { AuthMechanism } from './defaultAuthProviders';\nimport type { Binary } from 'bson';\n\nconst ASCII_N = 110;\nconst AWS_RELATIVE_URI = 'http://169.254.170.2';\nconst AWS_EC2_URI = 'http://169.254.169.254';\nconst AWS_EC2_PATH = '/latest/meta-data/iam/security-credentials';\nconst bsonOptions: BSONSerializeOptions = {\n  promoteLongs: true,\n  promoteValues: true,\n  promoteBuffers: false,\n  bsonRegExp: false\n};\n\ninterface AWSSaslContinuePayload {\n  a: string;\n  d: string;\n  t?: string;\n}\n\nexport class MongoDBAWS extends AuthProvider {\n  auth(authContext: AuthContext, callback: Callback): void {\n    const { connection, credentials } = authContext;\n    if (!credentials) {\n      return callback(new MongoMissingCredentialsError('AuthContext must provide credentials.'));\n    }\n\n    if ('kModuleError' in aws4) {\n      return callback(aws4['kModuleError']);\n    }\n    const { sign } = aws4;\n\n    if (maxWireVersion(connection) < 9) {\n      callback(\n        new MongoCompatibilityError(\n          'MONGODB-AWS authentication requires MongoDB version 4.4 or later'\n        )\n      );\n      return;\n    }\n\n    if (!credentials.username) {\n      makeTempCredentials(credentials, (err, tempCredentials) => {\n        if (err || !tempCredentials) return callback(err);\n\n        authContext.credentials = tempCredentials;\n        this.auth(authContext, callback);\n      });\n\n      return;\n    }\n\n    const accessKeyId = credentials.username;\n    const secretAccessKey = credentials.password;\n    const sessionToken = credentials.mechanismProperties.AWS_SESSION_TOKEN;\n\n    // If all three defined, include sessionToken, else include username and pass, else no credentials\n    const awsCredentials =\n      accessKeyId && secretAccessKey && sessionToken\n        ? { accessKeyId, secretAccessKey, sessionToken }\n        : accessKeyId && secretAccessKey\n        ? { accessKeyId, secretAccessKey }\n        : undefined;\n\n    const db = credentials.source;\n    crypto.randomBytes(32, (err, nonce) => {\n      if (err) {\n        callback(err);\n        return;\n      }\n\n      const saslStart = {\n        saslStart: 1,\n        mechanism: 'MONGODB-AWS',\n        payload: BSON.serialize({ r: nonce, p: ASCII_N }, bsonOptions)\n      };\n\n      connection.command(ns(`${db}.$cmd`), saslStart, undefined, (err, res) => {\n        if (err) return callback(err);\n\n        const serverResponse = BSON.deserialize(res.payload.buffer, bsonOptions) as {\n          s: Binary;\n          h: string;\n        };\n        const host = serverResponse.h;\n        const serverNonce = serverResponse.s.buffer;\n        if (serverNonce.length !== 64) {\n          callback(\n            // TODO(NODE-3483)\n            new MongoRuntimeError(`Invalid server nonce length ${serverNonce.length}, expected 64`)\n          );\n\n          return;\n        }\n\n        if (serverNonce.compare(nonce, 0, nonce.length, 0, nonce.length) !== 0) {\n          // TODO(NODE-3483)\n          callback(new MongoRuntimeError('Server nonce does not begin with client nonce'));\n          return;\n        }\n\n        if (host.length < 1 || host.length > 255 || host.indexOf('..') !== -1) {\n          // TODO(NODE-3483)\n          callback(new MongoRuntimeError(`Server returned an invalid host: \"${host}\"`));\n          return;\n        }\n\n        const body = 'Action=GetCallerIdentity&Version=2011-06-15';\n        const options = sign(\n          {\n            method: 'POST',\n            host,\n            region: deriveRegion(serverResponse.h),\n            service: 'sts',\n            headers: {\n              'Content-Type': 'application/x-www-form-urlencoded',\n              'Content-Length': body.length,\n              'X-MongoDB-Server-Nonce': serverNonce.toString('base64'),\n              'X-MongoDB-GS2-CB-Flag': 'n'\n            },\n            path: '/',\n            body\n          },\n          awsCredentials\n        );\n\n        const payload: AWSSaslContinuePayload = {\n          a: options.headers.Authorization,\n          d: options.headers['X-Amz-Date']\n        };\n        if (sessionToken) {\n          payload.t = sessionToken;\n        }\n\n        const saslContinue = {\n          saslContinue: 1,\n          conversationId: 1,\n          payload: BSON.serialize(payload, bsonOptions)\n        };\n\n        connection.command(ns(`${db}.$cmd`), saslContinue, undefined, callback);\n      });\n    });\n  }\n}\n\ninterface AWSTempCredentials {\n  AccessKeyId?: string;\n  SecretAccessKey?: string;\n  Token?: string;\n  RoleArn?: string;\n  Expiration?: Date;\n}\n\nfunction makeTempCredentials(credentials: MongoCredentials, callback: Callback<MongoCredentials>) {\n  function done(creds: AWSTempCredentials) {\n    if (!creds.AccessKeyId || !creds.SecretAccessKey || !creds.Token) {\n      callback(\n        new MongoMissingCredentialsError('Could not obtain temporary MONGODB-AWS credentials')\n      );\n      return;\n    }\n\n    callback(\n      undefined,\n      new MongoCredentials({\n        username: creds.AccessKeyId,\n        password: creds.SecretAccessKey,\n        source: credentials.source,\n        mechanism: AuthMechanism.MONGODB_AWS,\n        mechanismProperties: {\n          AWS_SESSION_TOKEN: creds.Token\n        }\n      })\n    );\n  }\n\n  // If the environment variable AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\n  // is set then drivers MUST assume that it was set by an AWS ECS agent\n  if (process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI) {\n    request(\n      `${AWS_RELATIVE_URI}${process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI}`,\n      undefined,\n      (err, res) => {\n        if (err) return callback(err);\n        done(res);\n      }\n    );\n\n    return;\n  }\n\n  // Otherwise assume we are on an EC2 instance\n\n  // get a token\n  request(\n    `${AWS_EC2_URI}/latest/api/token`,\n    { method: 'PUT', json: false, headers: { 'X-aws-ec2-metadata-token-ttl-seconds': 30 } },\n    (err, token) => {\n      if (err) return callback(err);\n\n      // get role name\n      request(\n        `${AWS_EC2_URI}/${AWS_EC2_PATH}`,\n        { json: false, headers: { 'X-aws-ec2-metadata-token': token } },\n        (err, roleName) => {\n          if (err) return callback(err);\n\n          // get temp credentials\n          request(\n            `${AWS_EC2_URI}/${AWS_EC2_PATH}/${roleName}`,\n            { headers: { 'X-aws-ec2-metadata-token': token } },\n            (err, creds) => {\n              if (err) return callback(err);\n              done(creds);\n            }\n          );\n        }\n      );\n    }\n  );\n}\n\nfunction deriveRegion(host: string) {\n  const parts = host.split('.');\n  if (parts.length === 1 || parts[1] === 'amazonaws') {\n    return 'us-east-1';\n  }\n\n  return parts[1];\n}\n\ninterface RequestOptions {\n  json?: boolean;\n  method?: string;\n  timeout?: number;\n  headers?: http.OutgoingHttpHeaders;\n}\n\nfunction request(uri: string, _options: RequestOptions | undefined, callback: Callback) {\n  const options = Object.assign(\n    {\n      method: 'GET',\n      timeout: 10000,\n      json: true\n    },\n    url.parse(uri),\n    _options\n  );\n\n  const req = http.request(options, res => {\n    res.setEncoding('utf8');\n\n    let data = '';\n    res.on('data', d => (data += d));\n    res.on('end', () => {\n      if (options.json === false) {\n        callback(undefined, data);\n        return;\n      }\n\n      try {\n        const parsed = JSON.parse(data);\n        callback(undefined, parsed);\n      } catch (err) {\n        // TODO(NODE-3483)\n        callback(new MongoRuntimeError(`Invalid JSON response: \"${data}\"`));\n      }\n    });\n  });\n\n  req.on('error', err => callback(err));\n  req.end();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}