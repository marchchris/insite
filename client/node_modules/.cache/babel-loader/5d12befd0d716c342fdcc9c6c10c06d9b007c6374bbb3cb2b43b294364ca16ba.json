{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.DEFAULT_OPTIONS = exports.OPTIONS = exports.parseOptions = exports.checkTLSOptions = exports.resolveSRVRecord = void 0;\nconst dns = require(\"dns\");\nconst fs = require(\"fs\");\nconst mongodb_connection_string_url_1 = require(\"mongodb-connection-string-url\");\nconst url_1 = require(\"url\");\nconst defaultAuthProviders_1 = require(\"./cmap/auth/defaultAuthProviders\");\nconst read_preference_1 = require(\"./read_preference\");\nconst read_concern_1 = require(\"./read_concern\");\nconst write_concern_1 = require(\"./write_concern\");\nconst error_1 = require(\"./error\");\nconst utils_1 = require(\"./utils\");\nconst mongo_client_1 = require(\"./mongo_client\");\nconst mongo_credentials_1 = require(\"./cmap/auth/mongo_credentials\");\nconst logger_1 = require(\"./logger\");\nconst promise_provider_1 = require(\"./promise_provider\");\nconst encrypter_1 = require(\"./encrypter\");\nconst compression_1 = require(\"./cmap/wire_protocol/compression\");\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR = 'loadBalanced option not supported when directConnection is provided';\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress, parentDomain) {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nfunction resolveSRVRecord(options, callback) {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new error_1.MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new error_1.MongoAPIError('URI must include hostname, domain name, and tld'));\n  }\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n    if (addresses.length === 0) {\n      return callback(new error_1.MongoAPIError('No addresses found at host'));\n    }\n    for (const {\n      name\n    } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(new error_1.MongoAPIError('Server record does not share hostname with parent URI'));\n      }\n    }\n    const hostAddresses = addresses.map(r => {\n      var _a;\n      return utils_1.HostAddress.fromString(`${r.name}:${(_a = r.port) !== null && _a !== void 0 ? _a : 27017}`);\n    });\n    const lbError = validateLoadBalancedOptions(hostAddresses, options);\n    if (lbError) {\n      return callback(lbError);\n    }\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      var _a, _b, _c;\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new error_1.MongoParseError('Multiple text records not allowed'));\n        }\n        const txtRecordOptions = new url_1.URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n        if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n          return callback(new error_1.MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`));\n        }\n        const source = (_a = txtRecordOptions.get('authSource')) !== null && _a !== void 0 ? _a : undefined;\n        const replicaSet = (_b = txtRecordOptions.get('replicaSet')) !== null && _b !== void 0 ? _b : undefined;\n        const loadBalanced = (_c = txtRecordOptions.get('loadBalanced')) !== null && _c !== void 0 ? _c : undefined;\n        if (source === '' || replicaSet === '') {\n          return callback(new error_1.MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n        if (!options.userSpecifiedAuthSource && source) {\n          options.credentials = mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n            source\n          });\n        }\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n        const lbError = validateLoadBalancedOptions(hostAddresses, options);\n        if (lbError) {\n          return callback(lbError);\n        }\n      }\n      callback(undefined, hostAddresses);\n    });\n  });\n}\nexports.resolveSRVRecord = resolveSRVRecord;\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nfunction checkTLSOptions(options) {\n  if (!options) return;\n  const check = (a, b) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new error_1.MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\nexports.checkTLSOptions = checkTLSOptions;\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name, value) {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) return true;\n  if (FALSEHOODS.has(valueString)) return false;\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\nfunction getInt(name, value) {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new error_1.MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\nfunction getUint(name, value) {\n  const parsedValue = getInt(name, value);\n  if (parsedValue < 0) {\n    throw new error_1.MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\nfunction toRecord(value) {\n  const record = Object.create(null);\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (value == null) {\n      throw new error_1.MongoParseError('Cannot have undefined values in key value pairs');\n    }\n    try {\n      // try to get a boolean\n      record[key] = getBoolean('', value);\n    } catch {\n      try {\n        // try to get a number\n        record[key] = getInt('', value);\n      } catch {\n        // keep value as a string\n        record[key] = value;\n      }\n    }\n  }\n  return record;\n}\nclass CaseInsensitiveMap extends Map {\n  constructor(entries = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  has(k) {\n    return super.has(k.toLowerCase());\n  }\n  get(k) {\n    return super.get(k.toLowerCase());\n  }\n  set(k, v) {\n    return super.set(k.toLowerCase(), v);\n  }\n  delete(k) {\n    return super.delete(k.toLowerCase());\n  }\n}\nfunction parseOptions(uri, mongoClient = undefined, options = {}) {\n  if (mongoClient != null && !(mongoClient instanceof mongo_client_1.MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n  const url = new mongodb_connection_string_url_1.default(uri);\n  const {\n    hosts,\n    isSRV\n  } = url;\n  const mongoOptions = Object.create(null);\n  mongoOptions.hosts = isSRV ? [] : hosts.map(utils_1.HostAddress.fromString);\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (!url.searchParams.has('tls') && !url.searchParams.has('ssl')) {\n      options.tls = true;\n    }\n  }\n  const urlOptions = new CaseInsensitiveMap();\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname);\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n  if (url.username !== '') {\n    const auth = {\n      username: decodeURIComponent(url.username)\n    };\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n    urlOptions.set('auth', [auth]);\n  }\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n    if (values.includes('')) {\n      throw new error_1.MongoAPIError('URI cannot contain options with no value');\n    }\n    if (key.toLowerCase() === 'serverapi') {\n      throw new error_1.MongoParseError('URI cannot contain `serverApi`, it can only be passed to the client');\n    }\n    if (key.toLowerCase() === 'authsource' && urlOptions.has('authSource')) {\n      // If authSource is an explicit key in the urlOptions we need to remove the implicit dbName\n      urlOptions.delete('authSource');\n    }\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n  const objectOptions = new CaseInsensitiveMap(Object.entries(options).filter(([, v]) => v != null));\n  if (objectOptions.has('loadBalanced')) {\n    throw new error_1.MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n  const allOptions = new CaseInsensitiveMap();\n  const allKeys = new Set([...urlOptions.keys(), ...objectOptions.keys(), ...exports.DEFAULT_OPTIONS.keys()]);\n  for (const key of allKeys) {\n    const values = [];\n    if (objectOptions.has(key)) {\n      values.push(objectOptions.get(key));\n    }\n    if (urlOptions.has(key)) {\n      values.push(...urlOptions.get(key));\n    }\n    if (exports.DEFAULT_OPTIONS.has(key)) {\n      values.push(exports.DEFAULT_OPTIONS.get(key));\n    }\n    allOptions.set(key, values);\n  }\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || []).concat(allOptions.get('ssl') || []).map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new error_1.MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n  const unsupportedOptions = (0, utils_1.setDifference)(allKeys, Array.from(Object.keys(exports.OPTIONS)).map(s => s.toLowerCase()));\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new error_1.MongoParseError(`${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`);\n  }\n  for (const [key, descriptor] of Object.entries(exports.OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS;\n    if ((isGssapi || isX509) && allOptions.has('authSource') && mongoOptions.credentials.source !== '$external') {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new error_1.MongoParseError(`${mongoOptions.credentials} can only have authSource set to '$external'`);\n    }\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = mongo_credentials_1.MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n    mongoOptions.credentials.validate();\n  }\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n  checkTLSOptions(mongoOptions);\n  if (options.promiseLibrary) promise_provider_1.PromiseProvider.set(options.promiseLibrary);\n  if (mongoOptions.directConnection && typeof mongoOptions.srvHost === 'string') {\n    throw new error_1.MongoAPIError('SRV URI does not support directConnection');\n  }\n  const lbError = validateLoadBalancedOptions(hosts, mongoOptions);\n  if (lbError) {\n    throw lbError;\n  }\n  // Potential SRV Overrides\n  mongoOptions.userSpecifiedAuthSource = objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet = objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n  if (mongoClient && mongoOptions.autoEncryption) {\n    encrypter_1.Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new encrypter_1.Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n  return mongoOptions;\n}\nexports.parseOptions = parseOptions;\nfunction validateLoadBalancedOptions(hosts, mongoOptions) {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new error_1.MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      return new error_1.MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      return new error_1.MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n  }\n}\nfunction setOption(mongoOptions, key, descriptor, values) {\n  const {\n    target,\n    type,\n    transform,\n    deprecated\n  } = descriptor;\n  const name = target !== null && target !== void 0 ? target : key;\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    (0, utils_1.emitWarning)(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!(0, utils_1.isRecord)(values[0])) {\n        throw new error_1.MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default:\n      {\n        if (!transform) {\n          throw new error_1.MongoParseError('Descriptors missing a type must define a transform');\n        }\n        const transformValue = transform({\n          name,\n          options: mongoOptions,\n          values\n        });\n        mongoOptions[name] = transformValue;\n        break;\n      }\n  }\n}\nexports.OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform({\n      options,\n      values: [value]\n    }) {\n      return (0, utils_1.makeClientMetadata)({\n        ...options.driverInfo,\n        appName: String(value)\n      });\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      if (!(0, utils_1.isRecord)(value, ['username', 'password'])) {\n        throw new error_1.MongoParseError(`${name} must be an object with 'username' and 'password' properties`);\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({\n      options,\n      values: [value]\n    }) {\n      var _a, _b;\n      const mechanisms = Object.values(defaultAuthProviders_1.AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new error_1.MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = (_a = options.credentials) === null || _a === void 0 ? void 0 : _a.source;\n      if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_PLAIN || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_GSSAPI || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_AWS || mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n      let password = (_b = options.credentials) === null || _b === void 0 ? void 0 : _b.password;\n      if (mechanism === defaultAuthProviders_1.AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({\n      options,\n      values: [value]\n    }) {\n      if (typeof value === 'string') {\n        value = toRecord(value);\n      }\n      if (!(0, utils_1.isRecord)(value)) {\n        throw new error_1.MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        mechanismProperties: value\n      });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({\n      options,\n      values: [value]\n    }) {\n      const source = String(value);\n      return mongo_credentials_1.MongoCredentials.merge(options.credentials, {\n        source\n      });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({\n      values: [version]\n    }) {\n      const serverApiToValidate = typeof version === 'string' ? {\n        version\n      } : version;\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new error_1.MongoParseError(`Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      if (!Object.values(mongo_client_1.ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new error_1.MongoParseError(`Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(mongo_client_1.ServerApiVersion).join('\", \"')}\"]`);\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({\n      values\n    }) {\n      const compressionList = new Set();\n      for (const compVal of values) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new error_1.MongoInvalidArgumentError('compressors must be an array or a comma-delimited list of strings');\n        }\n        for (const c of compValArray) {\n          if (Object.keys(compression_1.Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new error_1.MongoInvalidArgumentError(`${c} is not a valid compression mechanism. Must be one of: ${Object.keys(compression_1.Compressor)}.`);\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: (0, utils_1.makeClientMetadata)(),\n    transform({\n      options,\n      values: [value]\n    }) {\n      var _a, _b;\n      if (!(0, utils_1.isRecord)(value)) throw new error_1.MongoParseError('DriverInfo must be an object');\n      return (0, utils_1.makeClientMetadata)({\n        driverInfo: value,\n        appName: (_b = (_a = options.metadata) === null || _a === void 0 ? void 0 : _a.application) === null || _b === void 0 ? void 0 : _b.name\n      });\n    }\n  },\n  family: {\n    transform({\n      name,\n      values: [value]\n    }) {\n      const transformValue = getInt(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new error_1.MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  },\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  journal: {\n    target: 'writeConcern',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new error_1.MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new logger_1.Logger('MongoClient'),\n    transform({\n      values: [value]\n    }) {\n      if (value instanceof logger_1.Logger) {\n        return value;\n      }\n      (0, utils_1.emitWarning)('Alternative loggers might not be supported');\n      // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n    }\n  },\n  loggerLevel: {\n    target: 'logger',\n    transform({\n      values: [value]\n    }) {\n      return new logger_1.Logger('MongoClient', {\n        loggerLevel: value\n      });\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const maxStalenessSeconds = getUint(name, value);\n      if (options.readPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            maxStalenessSeconds\n          }\n        });\n      } else {\n        return new read_preference_1.ReadPreference('secondary', undefined, {\n          maxStalenessSeconds\n        });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({\n      values: [value],\n      options\n    }) {\n      return {\n        ...options.driverInfo,\n        name: String(value)\n      };\n    }\n  },\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: utils_1.DEFAULT_PK_FACTORY,\n    transform({\n      values: [value]\n    }) {\n      if ((0, utils_1.isRecord)(value, ['createPk']) && typeof value.createPk === 'function') {\n        return value;\n      }\n      throw new error_1.MongoParseError(`Option pkFactory must be an object with a createPk function, got ${value}`);\n    }\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({\n      values: [value],\n      options\n    }) {\n      if (value instanceof read_concern_1.ReadConcern || (0, utils_1.isRecord)(value, ['level'])) {\n        return read_concern_1.ReadConcern.fromOptions({\n          ...options.readConcern,\n          ...value\n        });\n      }\n      throw new error_1.MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({\n      values: [level],\n      options\n    }) {\n      return read_concern_1.ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level\n      });\n    }\n  },\n  readPreference: {\n    default: read_preference_1.ReadPreference.primary,\n    transform({\n      values: [value],\n      options\n    }) {\n      var _a, _b, _c;\n      if (value instanceof read_preference_1.ReadPreference) {\n        return read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n      }\n      if ((0, utils_1.isRecord)(value, ['mode'])) {\n        const rp = read_preference_1.ReadPreference.fromOptions({\n          readPreference: {\n            ...options.readPreference,\n            ...value\n          },\n          ...value\n        });\n        if (rp) return rp;else throw new error_1.MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: (_a = options.readPreference) === null || _a === void 0 ? void 0 : _a.hedge,\n          maxStalenessSeconds: (_b = options.readPreference) === null || _b === void 0 ? void 0 : _b.maxStalenessSeconds\n        };\n        return new read_preference_1.ReadPreference(value, (_c = options.readPreference) === null || _c === void 0 ? void 0 : _c.tags, rpOpts);\n      }\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({\n      values,\n      options\n    }) {\n      const readPreferenceTags = [];\n      for (const tag of values) {\n        const readPreferenceTag = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of Object.entries(toRecord(tag))) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if ((0, utils_1.isRecord)(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return read_preference_1.ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({\n      name,\n      values: [value]\n    }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({\n      name,\n      values: [value]\n    }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform({\n      values: [value]\n    }) {\n      return fs.readFileSync(String(value), {\n        encoding: 'ascii'\n      });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({\n      name,\n      options,\n      values: [value]\n    }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames ? () => undefined : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      return write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          w: value\n        }\n      });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      if ((0, utils_1.isRecord)(value) || value instanceof write_concern_1.WriteConcern) {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return write_concern_1.WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n      throw new error_1.MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  },\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({\n      values: [value],\n      options\n    }) {\n      const wc = write_concern_1.WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new error_1.MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: {\n    type: 'any'\n  },\n  srvPoller: {\n    type: 'any'\n  },\n  // Accepted NodeJS Options\n  minDHSize: {\n    type: 'any'\n  },\n  pskCallback: {\n    type: 'any'\n  },\n  secureContext: {\n    type: 'any'\n  },\n  enableTrace: {\n    type: 'any'\n  },\n  requestCert: {\n    type: 'any'\n  },\n  rejectUnauthorized: {\n    type: 'any'\n  },\n  checkServerIdentity: {\n    type: 'any'\n  },\n  ALPNProtocols: {\n    type: 'any'\n  },\n  SNICallback: {\n    type: 'any'\n  },\n  session: {\n    type: 'any'\n  },\n  requestOCSP: {\n    type: 'any'\n  },\n  localAddress: {\n    type: 'any'\n  },\n  localPort: {\n    type: 'any'\n  },\n  hints: {\n    type: 'any'\n  },\n  lookup: {\n    type: 'any'\n  },\n  ca: {\n    type: 'any'\n  },\n  cert: {\n    type: 'any'\n  },\n  ciphers: {\n    type: 'any'\n  },\n  crl: {\n    type: 'any'\n  },\n  ecdhCurve: {\n    type: 'any'\n  },\n  key: {\n    type: 'any'\n  },\n  passphrase: {\n    type: 'any'\n  },\n  pfx: {\n    type: 'any'\n  },\n  secureProtocol: {\n    type: 'any'\n  },\n  index: {\n    type: 'any'\n  },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: {\n    type: 'boolean'\n  },\n  useUnifiedTopology: {\n    type: 'boolean'\n  }\n};\nexports.DEFAULT_OPTIONS = new CaseInsensitiveMap(Object.entries(exports.OPTIONS).filter(([, descriptor]) => descriptor.default != null).map(([k, d]) => [k, d.default]));","map":{"version":3,"names":["dns","require","fs","mongodb_connection_string_url_1","url_1","defaultAuthProviders_1","read_preference_1","read_concern_1","write_concern_1","error_1","utils_1","mongo_client_1","mongo_credentials_1","logger_1","promise_provider_1","encrypter_1","compression_1","VALID_TXT_RECORDS","LB_SINGLE_HOST_ERROR","LB_REPLICA_SET_ERROR","LB_DIRECT_CONNECTION_ERROR","matchesParentDomain","srvAddress","parentDomain","regex","srv","replace","parent","endsWith","resolveSRVRecord","options","callback","srvHost","MongoAPIError","split","length","lookupAddress","resolveSrv","err","addresses","name","hostAddresses","map","r","_a","HostAddress","fromString","port","lbError","validateLoadBalancedOptions","resolveTxt","record","code","MongoParseError","txtRecordOptions","URLSearchParams","join","txtRecordOptionKeys","keys","some","key","includes","source","get","undefined","replicaSet","_b","loadBalanced","_c","userSpecifiedAuthSource","credentials","MongoCredentials","merge","userSpecifiedReplicaSet","exports","checkTLSOptions","check","a","b","Reflect","has","TRUTHS","Set","FALSEHOODS","getBoolean","value","valueString","String","toLowerCase","getInt","Math","trunc","parsedValue","Number","parseInt","isNaN","getUint","toRecord","Object","create","keyValuePairs","keyValue","CaseInsensitiveMap","Map","constructor","entries","k","v","set","delete","parseOptions","uri","mongoClient","MongoClient","url","default","hosts","isSRV","mongoOptions","searchParams","tls","urlOptions","pathname","dbName","decodeURIComponent","slice","username","auth","password","values","getAll","objectOptions","filter","allOptions","allKeys","DEFAULT_OPTIONS","push","tlsAndSslOpts","concat","bind","size","unsupportedOptions","setDifference","Array","from","OPTIONS","s","optionWord","isOrAre","descriptor","setOption","isGssapi","mechanism","AuthMechanism","MONGODB_GSSAPI","isX509","MONGODB_X509","isAws","MONGODB_AWS","validate","promiseLibrary","PromiseProvider","directConnection","autoEncryption","Encrypter","checkForMongoCrypt","encrypter","autoEncrypter","target","type","transform","deprecated","deprecatedMsg","emitWarning","isRecord","transformValue","appName","makeClientMetadata","driverInfo","authMechanism","mechanisms","m","match","RegExp","raw","MONGODB_PLAIN","authMechanismProperties","mechanismProperties","authSource","bsonRegExp","serverApi","version","serverApiToValidate","versionToValidate","ServerApiVersion","checkKeys","compressors","compressionList","compVal","compValArray","isArray","MongoInvalidArgumentError","c","Compressor","add","connectTimeoutMS","metadata","application","family","fieldsAsRaw","forceServerObjectId","fsync","wc","WriteConcern","fromOptions","writeConcern","heartbeatFrequencyMS","ignoreUndefined","j","journal","keepAlive","keepAliveInitialDelay","localThresholdMS","logger","Logger","loggerLevel","maxIdleTimeMS","maxPoolSize","maxStalenessSeconds","readPreference","ReadPreference","minInternalBufferSize","minPoolSize","minHeartbeatFrequencyMS","monitorCommands","noDelay","pkFactory","DEFAULT_PK_FACTORY","createPk","promoteBuffers","promoteLongs","promoteValues","readConcern","ReadConcern","JSON","stringify","readConcernLevel","level","primary","rp","rpOpts","hedge","tags","readPreferenceTags","tag","readPreferenceTag","retryReads","retryWrites","serializeFunctions","serverSelectionTimeoutMS","servername","socketTimeoutMS","ssl","sslCA","readFileSync","encoding","sslCRL","sslCert","sslKey","sslPass","sslValidate","tlsAllowInvalidCertificates","tlsAllowInvalidHostnames","tlsCAFile","tlsCertificateFile","tlsCertificateKeyFile","tlsCertificateKeyFilePassword","tlsInsecure","checkServerIdentity","rejectUnauthorized","w","waitQueueTimeoutMS","wtimeout","wtimeoutMS","zlibCompressionLevel","connectionType","srvPoller","minDHSize","pskCallback","secureContext","enableTrace","requestCert","ALPNProtocols","SNICallback","session","requestOCSP","localAddress","localPort","hints","lookup","ca","cert","ciphers","crl","ecdhCurve","passphrase","pfx","secureProtocol","index","useNewUrlParser","useUnifiedTopology","d"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\mongodb\\src\\connection_string.ts"],"sourcesContent":["import * as dns from 'dns';\nimport * as fs from 'fs';\nimport ConnectionString from 'mongodb-connection-string-url';\nimport { URLSearchParams } from 'url';\nimport { AuthMechanism } from './cmap/auth/defaultAuthProviders';\nimport { ReadPreference, ReadPreferenceMode } from './read_preference';\nimport { ReadConcern, ReadConcernLevel } from './read_concern';\nimport { W, WriteConcern } from './write_concern';\nimport { MongoAPIError, MongoInvalidArgumentError, MongoParseError } from './error';\nimport {\n  AnyOptions,\n  Callback,\n  DEFAULT_PK_FACTORY,\n  isRecord,\n  makeClientMetadata,\n  setDifference,\n  HostAddress,\n  emitWarning\n} from './utils';\nimport type { Document } from './bson';\nimport {\n  DriverInfo,\n  MongoClient,\n  MongoClientOptions,\n  MongoOptions,\n  PkFactory,\n  ServerApi,\n  ServerApiVersion\n} from './mongo_client';\nimport { MongoCredentials } from './cmap/auth/mongo_credentials';\nimport type { TagSet } from './sdam/server_description';\nimport { Logger, LoggerLevel } from './logger';\nimport { PromiseProvider } from './promise_provider';\nimport { Encrypter } from './encrypter';\nimport { Compressor, CompressorName } from './cmap/wire_protocol/compression';\n\nconst VALID_TXT_RECORDS = ['authSource', 'replicaSet', 'loadBalanced'];\n\nconst LB_SINGLE_HOST_ERROR = 'loadBalanced option only supported with a single host in the URI';\nconst LB_REPLICA_SET_ERROR = 'loadBalanced option not supported with a replicaSet option';\nconst LB_DIRECT_CONNECTION_ERROR =\n  'loadBalanced option not supported when directConnection is provided';\n\n/**\n * Determines whether a provided address matches the provided parent domain in order\n * to avoid certain attack vectors.\n *\n * @param srvAddress - The address to check against a domain\n * @param parentDomain - The domain to check the provided address against\n * @returns Whether the provided address matches the parent domain\n */\nfunction matchesParentDomain(srvAddress: string, parentDomain: string): boolean {\n  const regex = /^.*?\\./;\n  const srv = `.${srvAddress.replace(regex, '')}`;\n  const parent = `.${parentDomain.replace(regex, '')}`;\n  return srv.endsWith(parent);\n}\n\n/**\n * Lookup a `mongodb+srv` connection string, combine the parts and reparse it as a normal\n * connection string.\n *\n * @param uri - The connection string to parse\n * @param options - Optional user provided connection string options\n */\nexport function resolveSRVRecord(options: MongoOptions, callback: Callback<HostAddress[]>): void {\n  if (typeof options.srvHost !== 'string') {\n    return callback(new MongoAPIError('Option \"srvHost\" must not be empty'));\n  }\n\n  if (options.srvHost.split('.').length < 3) {\n    // TODO(NODE-3484): Replace with MongoConnectionStringError\n    return callback(new MongoAPIError('URI must include hostname, domain name, and tld'));\n  }\n\n  // Resolve the SRV record and use the result as the list of hosts to connect to.\n  const lookupAddress = options.srvHost;\n  dns.resolveSrv(`_mongodb._tcp.${lookupAddress}`, (err, addresses) => {\n    if (err) return callback(err);\n\n    if (addresses.length === 0) {\n      return callback(new MongoAPIError('No addresses found at host'));\n    }\n\n    for (const { name } of addresses) {\n      if (!matchesParentDomain(name, lookupAddress)) {\n        return callback(new MongoAPIError('Server record does not share hostname with parent URI'));\n      }\n    }\n\n    const hostAddresses = addresses.map(r =>\n      HostAddress.fromString(`${r.name}:${r.port ?? 27017}`)\n    );\n\n    const lbError = validateLoadBalancedOptions(hostAddresses, options);\n    if (lbError) {\n      return callback(lbError);\n    }\n\n    // Resolve TXT record and add options from there if they exist.\n    dns.resolveTxt(lookupAddress, (err, record) => {\n      if (err) {\n        if (err.code !== 'ENODATA' && err.code !== 'ENOTFOUND') {\n          return callback(err);\n        }\n      } else {\n        if (record.length > 1) {\n          return callback(new MongoParseError('Multiple text records not allowed'));\n        }\n\n        const txtRecordOptions = new URLSearchParams(record[0].join(''));\n        const txtRecordOptionKeys = [...txtRecordOptions.keys()];\n        if (txtRecordOptionKeys.some(key => !VALID_TXT_RECORDS.includes(key))) {\n          return callback(\n            new MongoParseError(`Text record may only set any of: ${VALID_TXT_RECORDS.join(', ')}`)\n          );\n        }\n\n        const source = txtRecordOptions.get('authSource') ?? undefined;\n        const replicaSet = txtRecordOptions.get('replicaSet') ?? undefined;\n        const loadBalanced = txtRecordOptions.get('loadBalanced') ?? undefined;\n\n        if (source === '' || replicaSet === '') {\n          return callback(new MongoParseError('Cannot have empty URI params in DNS TXT Record'));\n        }\n\n        if (!options.userSpecifiedAuthSource && source) {\n          options.credentials = MongoCredentials.merge(options.credentials, { source });\n        }\n\n        if (!options.userSpecifiedReplicaSet && replicaSet) {\n          options.replicaSet = replicaSet;\n        }\n\n        if (loadBalanced === 'true') {\n          options.loadBalanced = true;\n        }\n\n        const lbError = validateLoadBalancedOptions(hostAddresses, options);\n        if (lbError) {\n          return callback(lbError);\n        }\n      }\n\n      callback(undefined, hostAddresses);\n    });\n  });\n}\n\n/**\n * Checks if TLS options are valid\n *\n * @param options - The options used for options parsing\n * @throws MongoParseError if TLS options are invalid\n */\nexport function checkTLSOptions(options: AnyOptions): void {\n  if (!options) return;\n  const check = (a: string, b: string) => {\n    if (Reflect.has(options, a) && Reflect.has(options, b)) {\n      throw new MongoParseError(`The '${a}' option cannot be used with '${b}'`);\n    }\n  };\n  check('tlsInsecure', 'tlsAllowInvalidCertificates');\n  check('tlsInsecure', 'tlsAllowInvalidHostnames');\n  check('tlsInsecure', 'tlsDisableCertificateRevocationCheck');\n  check('tlsInsecure', 'tlsDisableOCSPEndpointCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableCertificateRevocationCheck');\n  check('tlsAllowInvalidCertificates', 'tlsDisableOCSPEndpointCheck');\n  check('tlsDisableCertificateRevocationCheck', 'tlsDisableOCSPEndpointCheck');\n}\n\nconst TRUTHS = new Set(['true', 't', '1', 'y', 'yes']);\nconst FALSEHOODS = new Set(['false', 'f', '0', 'n', 'no', '-1']);\nfunction getBoolean(name: string, value: unknown): boolean {\n  if (typeof value === 'boolean') return value;\n  const valueString = String(value).toLowerCase();\n  if (TRUTHS.has(valueString)) return true;\n  if (FALSEHOODS.has(valueString)) return false;\n  throw new MongoParseError(`Expected ${name} to be stringified boolean value, got: ${value}`);\n}\n\nfunction getInt(name: string, value: unknown): number {\n  if (typeof value === 'number') return Math.trunc(value);\n  const parsedValue = Number.parseInt(String(value), 10);\n  if (!Number.isNaN(parsedValue)) return parsedValue;\n  throw new MongoParseError(`Expected ${name} to be stringified int value, got: ${value}`);\n}\n\nfunction getUint(name: string, value: unknown): number {\n  const parsedValue = getInt(name, value);\n  if (parsedValue < 0) {\n    throw new MongoParseError(`${name} can only be a positive int value, got: ${value}`);\n  }\n  return parsedValue;\n}\n\nfunction toRecord(value: string): Record<string, any> {\n  const record = Object.create(null);\n  const keyValuePairs = value.split(',');\n  for (const keyValue of keyValuePairs) {\n    const [key, value] = keyValue.split(':');\n    if (value == null) {\n      throw new MongoParseError('Cannot have undefined values in key value pairs');\n    }\n    try {\n      // try to get a boolean\n      record[key] = getBoolean('', value);\n    } catch {\n      try {\n        // try to get a number\n        record[key] = getInt('', value);\n      } catch {\n        // keep value as a string\n        record[key] = value;\n      }\n    }\n  }\n  return record;\n}\n\nclass CaseInsensitiveMap extends Map<string, any> {\n  constructor(entries: Array<[string, any]> = []) {\n    super(entries.map(([k, v]) => [k.toLowerCase(), v]));\n  }\n  has(k: string) {\n    return super.has(k.toLowerCase());\n  }\n  get(k: string) {\n    return super.get(k.toLowerCase());\n  }\n  set(k: string, v: any) {\n    return super.set(k.toLowerCase(), v);\n  }\n  delete(k: string): boolean {\n    return super.delete(k.toLowerCase());\n  }\n}\n\nexport function parseOptions(\n  uri: string,\n  mongoClient: MongoClient | MongoClientOptions | undefined = undefined,\n  options: MongoClientOptions = {}\n): MongoOptions {\n  if (mongoClient != null && !(mongoClient instanceof MongoClient)) {\n    options = mongoClient;\n    mongoClient = undefined;\n  }\n\n  const url = new ConnectionString(uri);\n  const { hosts, isSRV } = url;\n\n  const mongoOptions = Object.create(null);\n  mongoOptions.hosts = isSRV ? [] : hosts.map(HostAddress.fromString);\n  if (isSRV) {\n    // SRV Record is resolved upon connecting\n    mongoOptions.srvHost = hosts[0];\n    if (!url.searchParams.has('tls') && !url.searchParams.has('ssl')) {\n      options.tls = true;\n    }\n  }\n\n  const urlOptions = new CaseInsensitiveMap();\n\n  if (url.pathname !== '/' && url.pathname !== '') {\n    const dbName = decodeURIComponent(\n      url.pathname[0] === '/' ? url.pathname.slice(1) : url.pathname\n    );\n    if (dbName) {\n      urlOptions.set('dbName', [dbName]);\n    }\n  }\n\n  if (url.username !== '') {\n    const auth: Document = {\n      username: decodeURIComponent(url.username)\n    };\n\n    if (typeof url.password === 'string') {\n      auth.password = decodeURIComponent(url.password);\n    }\n\n    urlOptions.set('auth', [auth]);\n  }\n\n  for (const key of url.searchParams.keys()) {\n    const values = [...url.searchParams.getAll(key)];\n\n    if (values.includes('')) {\n      throw new MongoAPIError('URI cannot contain options with no value');\n    }\n\n    if (key.toLowerCase() === 'serverapi') {\n      throw new MongoParseError(\n        'URI cannot contain `serverApi`, it can only be passed to the client'\n      );\n    }\n\n    if (key.toLowerCase() === 'authsource' && urlOptions.has('authSource')) {\n      // If authSource is an explicit key in the urlOptions we need to remove the implicit dbName\n      urlOptions.delete('authSource');\n    }\n\n    if (!urlOptions.has(key)) {\n      urlOptions.set(key, values);\n    }\n  }\n\n  const objectOptions = new CaseInsensitiveMap(\n    Object.entries(options).filter(([, v]) => v != null)\n  );\n\n  if (objectOptions.has('loadBalanced')) {\n    throw new MongoParseError('loadBalanced is only a valid option in the URI');\n  }\n\n  const allOptions = new CaseInsensitiveMap();\n\n  const allKeys = new Set<string>([\n    ...urlOptions.keys(),\n    ...objectOptions.keys(),\n    ...DEFAULT_OPTIONS.keys()\n  ]);\n\n  for (const key of allKeys) {\n    const values = [];\n    if (objectOptions.has(key)) {\n      values.push(objectOptions.get(key));\n    }\n    if (urlOptions.has(key)) {\n      values.push(...urlOptions.get(key));\n    }\n    if (DEFAULT_OPTIONS.has(key)) {\n      values.push(DEFAULT_OPTIONS.get(key));\n    }\n    allOptions.set(key, values);\n  }\n\n  if (allOptions.has('tlsCertificateKeyFile') && !allOptions.has('tlsCertificateFile')) {\n    allOptions.set('tlsCertificateFile', allOptions.get('tlsCertificateKeyFile'));\n  }\n\n  if (allOptions.has('tls') || allOptions.has('ssl')) {\n    const tlsAndSslOpts = (allOptions.get('tls') || [])\n      .concat(allOptions.get('ssl') || [])\n      .map(getBoolean.bind(null, 'tls/ssl'));\n    if (new Set(tlsAndSslOpts).size !== 1) {\n      throw new MongoParseError('All values of tls/ssl must be the same.');\n    }\n  }\n\n  const unsupportedOptions = setDifference(\n    allKeys,\n    Array.from(Object.keys(OPTIONS)).map(s => s.toLowerCase())\n  );\n  if (unsupportedOptions.size !== 0) {\n    const optionWord = unsupportedOptions.size > 1 ? 'options' : 'option';\n    const isOrAre = unsupportedOptions.size > 1 ? 'are' : 'is';\n    throw new MongoParseError(\n      `${optionWord} ${Array.from(unsupportedOptions).join(', ')} ${isOrAre} not supported`\n    );\n  }\n\n  for (const [key, descriptor] of Object.entries(OPTIONS)) {\n    const values = allOptions.get(key);\n    if (!values || values.length === 0) continue;\n    setOption(mongoOptions, key, descriptor, values);\n  }\n\n  if (mongoOptions.credentials) {\n    const isGssapi = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_GSSAPI;\n    const isX509 = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_X509;\n    const isAws = mongoOptions.credentials.mechanism === AuthMechanism.MONGODB_AWS;\n    if (\n      (isGssapi || isX509) &&\n      allOptions.has('authSource') &&\n      mongoOptions.credentials.source !== '$external'\n    ) {\n      // If authSource was explicitly given and its incorrect, we error\n      throw new MongoParseError(\n        `${mongoOptions.credentials} can only have authSource set to '$external'`\n      );\n    }\n\n    if (!(isGssapi || isX509 || isAws) && mongoOptions.dbName && !allOptions.has('authSource')) {\n      // inherit the dbName unless GSSAPI or X509, then silently ignore dbName\n      // and there was no specific authSource given\n      mongoOptions.credentials = MongoCredentials.merge(mongoOptions.credentials, {\n        source: mongoOptions.dbName\n      });\n    }\n\n    mongoOptions.credentials.validate();\n  }\n\n  if (!mongoOptions.dbName) {\n    // dbName default is applied here because of the credential validation above\n    mongoOptions.dbName = 'test';\n  }\n\n  checkTLSOptions(mongoOptions);\n\n  if (options.promiseLibrary) PromiseProvider.set(options.promiseLibrary);\n\n  if (mongoOptions.directConnection && typeof mongoOptions.srvHost === 'string') {\n    throw new MongoAPIError('SRV URI does not support directConnection');\n  }\n\n  const lbError = validateLoadBalancedOptions(hosts, mongoOptions);\n  if (lbError) {\n    throw lbError;\n  }\n\n  // Potential SRV Overrides\n  mongoOptions.userSpecifiedAuthSource =\n    objectOptions.has('authSource') || urlOptions.has('authSource');\n  mongoOptions.userSpecifiedReplicaSet =\n    objectOptions.has('replicaSet') || urlOptions.has('replicaSet');\n\n  if (mongoClient && mongoOptions.autoEncryption) {\n    Encrypter.checkForMongoCrypt();\n    mongoOptions.encrypter = new Encrypter(mongoClient, uri, options);\n    mongoOptions.autoEncrypter = mongoOptions.encrypter.autoEncrypter;\n  }\n\n  return mongoOptions;\n}\n\nfunction validateLoadBalancedOptions(\n  hosts: HostAddress[] | string[],\n  mongoOptions: MongoOptions\n): MongoParseError | undefined {\n  if (mongoOptions.loadBalanced) {\n    if (hosts.length > 1) {\n      return new MongoParseError(LB_SINGLE_HOST_ERROR);\n    }\n    if (mongoOptions.replicaSet) {\n      return new MongoParseError(LB_REPLICA_SET_ERROR);\n    }\n    if (mongoOptions.directConnection) {\n      return new MongoParseError(LB_DIRECT_CONNECTION_ERROR);\n    }\n  }\n}\n\nfunction setOption(\n  mongoOptions: any,\n  key: string,\n  descriptor: OptionDescriptor,\n  values: unknown[]\n) {\n  const { target, type, transform, deprecated } = descriptor;\n  const name = target ?? key;\n\n  if (deprecated) {\n    const deprecatedMsg = typeof deprecated === 'string' ? `: ${deprecated}` : '';\n    emitWarning(`${key} is a deprecated option${deprecatedMsg}`);\n  }\n\n  switch (type) {\n    case 'boolean':\n      mongoOptions[name] = getBoolean(name, values[0]);\n      break;\n    case 'int':\n      mongoOptions[name] = getInt(name, values[0]);\n      break;\n    case 'uint':\n      mongoOptions[name] = getUint(name, values[0]);\n      break;\n    case 'string':\n      if (values[0] == null) {\n        break;\n      }\n      mongoOptions[name] = String(values[0]);\n      break;\n    case 'record':\n      if (!isRecord(values[0])) {\n        throw new MongoParseError(`${name} must be an object`);\n      }\n      mongoOptions[name] = values[0];\n      break;\n    case 'any':\n      mongoOptions[name] = values[0];\n      break;\n    default: {\n      if (!transform) {\n        throw new MongoParseError('Descriptors missing a type must define a transform');\n      }\n      const transformValue = transform({ name, options: mongoOptions, values });\n      mongoOptions[name] = transformValue;\n      break;\n    }\n  }\n}\n\ninterface OptionDescriptor {\n  target?: string;\n  type?: 'boolean' | 'int' | 'uint' | 'record' | 'string' | 'any';\n  default?: any;\n\n  deprecated?: boolean | string;\n  /**\n   * @param name - the original option name\n   * @param options - the options so far for resolution\n   * @param values - the possible values in precedence order\n   */\n  transform?: (args: { name: string; options: MongoOptions; values: unknown[] }) => unknown;\n}\n\nexport const OPTIONS = {\n  appName: {\n    target: 'metadata',\n    transform({ options, values: [value] }): DriverInfo {\n      return makeClientMetadata({ ...options.driverInfo, appName: String(value) });\n    }\n  },\n  auth: {\n    target: 'credentials',\n    transform({ name, options, values: [value] }): MongoCredentials {\n      if (!isRecord(value, ['username', 'password'] as const)) {\n        throw new MongoParseError(\n          `${name} must be an object with 'username' and 'password' properties`\n        );\n      }\n      return MongoCredentials.merge(options.credentials, {\n        username: value.username,\n        password: value.password\n      });\n    }\n  },\n  authMechanism: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const mechanisms = Object.values(AuthMechanism);\n      const [mechanism] = mechanisms.filter(m => m.match(RegExp(String.raw`\\b${value}\\b`, 'i')));\n      if (!mechanism) {\n        throw new MongoParseError(`authMechanism one of ${mechanisms}, got ${value}`);\n      }\n      let source = options.credentials?.source;\n      if (\n        mechanism === AuthMechanism.MONGODB_PLAIN ||\n        mechanism === AuthMechanism.MONGODB_GSSAPI ||\n        mechanism === AuthMechanism.MONGODB_AWS ||\n        mechanism === AuthMechanism.MONGODB_X509\n      ) {\n        // some mechanisms have '$external' as the Auth Source\n        source = '$external';\n      }\n\n      let password = options.credentials?.password;\n      if (mechanism === AuthMechanism.MONGODB_X509 && password === '') {\n        password = undefined;\n      }\n      return MongoCredentials.merge(options.credentials, {\n        mechanism,\n        source,\n        password\n      });\n    }\n  },\n  authMechanismProperties: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      if (typeof value === 'string') {\n        value = toRecord(value);\n      }\n      if (!isRecord(value)) {\n        throw new MongoParseError('AuthMechanismProperties must be an object');\n      }\n      return MongoCredentials.merge(options.credentials, { mechanismProperties: value });\n    }\n  },\n  authSource: {\n    target: 'credentials',\n    transform({ options, values: [value] }): MongoCredentials {\n      const source = String(value);\n      return MongoCredentials.merge(options.credentials, { source });\n    }\n  },\n  autoEncryption: {\n    type: 'record'\n  },\n  bsonRegExp: {\n    type: 'boolean'\n  },\n  serverApi: {\n    target: 'serverApi',\n    transform({ values: [version] }): ServerApi {\n      const serverApiToValidate =\n        typeof version === 'string' ? ({ version } as ServerApi) : (version as ServerApi);\n      const versionToValidate = serverApiToValidate && serverApiToValidate.version;\n      if (!versionToValidate) {\n        throw new MongoParseError(\n          `Invalid \\`serverApi\\` property; must specify a version from the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      if (!Object.values(ServerApiVersion).some(v => v === versionToValidate)) {\n        throw new MongoParseError(\n          `Invalid server API version=${versionToValidate}; must be in the following enum: [\"${Object.values(\n            ServerApiVersion\n          ).join('\", \"')}\"]`\n        );\n      }\n      return serverApiToValidate;\n    }\n  },\n  checkKeys: {\n    type: 'boolean'\n  },\n  compressors: {\n    default: 'none',\n    target: 'compressors',\n    transform({ values }) {\n      const compressionList = new Set();\n      for (const compVal of values as (CompressorName[] | string)[]) {\n        const compValArray = typeof compVal === 'string' ? compVal.split(',') : compVal;\n        if (!Array.isArray(compValArray)) {\n          throw new MongoInvalidArgumentError(\n            'compressors must be an array or a comma-delimited list of strings'\n          );\n        }\n        for (const c of compValArray) {\n          if (Object.keys(Compressor).includes(String(c))) {\n            compressionList.add(String(c));\n          } else {\n            throw new MongoInvalidArgumentError(\n              `${c} is not a valid compression mechanism. Must be one of: ${Object.keys(\n                Compressor\n              )}.`\n            );\n          }\n        }\n      }\n      return [...compressionList];\n    }\n  },\n  connectTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  dbName: {\n    type: 'string'\n  },\n  directConnection: {\n    default: false,\n    type: 'boolean'\n  },\n  driverInfo: {\n    target: 'metadata',\n    default: makeClientMetadata(),\n    transform({ options, values: [value] }) {\n      if (!isRecord(value)) throw new MongoParseError('DriverInfo must be an object');\n      return makeClientMetadata({\n        driverInfo: value,\n        appName: options.metadata?.application?.name\n      });\n    }\n  },\n  family: {\n    transform({ name, values: [value] }): 4 | 6 {\n      const transformValue = getInt(name, value);\n      if (transformValue === 4 || transformValue === 6) {\n        return transformValue;\n      }\n      throw new MongoParseError(`Option 'family' must be 4 or 6 got ${transformValue}.`);\n    }\n  },\n  fieldsAsRaw: {\n    type: 'record'\n  },\n  forceServerObjectId: {\n    default: false,\n    type: 'boolean'\n  },\n  fsync: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          fsync: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from fsync=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  heartbeatFrequencyMS: {\n    default: 10000,\n    type: 'uint'\n  },\n  ignoreUndefined: {\n    type: 'boolean'\n  },\n  j: {\n    deprecated: 'Please use journal instead',\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  } as OptionDescriptor,\n  journal: {\n    target: 'writeConcern',\n    transform({ name, options, values: [value] }): WriteConcern {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          journal: getBoolean(name, value)\n        }\n      });\n      if (!wc) throw new MongoParseError(`Unable to make a writeConcern from journal=${value}`);\n      return wc;\n    }\n  },\n  keepAlive: {\n    default: true,\n    type: 'boolean'\n  },\n  keepAliveInitialDelay: {\n    default: 120000,\n    type: 'uint'\n  },\n  loadBalanced: {\n    default: false,\n    type: 'boolean'\n  },\n  localThresholdMS: {\n    default: 15,\n    type: 'uint'\n  },\n  logger: {\n    default: new Logger('MongoClient'),\n    transform({ values: [value] }) {\n      if (value instanceof Logger) {\n        return value;\n      }\n      emitWarning('Alternative loggers might not be supported');\n      // TODO: make Logger an interface that others can implement, make usage consistent in driver\n      // DRIVERS-1204\n    }\n  },\n  loggerLevel: {\n    target: 'logger',\n    transform({ values: [value] }) {\n      return new Logger('MongoClient', { loggerLevel: value as LoggerLevel });\n    }\n  },\n  maxIdleTimeMS: {\n    default: 0,\n    type: 'uint'\n  },\n  maxPoolSize: {\n    default: 100,\n    type: 'uint'\n  },\n  maxStalenessSeconds: {\n    target: 'readPreference',\n    transform({ name, options, values: [value] }) {\n      const maxStalenessSeconds = getUint(name, value);\n      if (options.readPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, maxStalenessSeconds }\n        });\n      } else {\n        return new ReadPreference('secondary', undefined, { maxStalenessSeconds });\n      }\n    }\n  },\n  minInternalBufferSize: {\n    type: 'uint'\n  },\n  minPoolSize: {\n    default: 0,\n    type: 'uint'\n  },\n  minHeartbeatFrequencyMS: {\n    default: 500,\n    type: 'uint'\n  },\n  monitorCommands: {\n    default: false,\n    type: 'boolean'\n  },\n  name: {\n    target: 'driverInfo',\n    transform({ values: [value], options }) {\n      return { ...options.driverInfo, name: String(value) };\n    }\n  } as OptionDescriptor,\n  noDelay: {\n    default: true,\n    type: 'boolean'\n  },\n  pkFactory: {\n    default: DEFAULT_PK_FACTORY,\n    transform({ values: [value] }): PkFactory {\n      if (isRecord(value, ['createPk'] as const) && typeof value.createPk === 'function') {\n        return value as PkFactory;\n      }\n      throw new MongoParseError(\n        `Option pkFactory must be an object with a createPk function, got ${value}`\n      );\n    }\n  },\n  promiseLibrary: {\n    deprecated: true,\n    type: 'any'\n  },\n  promoteBuffers: {\n    type: 'boolean'\n  },\n  promoteLongs: {\n    type: 'boolean'\n  },\n  promoteValues: {\n    type: 'boolean'\n  },\n  raw: {\n    default: false,\n    type: 'boolean'\n  },\n  readConcern: {\n    transform({ values: [value], options }) {\n      if (value instanceof ReadConcern || isRecord(value, ['level'] as const)) {\n        return ReadConcern.fromOptions({ ...options.readConcern, ...value } as any);\n      }\n      throw new MongoParseError(`ReadConcern must be an object, got ${JSON.stringify(value)}`);\n    }\n  },\n  readConcernLevel: {\n    target: 'readConcern',\n    transform({ values: [level], options }) {\n      return ReadConcern.fromOptions({\n        ...options.readConcern,\n        level: level as ReadConcernLevel\n      });\n    }\n  },\n  readPreference: {\n    default: ReadPreference.primary,\n    transform({ values: [value], options }) {\n      if (value instanceof ReadPreference) {\n        return ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n      }\n      if (isRecord(value, ['mode'] as const)) {\n        const rp = ReadPreference.fromOptions({\n          readPreference: { ...options.readPreference, ...value },\n          ...value\n        } as any);\n        if (rp) return rp;\n        else throw new MongoParseError(`Cannot make read preference from ${JSON.stringify(value)}`);\n      }\n      if (typeof value === 'string') {\n        const rpOpts = {\n          hedge: options.readPreference?.hedge,\n          maxStalenessSeconds: options.readPreference?.maxStalenessSeconds\n        };\n        return new ReadPreference(\n          value as ReadPreferenceMode,\n          options.readPreference?.tags,\n          rpOpts\n        );\n      }\n    }\n  },\n  readPreferenceTags: {\n    target: 'readPreference',\n    transform({ values, options }) {\n      const readPreferenceTags = [];\n      for (const tag of values) {\n        const readPreferenceTag: TagSet = Object.create(null);\n        if (typeof tag === 'string') {\n          for (const [k, v] of Object.entries(toRecord(tag))) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        if (isRecord(tag)) {\n          for (const [k, v] of Object.entries(tag)) {\n            readPreferenceTag[k] = v;\n          }\n        }\n        readPreferenceTags.push(readPreferenceTag);\n      }\n      return ReadPreference.fromOptions({\n        readPreference: options.readPreference,\n        readPreferenceTags\n      });\n    }\n  },\n  replicaSet: {\n    type: 'string'\n  },\n  retryReads: {\n    default: true,\n    type: 'boolean'\n  },\n  retryWrites: {\n    default: true,\n    type: 'boolean'\n  },\n  serializeFunctions: {\n    type: 'boolean'\n  },\n  serverSelectionTimeoutMS: {\n    default: 30000,\n    type: 'uint'\n  },\n  servername: {\n    type: 'string'\n  },\n  socketTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  ssl: {\n    target: 'tls',\n    type: 'boolean'\n  },\n  sslCA: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCRL: {\n    target: 'crl',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslCert: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslKey: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  sslPass: {\n    deprecated: true,\n    target: 'passphrase',\n    type: 'string'\n  },\n  sslValidate: {\n    target: 'rejectUnauthorized',\n    type: 'boolean'\n  },\n  tls: {\n    type: 'boolean'\n  },\n  tlsAllowInvalidCertificates: {\n    target: 'rejectUnauthorized',\n    transform({ name, values: [value] }) {\n      // allowInvalidCertificates is the inverse of rejectUnauthorized\n      return !getBoolean(name, value);\n    }\n  },\n  tlsAllowInvalidHostnames: {\n    target: 'checkServerIdentity',\n    transform({ name, values: [value] }) {\n      // tlsAllowInvalidHostnames means setting the checkServerIdentity function to a noop\n      return getBoolean(name, value) ? () => undefined : undefined;\n    }\n  },\n  tlsCAFile: {\n    target: 'ca',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateFile: {\n    target: 'cert',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFile: {\n    target: 'key',\n    transform({ values: [value] }) {\n      return fs.readFileSync(String(value), { encoding: 'ascii' });\n    }\n  },\n  tlsCertificateKeyFilePassword: {\n    target: 'passphrase',\n    type: 'any'\n  },\n  tlsInsecure: {\n    transform({ name, options, values: [value] }) {\n      const tlsInsecure = getBoolean(name, value);\n      if (tlsInsecure) {\n        options.checkServerIdentity = () => undefined;\n        options.rejectUnauthorized = false;\n      } else {\n        options.checkServerIdentity = options.tlsAllowInvalidHostnames\n          ? () => undefined\n          : undefined;\n        options.rejectUnauthorized = options.tlsAllowInvalidCertificates ? false : true;\n      }\n      return tlsInsecure;\n    }\n  },\n  w: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      return WriteConcern.fromOptions({ writeConcern: { ...options.writeConcern, w: value as W } });\n    }\n  },\n  waitQueueTimeoutMS: {\n    default: 0,\n    type: 'uint'\n  },\n  writeConcern: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      if (isRecord(value) || value instanceof WriteConcern) {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            ...value\n          }\n        });\n      } else if (value === 'majority' || typeof value === 'number') {\n        return WriteConcern.fromOptions({\n          writeConcern: {\n            ...options.writeConcern,\n            w: value\n          }\n        });\n      }\n\n      throw new MongoParseError(`Invalid WriteConcern cannot parse: ${JSON.stringify(value)}`);\n    }\n  } as OptionDescriptor,\n  wtimeout: {\n    deprecated: 'Please use wtimeoutMS instead',\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeout: getUint('wtimeout', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  } as OptionDescriptor,\n  wtimeoutMS: {\n    target: 'writeConcern',\n    transform({ values: [value], options }) {\n      const wc = WriteConcern.fromOptions({\n        writeConcern: {\n          ...options.writeConcern,\n          wtimeoutMS: getUint('wtimeoutMS', value)\n        }\n      });\n      if (wc) return wc;\n      throw new MongoParseError(`Cannot make WriteConcern from wtimeout`);\n    }\n  },\n  zlibCompressionLevel: {\n    default: 0,\n    type: 'int'\n  },\n  // Custom types for modifying core behavior\n  connectionType: { type: 'any' },\n  srvPoller: { type: 'any' },\n  // Accepted NodeJS Options\n  minDHSize: { type: 'any' },\n  pskCallback: { type: 'any' },\n  secureContext: { type: 'any' },\n  enableTrace: { type: 'any' },\n  requestCert: { type: 'any' },\n  rejectUnauthorized: { type: 'any' },\n  checkServerIdentity: { type: 'any' },\n  ALPNProtocols: { type: 'any' },\n  SNICallback: { type: 'any' },\n  session: { type: 'any' },\n  requestOCSP: { type: 'any' },\n  localAddress: { type: 'any' },\n  localPort: { type: 'any' },\n  hints: { type: 'any' },\n  lookup: { type: 'any' },\n  ca: { type: 'any' },\n  cert: { type: 'any' },\n  ciphers: { type: 'any' },\n  crl: { type: 'any' },\n  ecdhCurve: { type: 'any' },\n  key: { type: 'any' },\n  passphrase: { type: 'any' },\n  pfx: { type: 'any' },\n  secureProtocol: { type: 'any' },\n  index: { type: 'any' },\n  // Legacy Options, these are unused but left here to avoid errors with CSFLE lib\n  useNewUrlParser: { type: 'boolean' } as OptionDescriptor,\n  useUnifiedTopology: { type: 'boolean' } as OptionDescriptor\n} as Record<keyof MongoClientOptions, OptionDescriptor>;\n\nexport const DEFAULT_OPTIONS = new CaseInsensitiveMap(\n  Object.entries(OPTIONS)\n    .filter(([, descriptor]) => descriptor.default != null)\n    .map(([k, d]) => [k, d.default])\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}