{"ast":null,"code":"var CLASS_PART_SEPARATOR = '-';\nfunction createClassUtils(config) {\n  var classMap = createClassMap(config);\n  function getClassGroupId(className) {\n    var classParts = className.split(CLASS_PART_SEPARATOR); // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.\n\n    if (classParts[0] === '' && classParts.length !== 1) {\n      classParts.shift();\n    }\n    return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className);\n  }\n  function getConflictingClassGroupIds(classGroupId) {\n    return config.conflictingClassGroups[classGroupId] || [];\n  }\n  return {\n    getClassGroupId: getClassGroupId,\n    getConflictingClassGroupIds: getConflictingClassGroupIds\n  };\n}\nfunction getGroupRecursive(classParts, classPartObject) {\n  var _classPartObject$vali;\n  if (classParts.length === 0) {\n    return classPartObject.classGroupId;\n  }\n  var currentClassPart = classParts[0];\n  var nextClassPartObject = classPartObject.nextPart.get(currentClassPart);\n  var classGroupFromNextClassPart = nextClassPartObject ? getGroupRecursive(classParts.slice(1), nextClassPartObject) : undefined;\n  if (classGroupFromNextClassPart) {\n    return classGroupFromNextClassPart;\n  }\n  if (classPartObject.validators.length === 0) {\n    return undefined;\n  }\n  var classRest = classParts.join(CLASS_PART_SEPARATOR);\n  return (_classPartObject$vali = classPartObject.validators.find(function (_ref) {\n    var validator = _ref.validator;\n    return validator(classRest);\n  })) == null ? void 0 : _classPartObject$vali.classGroupId;\n}\nvar arbitraryPropertyRegex = /^\\[(.+)\\]$/;\nfunction getGroupIdForArbitraryProperty(className) {\n  if (arbitraryPropertyRegex.test(className)) {\n    var arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)[1];\n    var property = arbitraryPropertyClassName == null ? void 0 : arbitraryPropertyClassName.substring(0, arbitraryPropertyClassName.indexOf(':'));\n    if (property) {\n      // I use two dots here because one dot is used as prefix for class groups in plugins\n      return 'arbitrary..' + property;\n    }\n  }\n}\n/**\r\n * Exported for testing only\r\n */\n\nfunction createClassMap(config) {\n  var theme = config.theme,\n    prefix = config.prefix;\n  var classMap = {\n    nextPart: new Map(),\n    validators: []\n  };\n  var prefixedClassGroupEntries = getPrefixedClassGroupEntries(Object.entries(config.classGroups), prefix);\n  prefixedClassGroupEntries.forEach(function (_ref2) {\n    var classGroupId = _ref2[0],\n      classGroup = _ref2[1];\n    processClassesRecursively(classGroup, classMap, classGroupId, theme);\n  });\n  return classMap;\n}\nfunction processClassesRecursively(classGroup, classPartObject, classGroupId, theme) {\n  classGroup.forEach(function (classDefinition) {\n    if (typeof classDefinition === 'string') {\n      var classPartObjectToEdit = classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition);\n      classPartObjectToEdit.classGroupId = classGroupId;\n      return;\n    }\n    if (typeof classDefinition === 'function') {\n      if (isThemeGetter(classDefinition)) {\n        processClassesRecursively(classDefinition(theme), classPartObject, classGroupId, theme);\n        return;\n      }\n      classPartObject.validators.push({\n        validator: classDefinition,\n        classGroupId: classGroupId\n      });\n      return;\n    }\n    Object.entries(classDefinition).forEach(function (_ref3) {\n      var key = _ref3[0],\n        classGroup = _ref3[1];\n      processClassesRecursively(classGroup, getPart(classPartObject, key), classGroupId, theme);\n    });\n  });\n}\nfunction getPart(classPartObject, path) {\n  var currentClassPartObject = classPartObject;\n  path.split(CLASS_PART_SEPARATOR).forEach(function (pathPart) {\n    if (!currentClassPartObject.nextPart.has(pathPart)) {\n      currentClassPartObject.nextPart.set(pathPart, {\n        nextPart: new Map(),\n        validators: []\n      });\n    }\n    currentClassPartObject = currentClassPartObject.nextPart.get(pathPart);\n  });\n  return currentClassPartObject;\n}\nfunction isThemeGetter(func) {\n  return func.isThemeGetter;\n}\nfunction getPrefixedClassGroupEntries(classGroupEntries, prefix) {\n  if (!prefix) {\n    return classGroupEntries;\n  }\n  return classGroupEntries.map(function (_ref4) {\n    var classGroupId = _ref4[0],\n      classGroup = _ref4[1];\n    var prefixedClassGroup = classGroup.map(function (classDefinition) {\n      if (typeof classDefinition === 'string') {\n        return prefix + classDefinition;\n      }\n      if (typeof classDefinition === 'object') {\n        return Object.fromEntries(Object.entries(classDefinition).map(function (_ref5) {\n          var key = _ref5[0],\n            value = _ref5[1];\n          return [prefix + key, value];\n        }));\n      }\n      return classDefinition;\n    });\n    return [classGroupId, prefixedClassGroup];\n  });\n}\nexport { createClassMap, createClassUtils };","map":{"version":3,"names":["CLASS_PART_SEPARATOR","createClassUtils","config","classMap","createClassMap","getClassGroupId","className","classParts","split","length","shift","getGroupRecursive","getGroupIdForArbitraryProperty","getConflictingClassGroupIds","classGroupId","conflictingClassGroups","classPartObject","_classPartObject$vali","currentClassPart","nextClassPartObject","nextPart","get","classGroupFromNextClassPart","slice","undefined","validators","classRest","join","find","_ref","validator","arbitraryPropertyRegex","test","arbitraryPropertyClassName","exec","property","substring","indexOf","theme","prefix","Map","prefixedClassGroupEntries","getPrefixedClassGroupEntries","Object","entries","classGroups","forEach","_ref2","classGroup","processClassesRecursively","classDefinition","classPartObjectToEdit","getPart","isThemeGetter","push","_ref3","key","path","currentClassPartObject","pathPart","has","set","func","classGroupEntries","map","_ref4","prefixedClassGroup","fromEntries","_ref5","value"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\tailwind-merge\\src\\lib\\class-utils.ts"],"sourcesContent":["import { ClassGroup, ClassGroupId, ClassValidator, Config, ThemeGetter, ThemeObject } from './types'\n\nexport interface ClassPartObject {\n    nextPart: Map<string, ClassPartObject>\n    validators: ClassValidatorObject[]\n    classGroupId?: ClassGroupId\n}\n\ninterface ClassValidatorObject {\n    classGroupId: ClassGroupId\n    validator: ClassValidator\n}\n\nconst CLASS_PART_SEPARATOR = '-'\n\nexport function createClassUtils(config: Config) {\n    const classMap = createClassMap(config)\n\n    function getClassGroupId(className: string) {\n        const classParts = className.split(CLASS_PART_SEPARATOR)\n\n        // Classes like `-inset-1` produce an empty string as first classPart. We assume that classes for negative values are used correctly and remove it from classParts.\n        if (classParts[0] === '' && classParts.length !== 1) {\n            classParts.shift()\n        }\n\n        return getGroupRecursive(classParts, classMap) || getGroupIdForArbitraryProperty(className)\n    }\n\n    function getConflictingClassGroupIds(classGroupId: ClassGroupId) {\n        return config.conflictingClassGroups[classGroupId] || []\n    }\n\n    return {\n        getClassGroupId,\n        getConflictingClassGroupIds,\n    }\n}\n\nfunction getGroupRecursive(\n    classParts: string[],\n    classPartObject: ClassPartObject,\n): ClassGroupId | undefined {\n    if (classParts.length === 0) {\n        return classPartObject.classGroupId\n    }\n\n    const currentClassPart = classParts[0]!\n    const nextClassPartObject = classPartObject.nextPart.get(currentClassPart)\n    const classGroupFromNextClassPart = nextClassPartObject\n        ? getGroupRecursive(classParts.slice(1), nextClassPartObject)\n        : undefined\n\n    if (classGroupFromNextClassPart) {\n        return classGroupFromNextClassPart\n    }\n\n    if (classPartObject.validators.length === 0) {\n        return undefined\n    }\n\n    const classRest = classParts.join(CLASS_PART_SEPARATOR)\n\n    return classPartObject.validators.find(({ validator }) => validator(classRest))?.classGroupId\n}\n\nconst arbitraryPropertyRegex = /^\\[(.+)\\]$/\n\nfunction getGroupIdForArbitraryProperty(className: string) {\n    if (arbitraryPropertyRegex.test(className)) {\n        const arbitraryPropertyClassName = arbitraryPropertyRegex.exec(className)![1]\n        const property = arbitraryPropertyClassName?.substring(\n            0,\n            arbitraryPropertyClassName.indexOf(':'),\n        )\n\n        if (property) {\n            // I use two dots here because one dot is used as prefix for class groups in plugins\n            return 'arbitrary..' + property\n        }\n    }\n}\n\n/**\n * Exported for testing only\n */\nexport function createClassMap(config: Config) {\n    const { theme, prefix } = config\n    const classMap: ClassPartObject = {\n        nextPart: new Map<string, ClassPartObject>(),\n        validators: [],\n    }\n\n    const prefixedClassGroupEntries = getPrefixedClassGroupEntries(\n        Object.entries(config.classGroups),\n        prefix,\n    )\n\n    prefixedClassGroupEntries.forEach(([classGroupId, classGroup]) => {\n        processClassesRecursively(classGroup, classMap, classGroupId, theme)\n    })\n\n    return classMap\n}\n\nfunction processClassesRecursively(\n    classGroup: ClassGroup,\n    classPartObject: ClassPartObject,\n    classGroupId: ClassGroupId,\n    theme: ThemeObject,\n) {\n    classGroup.forEach((classDefinition) => {\n        if (typeof classDefinition === 'string') {\n            const classPartObjectToEdit =\n                classDefinition === '' ? classPartObject : getPart(classPartObject, classDefinition)\n            classPartObjectToEdit.classGroupId = classGroupId\n            return\n        }\n\n        if (typeof classDefinition === 'function') {\n            if (isThemeGetter(classDefinition)) {\n                processClassesRecursively(\n                    classDefinition(theme),\n                    classPartObject,\n                    classGroupId,\n                    theme,\n                )\n                return\n            }\n\n            classPartObject.validators.push({\n                validator: classDefinition,\n                classGroupId,\n            })\n\n            return\n        }\n\n        Object.entries(classDefinition).forEach(([key, classGroup]) => {\n            processClassesRecursively(\n                classGroup,\n                getPart(classPartObject, key),\n                classGroupId,\n                theme,\n            )\n        })\n    })\n}\n\nfunction getPart(classPartObject: ClassPartObject, path: string) {\n    let currentClassPartObject = classPartObject\n\n    path.split(CLASS_PART_SEPARATOR).forEach((pathPart) => {\n        if (!currentClassPartObject.nextPart.has(pathPart)) {\n            currentClassPartObject.nextPart.set(pathPart, {\n                nextPart: new Map(),\n                validators: [],\n            })\n        }\n\n        currentClassPartObject = currentClassPartObject.nextPart.get(pathPart)!\n    })\n\n    return currentClassPartObject\n}\n\nfunction isThemeGetter(func: ClassValidator | ThemeGetter): func is ThemeGetter {\n    return (func as ThemeGetter).isThemeGetter\n}\n\nfunction getPrefixedClassGroupEntries(\n    classGroupEntries: Array<[classGroupId: string, classGroup: ClassGroup]>,\n    prefix: string | undefined,\n): Array<[classGroupId: string, classGroup: ClassGroup]> {\n    if (!prefix) {\n        return classGroupEntries\n    }\n\n    return classGroupEntries.map(([classGroupId, classGroup]) => {\n        const prefixedClassGroup = classGroup.map((classDefinition) => {\n            if (typeof classDefinition === 'string') {\n                return prefix + classDefinition\n            }\n\n            if (typeof classDefinition === 'object') {\n                return Object.fromEntries(\n                    Object.entries(classDefinition).map(([key, value]) => [prefix + key, value]),\n                )\n            }\n\n            return classDefinition\n        })\n\n        return [classGroupId, prefixedClassGroup]\n    })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}