{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AggregateOperation = exports.DB_AGGREGATE_COLLECTION = void 0;\nconst command_1 = require(\"./command\");\nconst read_preference_1 = require(\"../read_preference\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst operation_1 = require(\"./operation\");\n/** @internal */\nexports.DB_AGGREGATE_COLLECTION = 1;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8;\n/** @internal */\nclass AggregateOperation extends command_1.CommandOperation {\n  constructor(ns, pipeline, options) {\n    super(undefined, {\n      ...options,\n      dbName: ns.db\n    });\n    this.options = options !== null && options !== void 0 ? options : {};\n    // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n    this.target = ns.collection || exports.DB_AGGREGATE_COLLECTION;\n    this.pipeline = pipeline;\n    // determine if we have a write stage, override read preference if so\n    this.hasWriteStage = false;\n    if (typeof (options === null || options === void 0 ? void 0 : options.out) === 'string') {\n      this.pipeline = this.pipeline.concat({\n        $out: options.out\n      });\n      this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      const finalStage = pipeline[pipeline.length - 1];\n      if (finalStage.$out || finalStage.$merge) {\n        this.hasWriteStage = true;\n      }\n    }\n    if (this.hasWriteStage) {\n      this.readPreference = read_preference_1.ReadPreference.primary;\n    }\n    if (this.explain && this.writeConcern) {\n      throw new error_1.MongoInvalidArgumentError('Option \"explain\" cannot be used on an aggregate call with writeConcern');\n    }\n    if ((options === null || options === void 0 ? void 0 : options.cursor) != null && typeof options.cursor !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('Cursor options must be an object');\n    }\n  }\n  get canRetryRead() {\n    return !this.hasWriteStage;\n  }\n  addToPipeline(stage) {\n    this.pipeline.push(stage);\n  }\n  execute(server, session, callback) {\n    const options = this.options;\n    const serverWireVersion = (0, utils_1.maxWireVersion)(server);\n    const command = {\n      aggregate: this.target,\n      pipeline: this.pipeline\n    };\n    if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n      this.readConcern = undefined;\n    }\n    if (serverWireVersion >= 5) {\n      if (this.hasWriteStage && this.writeConcern) {\n        Object.assign(command, {\n          writeConcern: this.writeConcern\n        });\n      }\n    }\n    if (options.bypassDocumentValidation === true) {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n    if (typeof options.allowDiskUse === 'boolean') {\n      command.allowDiskUse = options.allowDiskUse;\n    }\n    if (options.hint) {\n      command.hint = options.hint;\n    }\n    if (options.let) {\n      command.let = options.let;\n    }\n    command.cursor = options.cursor || {};\n    if (options.batchSize && !this.hasWriteStage) {\n      command.cursor.batchSize = options.batchSize;\n    }\n    super.executeCommand(server, session, command, callback);\n  }\n}\nexports.AggregateOperation = AggregateOperation;\n(0, operation_1.defineAspects)(AggregateOperation, [operation_1.Aspect.READ_OPERATION, operation_1.Aspect.RETRYABLE, operation_1.Aspect.EXPLAINABLE, operation_1.Aspect.CURSOR_CREATING]);","map":{"version":3,"names":["command_1","require","read_preference_1","error_1","utils_1","operation_1","exports","DB_AGGREGATE_COLLECTION","MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT","AggregateOperation","CommandOperation","constructor","ns","pipeline","options","undefined","dbName","db","target","collection","hasWriteStage","out","concat","$out","length","finalStage","$merge","readPreference","ReadPreference","primary","explain","writeConcern","MongoInvalidArgumentError","cursor","canRetryRead","addToPipeline","stage","push","execute","server","session","callback","serverWireVersion","maxWireVersion","command","aggregate","readConcern","Object","assign","bypassDocumentValidation","allowDiskUse","hint","let","batchSize","executeCommand","defineAspects","Aspect","READ_OPERATION","RETRYABLE","EXPLAINABLE","CURSOR_CREATING"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\mongodb\\src\\operations\\aggregate.ts"],"sourcesContent":["import { CommandOperation, CommandOperationOptions, CollationOptions } from './command';\nimport { ReadPreference } from '../read_preference';\nimport { MongoInvalidArgumentError } from '../error';\nimport { maxWireVersion, MongoDBNamespace } from '../utils';\nimport { Aspect, defineAspects, Hint } from './operation';\nimport type { Callback } from '../utils';\nimport type { Document } from '../bson';\nimport type { Server } from '../sdam/server';\nimport type { ClientSession } from '../sessions';\n\n/** @internal */\nexport const DB_AGGREGATE_COLLECTION = 1 as const;\nconst MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT = 8 as const;\n\n/** @public */\nexport interface AggregateOptions extends CommandOperationOptions {\n  /** allowDiskUse lets the server know if it can use disk to store temporary results for the aggregation (requires mongodb 2.6 \\>). */\n  allowDiskUse?: boolean;\n  /** The number of documents to return per batch. See [aggregation documentation](https://docs.mongodb.com/manual/reference/command/aggregate). */\n  batchSize?: number;\n  /** Allow driver to bypass schema validation in MongoDB 3.2 or higher. */\n  bypassDocumentValidation?: boolean;\n  /** Return the query as cursor, on 2.6 \\> it returns as a real cursor on pre 2.6 it returns as an emulated cursor. */\n  cursor?: Document;\n  /** specifies a cumulative time limit in milliseconds for processing operations on the cursor. MongoDB interrupts the operation at the earliest following interrupt point. */\n  maxTimeMS?: number;\n  /** The maximum amount of time for the server to wait on new documents to satisfy a tailable cursor query. */\n  maxAwaitTimeMS?: number;\n  /** Specify collation. */\n  collation?: CollationOptions;\n  /** Add an index selection hint to an aggregation command */\n  hint?: Hint;\n  /** Map of parameter names and values that can be accessed using $$var (requires MongoDB 5.0). */\n  let?: Document;\n  out?: string;\n}\n\n/** @internal */\nexport class AggregateOperation<T = Document> extends CommandOperation<T> {\n  options: AggregateOptions;\n  target: string | typeof DB_AGGREGATE_COLLECTION;\n  pipeline: Document[];\n  hasWriteStage: boolean;\n\n  constructor(ns: MongoDBNamespace, pipeline: Document[], options?: AggregateOptions) {\n    super(undefined, { ...options, dbName: ns.db });\n\n    this.options = options ?? {};\n\n    // Covers when ns.collection is null, undefined or the empty string, use DB_AGGREGATE_COLLECTION\n    this.target = ns.collection || DB_AGGREGATE_COLLECTION;\n\n    this.pipeline = pipeline;\n\n    // determine if we have a write stage, override read preference if so\n    this.hasWriteStage = false;\n    if (typeof options?.out === 'string') {\n      this.pipeline = this.pipeline.concat({ $out: options.out });\n      this.hasWriteStage = true;\n    } else if (pipeline.length > 0) {\n      const finalStage = pipeline[pipeline.length - 1];\n      if (finalStage.$out || finalStage.$merge) {\n        this.hasWriteStage = true;\n      }\n    }\n\n    if (this.hasWriteStage) {\n      this.readPreference = ReadPreference.primary;\n    }\n\n    if (this.explain && this.writeConcern) {\n      throw new MongoInvalidArgumentError(\n        'Option \"explain\" cannot be used on an aggregate call with writeConcern'\n      );\n    }\n\n    if (options?.cursor != null && typeof options.cursor !== 'object') {\n      throw new MongoInvalidArgumentError('Cursor options must be an object');\n    }\n  }\n\n  get canRetryRead(): boolean {\n    return !this.hasWriteStage;\n  }\n\n  addToPipeline(stage: Document): void {\n    this.pipeline.push(stage);\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<T>): void {\n    const options: AggregateOptions = this.options;\n    const serverWireVersion = maxWireVersion(server);\n    const command: Document = { aggregate: this.target, pipeline: this.pipeline };\n\n    if (this.hasWriteStage && serverWireVersion < MIN_WIRE_VERSION_$OUT_READ_CONCERN_SUPPORT) {\n      this.readConcern = undefined;\n    }\n\n    if (serverWireVersion >= 5) {\n      if (this.hasWriteStage && this.writeConcern) {\n        Object.assign(command, { writeConcern: this.writeConcern });\n      }\n    }\n\n    if (options.bypassDocumentValidation === true) {\n      command.bypassDocumentValidation = options.bypassDocumentValidation;\n    }\n\n    if (typeof options.allowDiskUse === 'boolean') {\n      command.allowDiskUse = options.allowDiskUse;\n    }\n\n    if (options.hint) {\n      command.hint = options.hint;\n    }\n\n    if (options.let) {\n      command.let = options.let;\n    }\n\n    command.cursor = options.cursor || {};\n    if (options.batchSize && !this.hasWriteStage) {\n      command.cursor.batchSize = options.batchSize;\n    }\n\n    super.executeCommand(server, session, command, callback);\n  }\n}\n\ndefineAspects(AggregateOperation, [\n  Aspect.READ_OPERATION,\n  Aspect.RETRYABLE,\n  Aspect.EXPLAINABLE,\n  Aspect.CURSOR_CREATING\n]);\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AACA,MAAAC,iBAAA,GAAAD,OAAA;AACA,MAAAE,OAAA,GAAAF,OAAA;AACA,MAAAG,OAAA,GAAAH,OAAA;AACA,MAAAI,WAAA,GAAAJ,OAAA;AAMA;AACaK,OAAA,CAAAC,uBAAuB,GAAG,CAAU;AACjD,MAAMC,0CAA0C,GAAG,CAAU;AAyB7D;AACA,MAAaC,kBAAiC,SAAQT,SAAA,CAAAU,gBAAmB;EAMvEC,YAAYC,EAAoB,EAAEC,QAAoB,EAAEC,OAA0B;IAChF,KAAK,CAACC,SAAS,EAAE;MAAE,GAAGD,OAAO;MAAEE,MAAM,EAAEJ,EAAE,CAACK;IAAE,CAAE,CAAC;IAE/C,IAAI,CAACH,OAAO,GAAGA,OAAO,aAAPA,OAAO,cAAPA,OAAO,GAAI,EAAE;IAE5B;IACA,IAAI,CAACI,MAAM,GAAGN,EAAE,CAACO,UAAU,IAAIb,OAAA,CAAAC,uBAAuB;IAEtD,IAAI,CAACM,QAAQ,GAAGA,QAAQ;IAExB;IACA,IAAI,CAACO,aAAa,GAAG,KAAK;IAC1B,IAAI,QAAON,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEO,GAAG,MAAK,QAAQ,EAAE;MACpC,IAAI,CAACR,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACS,MAAM,CAAC;QAAEC,IAAI,EAAET,OAAO,CAACO;MAAG,CAAE,CAAC;MAC3D,IAAI,CAACD,aAAa,GAAG,IAAI;KAC1B,MAAM,IAAIP,QAAQ,CAACW,MAAM,GAAG,CAAC,EAAE;MAC9B,MAAMC,UAAU,GAAGZ,QAAQ,CAACA,QAAQ,CAACW,MAAM,GAAG,CAAC,CAAC;MAChD,IAAIC,UAAU,CAACF,IAAI,IAAIE,UAAU,CAACC,MAAM,EAAE;QACxC,IAAI,CAACN,aAAa,GAAG,IAAI;;;IAI7B,IAAI,IAAI,CAACA,aAAa,EAAE;MACtB,IAAI,CAACO,cAAc,GAAGzB,iBAAA,CAAA0B,cAAc,CAACC,OAAO;;IAG9C,IAAI,IAAI,CAACC,OAAO,IAAI,IAAI,CAACC,YAAY,EAAE;MACrC,MAAM,IAAI5B,OAAA,CAAA6B,yBAAyB,CACjC,wEAAwE,CACzE;;IAGH,IAAI,CAAAlB,OAAO,aAAPA,OAAO,uBAAPA,OAAO,CAAEmB,MAAM,KAAI,IAAI,IAAI,OAAOnB,OAAO,CAACmB,MAAM,KAAK,QAAQ,EAAE;MACjE,MAAM,IAAI9B,OAAA,CAAA6B,yBAAyB,CAAC,kCAAkC,CAAC;;EAE3E;EAEA,IAAIE,YAAYA,CAAA;IACd,OAAO,CAAC,IAAI,CAACd,aAAa;EAC5B;EAEAe,aAAaA,CAACC,KAAe;IAC3B,IAAI,CAACvB,QAAQ,CAACwB,IAAI,CAACD,KAAK,CAAC;EAC3B;EAEAE,OAAOA,CAACC,MAAc,EAAEC,OAAsB,EAAEC,QAAqB;IACnE,MAAM3B,OAAO,GAAqB,IAAI,CAACA,OAAO;IAC9C,MAAM4B,iBAAiB,GAAG,IAAAtC,OAAA,CAAAuC,cAAc,EAACJ,MAAM,CAAC;IAChD,MAAMK,OAAO,GAAa;MAAEC,SAAS,EAAE,IAAI,CAAC3B,MAAM;MAAEL,QAAQ,EAAE,IAAI,CAACA;IAAQ,CAAE;IAE7E,IAAI,IAAI,CAACO,aAAa,IAAIsB,iBAAiB,GAAGlC,0CAA0C,EAAE;MACxF,IAAI,CAACsC,WAAW,GAAG/B,SAAS;;IAG9B,IAAI2B,iBAAiB,IAAI,CAAC,EAAE;MAC1B,IAAI,IAAI,CAACtB,aAAa,IAAI,IAAI,CAACW,YAAY,EAAE;QAC3CgB,MAAM,CAACC,MAAM,CAACJ,OAAO,EAAE;UAAEb,YAAY,EAAE,IAAI,CAACA;QAAY,CAAE,CAAC;;;IAI/D,IAAIjB,OAAO,CAACmC,wBAAwB,KAAK,IAAI,EAAE;MAC7CL,OAAO,CAACK,wBAAwB,GAAGnC,OAAO,CAACmC,wBAAwB;;IAGrE,IAAI,OAAOnC,OAAO,CAACoC,YAAY,KAAK,SAAS,EAAE;MAC7CN,OAAO,CAACM,YAAY,GAAGpC,OAAO,CAACoC,YAAY;;IAG7C,IAAIpC,OAAO,CAACqC,IAAI,EAAE;MAChBP,OAAO,CAACO,IAAI,GAAGrC,OAAO,CAACqC,IAAI;;IAG7B,IAAIrC,OAAO,CAACsC,GAAG,EAAE;MACfR,OAAO,CAACQ,GAAG,GAAGtC,OAAO,CAACsC,GAAG;;IAG3BR,OAAO,CAACX,MAAM,GAAGnB,OAAO,CAACmB,MAAM,IAAI,EAAE;IACrC,IAAInB,OAAO,CAACuC,SAAS,IAAI,CAAC,IAAI,CAACjC,aAAa,EAAE;MAC5CwB,OAAO,CAACX,MAAM,CAACoB,SAAS,GAAGvC,OAAO,CAACuC,SAAS;;IAG9C,KAAK,CAACC,cAAc,CAACf,MAAM,EAAEC,OAAO,EAAEI,OAAO,EAAEH,QAAQ,CAAC;EAC1D;;AAxFFnC,OAAA,CAAAG,kBAAA,GAAAA,kBAAA;AA2FA,IAAAJ,WAAA,CAAAkD,aAAa,EAAC9C,kBAAkB,EAAE,CAChCJ,WAAA,CAAAmD,MAAM,CAACC,cAAc,EACrBpD,WAAA,CAAAmD,MAAM,CAACE,SAAS,EAChBrD,WAAA,CAAAmD,MAAM,CAACG,WAAW,EAClBtD,WAAA,CAAAmD,MAAM,CAACI,eAAe,CACvB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}