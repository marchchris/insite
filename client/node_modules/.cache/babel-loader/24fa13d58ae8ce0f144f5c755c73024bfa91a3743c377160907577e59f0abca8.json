{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decompress = exports.compress = exports.uncompressibleCommands = exports.Compressor = void 0;\nconst zlib = require(\"zlib\");\nconst deps_1 = require(\"../../deps\");\nconst error_1 = require(\"../../error\");\n/** @public */\nexports.Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2\n});\nexports.uncompressibleCommands = new Set(['ismaster', 'saslStart', 'saslContinue', 'getnonce', 'authenticate', 'createUser', 'updateUser', 'copydbSaslStart', 'copydbgetnonce', 'copydb']);\n// Facilitate compressing a message using an agreed compressor\nfunction compress(self, dataToBeCompressed, callback) {\n  const zlibOptions = {};\n  switch (self.options.agreedCompressor) {\n    case 'snappy':\n      {\n        if ('kModuleError' in deps_1.Snappy) {\n          return callback(deps_1.Snappy['kModuleError']);\n        }\n        if (deps_1.Snappy[deps_1.PKG_VERSION].major <= 6) {\n          deps_1.Snappy.compress(dataToBeCompressed, callback);\n        } else {\n          deps_1.Snappy.compress(dataToBeCompressed).then(buffer => callback(undefined, buffer)).catch(error => callback(error));\n        }\n        break;\n      }\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback);\n      break;\n    default:\n      throw new error_1.MongoInvalidArgumentError(`Unknown compressor ${self.options.agreedCompressor} failed to compress`);\n  }\n}\nexports.compress = compress;\n// Decompress a message using the given compressor\nfunction decompress(compressorID, compressedData, callback) {\n  if (compressorID < 0 || compressorID > Math.max(2)) {\n    throw new error_1.MongoDecompressionError(`Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`);\n  }\n  switch (compressorID) {\n    case exports.Compressor.snappy:\n      {\n        if ('kModuleError' in deps_1.Snappy) {\n          return callback(deps_1.Snappy['kModuleError']);\n        }\n        if (deps_1.Snappy[deps_1.PKG_VERSION].major <= 6) {\n          deps_1.Snappy.uncompress(compressedData, {\n            asBuffer: true\n          }, callback);\n        } else {\n          deps_1.Snappy.uncompress(compressedData, {\n            asBuffer: true\n          }).then(buffer => callback(undefined, buffer)).catch(error => callback(error));\n        }\n        break;\n      }\n    case exports.Compressor.zlib:\n      zlib.inflate(compressedData, callback);\n      break;\n    default:\n      callback(undefined, compressedData);\n  }\n}\nexports.decompress = decompress;","map":{"version":3,"names":["zlib","require","deps_1","error_1","exports","Compressor","Object","freeze","none","snappy","uncompressibleCommands","Set","compress","self","dataToBeCompressed","callback","zlibOptions","options","agreedCompressor","Snappy","PKG_VERSION","major","then","buffer","undefined","catch","error","zlibCompressionLevel","level","deflate","MongoInvalidArgumentError","decompress","compressorID","compressedData","Math","max","MongoDecompressionError","uncompress","asBuffer","inflate"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\mongodb\\src\\cmap\\wire_protocol\\compression.ts"],"sourcesContent":["import * as zlib from 'zlib';\nimport type { Callback } from '../../utils';\nimport type { OperationDescription } from '../message_stream';\n\nimport { PKG_VERSION, Snappy } from '../../deps';\nimport { MongoDecompressionError, MongoInvalidArgumentError } from '../../error';\n\n/** @public */\nexport const Compressor = Object.freeze({\n  none: 0,\n  snappy: 1,\n  zlib: 2\n} as const);\n\n/** @public */\nexport type Compressor = typeof Compressor[CompressorName];\n\n/** @public */\nexport type CompressorName = keyof typeof Compressor;\n\nexport const uncompressibleCommands = new Set([\n  'ismaster',\n  'saslStart',\n  'saslContinue',\n  'getnonce',\n  'authenticate',\n  'createUser',\n  'updateUser',\n  'copydbSaslStart',\n  'copydbgetnonce',\n  'copydb'\n]);\n\n// Facilitate compressing a message using an agreed compressor\nexport function compress(\n  self: { options: OperationDescription & zlib.ZlibOptions },\n  dataToBeCompressed: Buffer,\n  callback: Callback<Buffer>\n): void {\n  const zlibOptions = {} as zlib.ZlibOptions;\n  switch (self.options.agreedCompressor) {\n    case 'snappy': {\n      if ('kModuleError' in Snappy) {\n        return callback(Snappy['kModuleError']);\n      }\n\n      if (Snappy[PKG_VERSION].major <= 6) {\n        Snappy.compress(dataToBeCompressed, callback);\n      } else {\n        Snappy.compress(dataToBeCompressed)\n          .then(buffer => callback(undefined, buffer))\n          .catch(error => callback(error));\n      }\n      break;\n    }\n    case 'zlib':\n      // Determine zlibCompressionLevel\n      if (self.options.zlibCompressionLevel) {\n        zlibOptions.level = self.options.zlibCompressionLevel;\n      }\n      zlib.deflate(dataToBeCompressed, zlibOptions, callback as zlib.CompressCallback);\n      break;\n    default:\n      throw new MongoInvalidArgumentError(\n        `Unknown compressor ${self.options.agreedCompressor} failed to compress`\n      );\n  }\n}\n\n// Decompress a message using the given compressor\nexport function decompress(\n  compressorID: Compressor,\n  compressedData: Buffer,\n  callback: Callback<Buffer>\n): void {\n  if (compressorID < 0 || compressorID > Math.max(2)) {\n    throw new MongoDecompressionError(\n      `Server sent message compressed using an unsupported compressor. (Received compressor ID ${compressorID})`\n    );\n  }\n\n  switch (compressorID) {\n    case Compressor.snappy: {\n      if ('kModuleError' in Snappy) {\n        return callback(Snappy['kModuleError']);\n      }\n\n      if (Snappy[PKG_VERSION].major <= 6) {\n        Snappy.uncompress(compressedData, { asBuffer: true }, callback);\n      } else {\n        Snappy.uncompress(compressedData, { asBuffer: true })\n          .then(buffer => callback(undefined, buffer))\n          .catch(error => callback(error));\n      }\n      break;\n    }\n    case Compressor.zlib:\n      zlib.inflate(compressedData, callback as zlib.CompressCallback);\n      break;\n    default:\n      callback(undefined, compressedData);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}