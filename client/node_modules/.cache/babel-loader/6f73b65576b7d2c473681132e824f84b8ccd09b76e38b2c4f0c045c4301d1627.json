{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ServerCapabilities = exports.TOPOLOGY_EVENTS = exports.Topology = void 0;\nconst Denque = require(\"denque\");\nconst read_preference_1 = require(\"../read_preference\");\nconst server_description_1 = require(\"./server_description\");\nconst topology_description_1 = require(\"./topology_description\");\nconst server_1 = require(\"./server\");\nconst sessions_1 = require(\"../sessions\");\nconst srv_polling_1 = require(\"./srv_polling\");\nconst connection_pool_1 = require(\"../cmap/connection_pool\");\nconst error_1 = require(\"../error\");\nconst server_selection_1 = require(\"./server_selection\");\nconst utils_1 = require(\"../utils\");\nconst common_1 = require(\"./common\");\nconst events_1 = require(\"./events\");\nconst connection_1 = require(\"../cmap/connection\");\nconst connection_string_1 = require(\"../connection_string\");\nconst bson_1 = require(\"../bson\");\nconst mongo_types_1 = require(\"../mongo_types\");\n// Global state\nlet globalTopologyCounter = 0;\n// events that we relay to the `Topology`\nconst SERVER_RELAY_EVENTS = [server_1.Server.SERVER_HEARTBEAT_STARTED, server_1.Server.SERVER_HEARTBEAT_SUCCEEDED, server_1.Server.SERVER_HEARTBEAT_FAILED, connection_1.Connection.COMMAND_STARTED, connection_1.Connection.COMMAND_SUCCEEDED, connection_1.Connection.COMMAND_FAILED, ...connection_pool_1.CMAP_EVENTS];\n// all events we listen to from `Server` instances\nconst LOCAL_SERVER_EVENTS = [server_1.Server.CONNECT, server_1.Server.DESCRIPTION_RECEIVED, server_1.Server.CLOSED, server_1.Server.ENDED];\nconst stateTransition = (0, utils_1.makeStateMachine)({\n  [common_1.STATE_CLOSED]: [common_1.STATE_CLOSED, common_1.STATE_CONNECTING],\n  [common_1.STATE_CONNECTING]: [common_1.STATE_CONNECTING, common_1.STATE_CLOSING, common_1.STATE_CONNECTED, common_1.STATE_CLOSED],\n  [common_1.STATE_CONNECTED]: [common_1.STATE_CONNECTED, common_1.STATE_CLOSING, common_1.STATE_CLOSED],\n  [common_1.STATE_CLOSING]: [common_1.STATE_CLOSING, common_1.STATE_CLOSED]\n});\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nclass Topology extends mongo_types_1.TypedEventEmitter {\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(seeds, options) {\n    var _a;\n    super();\n    // Legacy CSFLE support\n    this.bson = Object.create(null);\n    this.bson.serialize = bson_1.serialize;\n    this.bson.deserialize = bson_1.deserialize;\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options !== null && options !== void 0 ? options : {\n      hosts: [utils_1.HostAddress.fromString('localhost:27017')],\n      retryReads: connection_string_1.DEFAULT_OPTIONS.get('retryReads'),\n      retryWrites: connection_string_1.DEFAULT_OPTIONS.get('retryWrites'),\n      serverSelectionTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('serverSelectionTimeoutMS'),\n      directConnection: connection_string_1.DEFAULT_OPTIONS.get('directConnection'),\n      loadBalanced: connection_string_1.DEFAULT_OPTIONS.get('loadBalanced'),\n      metadata: connection_string_1.DEFAULT_OPTIONS.get('metadata'),\n      monitorCommands: connection_string_1.DEFAULT_OPTIONS.get('monitorCommands'),\n      tls: connection_string_1.DEFAULT_OPTIONS.get('tls'),\n      maxPoolSize: connection_string_1.DEFAULT_OPTIONS.get('maxPoolSize'),\n      minPoolSize: connection_string_1.DEFAULT_OPTIONS.get('minPoolSize'),\n      waitQueueTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('waitQueueTimeoutMS'),\n      connectionType: connection_string_1.DEFAULT_OPTIONS.get('connectionType'),\n      connectTimeoutMS: connection_string_1.DEFAULT_OPTIONS.get('connectTimeoutMS'),\n      maxIdleTimeMS: connection_string_1.DEFAULT_OPTIONS.get('maxIdleTimeMS'),\n      heartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('heartbeatFrequencyMS'),\n      minHeartbeatFrequencyMS: connection_string_1.DEFAULT_OPTIONS.get('minHeartbeatFrequencyMS')\n    };\n    if (typeof seeds === 'string') {\n      seeds = [utils_1.HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n    const seedlist = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(utils_1.HostAddress.fromString(seed));\n      } else if (seed instanceof utils_1.HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new error_1.MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n    const serverDescriptions = new Map();\n    for (const hostAddress of seedlist) {\n      serverDescriptions.set(hostAddress.toString(), new server_description_1.ServerDescription(hostAddress));\n    }\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: common_1.STATE_CLOSED,\n      // the topology description\n      description: new topology_description_1.TopologyDescription(topologyType, serverDescriptions, options.replicaSet, undefined, undefined, undefined, options),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new sessions_1.ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      credentials: options === null || options === void 0 ? void 0 : options.credentials,\n      clusterTime: undefined,\n      // timer management\n      connectionTimers: new Set(),\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller = (_a = options.srvPoller) !== null && _a !== void 0 ? _a : new srv_polling_1.SrvPoller({\n        heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n        srvHost: options.srvHost\n      });\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n  detectShardedTopology(event) {\n    var _a, _b, _c;\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n    const transitionToSharded = previousType !== common_1.TopologyType.Sharded && newType === common_1.TopologyType.Sharded;\n    const srvListeners = (_a = this.s.srvPoller) === null || _a === void 0 ? void 0 : _a.listeners(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!(srvListeners === null || srvListeners === void 0 ? void 0 : srvListeners.includes(this.s.detectSrvRecords));\n    if (transitionToSharded && !listeningToSrvPolling) {\n      (_b = this.s.srvPoller) === null || _b === void 0 ? void 0 : _b.on(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      (_c = this.s.srvPoller) === null || _c === void 0 ? void 0 : _c.start();\n    }\n  }\n  detectSrvRecords(ev) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev);\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n    updateServers(this);\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n  }\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description() {\n    return this.s.description;\n  }\n  get loadBalanced() {\n    return this.s.options.loadBalanced;\n  }\n  get capabilities() {\n    return new ServerCapabilities(this.lastIsMaster());\n  }\n  /** Initiate server connect */\n  connect(options, callback) {\n    var _a;\n    if (typeof options === 'function') callback = options, options = {};\n    options = options !== null && options !== void 0 ? options : {};\n    if (this.s.state === common_1.STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    stateTransition(this, common_1.STATE_CONNECTING);\n    // emit SDAM monitoring events\n    this.emit(Topology.TOPOLOGY_OPENING, new events_1.TopologyOpeningEvent(this.s.id));\n    // emit an event for the topology change\n    this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, new topology_description_1.TopologyDescription(common_1.TopologyType.Unknown),\n    // initial is always Unknown\n    this.s.description));\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    connectServers(this, serverDescriptions);\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new server_description_1.ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n    const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n    this.selectServer((0, server_selection_1.readPreferenceServerSelector)(readPreference), options, (err, server) => {\n      if (err) {\n        this.close();\n        typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n        return;\n      }\n      // TODO: NODE-2471\n      if (server && this.s.credentials) {\n        server.command((0, utils_1.ns)('admin.$cmd'), {\n          ping: 1\n        }, err => {\n          if (err) {\n            typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n            return;\n          }\n          stateTransition(this, common_1.STATE_CONNECTED);\n          // TODO(NODE-3273) - remove err\n          this.emit(Topology.OPEN, err, this);\n          this.emit(Topology.CONNECT, this);\n          if (typeof callback === 'function') callback(undefined, this);\n        });\n        return;\n      }\n      stateTransition(this, common_1.STATE_CONNECTED);\n      // TODO(NODE-3273) - remove err\n      this.emit(Topology.OPEN, err, this);\n      this.emit(Topology.CONNECT, this);\n      if (typeof callback === 'function') callback(undefined, this);\n    });\n  }\n  /** Close this topology */\n  close(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    if (typeof options === 'boolean') {\n      options = {\n        force: options\n      };\n    }\n    options = options !== null && options !== void 0 ? options : {};\n    if (this.s.state === common_1.STATE_CLOSED || this.s.state === common_1.STATE_CLOSING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    stateTransition(this, common_1.STATE_CLOSING);\n    drainWaitQueue(this[kWaitQueue], new error_1.MongoTopologyClosedError());\n    (0, common_1.drainTimerQueue)(this.s.connectionTimers);\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(srv_polling_1.SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    (0, utils_1.eachAsync)(Array.from(this.s.sessions.values()), (session, cb) => session.endSession(cb), () => {\n      this.s.sessionPool.endAllPooledSessions(() => {\n        (0, utils_1.eachAsync)(Array.from(this.s.servers.values()), (server, cb) => destroyServer(server, this, options, cb), err => {\n          this.s.servers.clear();\n          // emit an event for close\n          this.emit(Topology.TOPOLOGY_CLOSED, new events_1.TopologyClosedEvent(this.s.id));\n          stateTransition(this, common_1.STATE_CLOSED);\n          if (typeof callback === 'function') {\n            callback(err);\n          }\n        });\n      });\n    });\n  }\n  selectServer(selector, _options, _callback) {\n    let options = _options;\n    const callback = _callback !== null && _callback !== void 0 ? _callback : _options;\n    if (typeof options === 'function') {\n      options = {};\n    }\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof read_preference_1.ReadPreference) {\n          readPreference = selector;\n        } else {\n          read_preference_1.ReadPreference.translate(options);\n          readPreference = options.readPreference || read_preference_1.ReadPreference.primary;\n        }\n        serverSelector = (0, server_selection_1.readPreferenceServerSelector)(readPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n    options = Object.assign({}, {\n      serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS\n    }, options);\n    const isSharded = this.description.type === common_1.TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n    const waitQueueMember = {\n      serverSelector,\n      transaction,\n      callback\n    };\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new error_1.MongoServerSelectionError(`Server selection timed out after ${serverSelectionTimeoutMS} ms`, this.description);\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  }\n  // Sessions related methods\n  /**\n   * @returns Whether the topology should initiate selection to determine session support\n   */\n  shouldCheckForSessionSupport() {\n    if (this.description.type === common_1.TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n    return !this.description.hasDataBearingServers;\n  }\n  /**\n   * @returns Whether sessions are supported on the current topology\n   */\n  hasSessionSupport() {\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n  }\n  /** Start a logical session */\n  startSession(options, clientOptions) {\n    const session = new sessions_1.ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n    this.s.sessions.add(session);\n    return session;\n  }\n  /** Send endSessions command(s) with the given session ids */\n  endSessions(sessions, callback) {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n    this.selectServer((0, server_selection_1.readPreferenceServerSelector)(read_preference_1.ReadPreference.primaryPreferred), (err, server) => {\n      if (err || !server) {\n        if (typeof callback === 'function') callback(err);\n        return;\n      }\n      server.command((0, utils_1.ns)('admin.$cmd'), {\n        endSessions: sessions\n      }, {\n        noResponse: true\n      }, (err, result) => {\n        if (typeof callback === 'function') callback(err, result);\n      });\n    });\n  }\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription) {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      (0, common_1._advanceClusterTime)(this, clusterTime);\n    }\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions = previousServerDescription && previousServerDescription.equals(serverDescription);\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new error_1.MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(Topology.SERVER_DESCRIPTION_CHANGED, new events_1.ServerDescriptionChangedEvent(this.s.id, serverDescription.address, previousServerDescription, newDescription));\n      }\n    }\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n    if (!equalDescriptions) {\n      this.emit(Topology.TOPOLOGY_DESCRIPTION_CHANGED, new events_1.TopologyDescriptionChangedEvent(this.s.id, previousTopologyDescription, this.s.description));\n    }\n  }\n  auth(credentials, callback) {\n    if (typeof credentials === 'function') callback = credentials, credentials = undefined;\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n  get clientMetadata() {\n    return this.s.options.metadata;\n  }\n  isConnected() {\n    return this.s.state === common_1.STATE_CONNECTED;\n  }\n  isDestroyed() {\n    return this.s.state === common_1.STATE_CLOSED;\n  }\n  /**\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n  unref() {\n    (0, utils_1.emitWarning)('`unref` is a noop and will be removed in the next major version');\n  }\n  // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n  lastIsMaster() {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(sd => sd.type !== common_1.ServerType.Unknown)[0];\n    const result = sd || {\n      maxWireVersion: this.description.commonWireVersion\n    };\n    return result;\n  }\n  get logicalSessionTimeoutMinutes() {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n  get clusterTime() {\n    return this.s.clusterTime;\n  }\n  set clusterTime(clusterTime) {\n    this.s.clusterTime = clusterTime;\n  }\n}\nexports.Topology = Topology;\n/** @event */\nTopology.SERVER_OPENING = 'serverOpening';\n/** @event */\nTopology.SERVER_CLOSED = 'serverClosed';\n/** @event */\nTopology.SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged';\n/** @event */\nTopology.TOPOLOGY_OPENING = 'topologyOpening';\n/** @event */\nTopology.TOPOLOGY_CLOSED = 'topologyClosed';\n/** @event */\nTopology.TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged';\n/** @event */\nTopology.ERROR = 'error';\n/** @event */\nTopology.OPEN = 'open';\n/** @event */\nTopology.CONNECT = 'connect';\n/** @event */\nTopology.CLOSE = 'close';\n/** @event */\nTopology.TIMEOUT = 'timeout';\n/** @public */\nexports.TOPOLOGY_EVENTS = [Topology.SERVER_OPENING, Topology.SERVER_CLOSED, Topology.SERVER_DESCRIPTION_CHANGED, Topology.TOPOLOGY_OPENING, Topology.TOPOLOGY_CLOSED, Topology.TOPOLOGY_DESCRIPTION_CHANGED, Topology.ERROR, Topology.TIMEOUT, Topology.CLOSE];\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(server, topology, options, callback) {\n  options = options !== null && options !== void 0 ? options : {};\n  for (const event of LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n  server.destroy(options, () => {\n    topology.emit(Topology.SERVER_CLOSED, new events_1.ServerClosedEvent(topology.s.id, server.description.address));\n    for (const event of SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options) {\n  if (options === null || options === void 0 ? void 0 : options.directConnection) {\n    return common_1.TopologyType.Single;\n  }\n  if (options === null || options === void 0 ? void 0 : options.replicaSet) {\n    return common_1.TopologyType.ReplicaSetNoPrimary;\n  }\n  if (options === null || options === void 0 ? void 0 : options.loadBalanced) {\n    return common_1.TopologyType.LoadBalanced;\n  }\n  return common_1.TopologyType.Unknown;\n}\nfunction randomSelection(array) {\n  return array[Math.floor(Math.random() * array.length)];\n}\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n * @param connectDelay - Time to wait before attempting initial connection\n */\nfunction createAndConnectServer(topology, serverDescription, connectDelay) {\n  topology.emit(Topology.SERVER_OPENING, new events_1.ServerOpeningEvent(topology.s.id, serverDescription.address));\n  const server = new server_1.Server(topology, serverDescription, topology.s.options);\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.on(event, e => topology.emit(event, e));\n  }\n  server.on(server_1.Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n  if (connectDelay) {\n    const connectTimer = setTimeout(() => {\n      (0, common_1.clearAndRemoveTimerFrom)(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n  server.connect();\n  return server;\n}\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param topology - The topology responsible for the servers\n * @param serverDescriptions - A list of server descriptions to connect\n */\nfunction connectServers(topology, serverDescriptions) {\n  topology.s.servers = serverDescriptions.reduce((servers, serverDescription) => {\n    const server = createAndConnectServer(topology, serverDescription);\n    servers.set(serverDescription.address, server);\n    return servers;\n  }, new Map());\n}\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology, incomingServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n    }\n  }\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\nfunction drainWaitQueue(queue, err) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\nfunction processWaitQueue(topology) {\n  if (topology.s.state === common_1.STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new error_1.MongoTopologyClosedError());\n    return;\n  }\n  const isSharded = topology.description.type === common_1.TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector ? serverSelector(topology.description, serverDescriptions) : serverDescriptions;\n    } catch (e) {\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n      waitQueueMember.callback(e);\n      continue;\n    }\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\nfunction isStaleServerDescription(topologyDescription, incomingServerDescription) {\n  const currentServerDescription = topologyDescription.servers.get(incomingServerDescription.address);\n  const currentTopologyVersion = currentServerDescription === null || currentServerDescription === void 0 ? void 0 : currentServerDescription.topologyVersion;\n  return (0, server_description_1.compareTopologyVersion)(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0;\n}\n/** @public */\nclass ServerCapabilities {\n  constructor(ismaster) {\n    this.minWireVersion = ismaster.minWireVersion || 0;\n    this.maxWireVersion = ismaster.maxWireVersion || 0;\n  }\n  get hasAggregationCursor() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasWriteCommands() {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch() {\n    return this.minWireVersion >= 0;\n  }\n  get hasAuthCommands() {\n    return this.maxWireVersion >= 1;\n  }\n  get hasListCollectionsCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get hasListIndexesCommand() {\n    return this.maxWireVersion >= 3;\n  }\n  get supportsSnapshotReads() {\n    return this.maxWireVersion >= 13;\n  }\n  get commandsTakeWriteConcern() {\n    return this.maxWireVersion >= 5;\n  }\n  get commandsTakeCollation() {\n    return this.maxWireVersion >= 5;\n  }\n}\nexports.ServerCapabilities = ServerCapabilities;","map":{"version":3,"names":["Denque","require","read_preference_1","server_description_1","topology_description_1","server_1","sessions_1","srv_polling_1","connection_pool_1","error_1","server_selection_1","utils_1","common_1","events_1","connection_1","connection_string_1","bson_1","mongo_types_1","globalTopologyCounter","SERVER_RELAY_EVENTS","Server","SERVER_HEARTBEAT_STARTED","SERVER_HEARTBEAT_SUCCEEDED","SERVER_HEARTBEAT_FAILED","Connection","COMMAND_STARTED","COMMAND_SUCCEEDED","COMMAND_FAILED","CMAP_EVENTS","LOCAL_SERVER_EVENTS","CONNECT","DESCRIPTION_RECEIVED","CLOSED","ENDED","stateTransition","makeStateMachine","STATE_CLOSED","STATE_CONNECTING","STATE_CLOSING","STATE_CONNECTED","kCancelled","Symbol","kWaitQueue","Topology","TypedEventEmitter","constructor","seeds","options","bson","Object","create","serialize","deserialize","hosts","HostAddress","fromString","retryReads","DEFAULT_OPTIONS","get","retryWrites","serverSelectionTimeoutMS","directConnection","loadBalanced","metadata","monitorCommands","tls","maxPoolSize","minPoolSize","waitQueueTimeoutMS","connectionType","connectTimeoutMS","maxIdleTimeMS","heartbeatFrequencyMS","minHeartbeatFrequencyMS","Array","isArray","seedlist","seed","push","MongoRuntimeError","JSON","stringify","topologyType","topologyTypeFromOptions","topologyId","serverDescriptions","Map","hostAddress","set","toString","ServerDescription","s","id","state","description","TopologyDescription","replicaSet","undefined","servers","sessionPool","ServerSessionPool","sessions","Set","credentials","clusterTime","connectionTimers","detectShardedTopology","ev","detectSrvRecords","srvHost","srvPoller","_a","SrvPoller","on","TOPOLOGY_DESCRIPTION_CHANGED","event","previousType","previousDescription","type","newType","newDescription","transitionToSharded","TopologyType","Sharded","srvListeners","listeners","SRV_RECORD_DISCOVERY","listeningToSrvPolling","includes","_b","_c","start","previousTopologyDescription","updateFromSrvPollingEvent","updateServers","emit","TopologyDescriptionChangedEvent","capabilities","ServerCapabilities","lastIsMaster","connect","callback","TOPOLOGY_OPENING","TopologyOpeningEvent","Unknown","from","values","connectServers","serverUpdateHandler","readPreference","ReadPreference","primary","selectServer","readPreferenceServerSelector","err","server","close","ERROR","command","ns","ping","OPEN","force","drainWaitQueue","MongoTopologyClosedError","drainTimerQueue","stop","removeListener","eachAsync","session","cb","endSession","endAllPooledSessions","destroyServer","clear","TOPOLOGY_CLOSED","TopologyClosedEvent","selector","_options","_callback","serverSelector","translate","assign","isSharded","transaction","waitQueueMember","timer","setTimeout","timeoutError","MongoServerSelectionError","processWaitQueue","shouldCheckForSessionSupport","Single","hasKnownServers","hasDataBearingServers","hasSessionSupport","logicalSessionTimeoutMinutes","startSession","clientOptions","ClientSession","once","delete","add","endSessions","primaryPreferred","noResponse","result","serverDescription","hasServer","address","isStaleServerDescription","previousServerDescription","$clusterTime","_advanceClusterTime","equalDescriptions","equals","update","compatibilityError","MongoCompatibilityError","SERVER_DESCRIPTION_CHANGED","ServerDescriptionChangedEvent","length","auth","clientMetadata","isConnected","isDestroyed","unref","emitWarning","sd","filter","ServerType","maxWireVersion","commonWireVersion","exports","SERVER_OPENING","SERVER_CLOSED","CLOSE","TIMEOUT","TOPOLOGY_EVENTS","topology","removeAllListeners","destroy","ServerClosedEvent","ReplicaSetNoPrimary","LoadBalanced","randomSelection","array","Math","floor","random","createAndConnectServer","connectDelay","ServerOpeningEvent","e","connectTimer","clearAndRemoveTimerFrom","reduce","incomingServerDescription","has","entry","serverAddress","queue","shift","clearTimeout","membersToProcess","i","selectedDescriptions","selectedServerDescription","selectedServer","isActive","pinServer","process","nextTick","scheduleServerCheck","requestCheck","topologyDescription","currentServerDescription","currentTopologyVersion","topologyVersion","compareTopologyVersion","ismaster","minWireVersion","hasAggregationCursor","hasWriteCommands","hasTextSearch","hasAuthCommands","hasListCollectionsCommand","hasListIndexesCommand","supportsSnapshotReads","commandsTakeWriteConcern","commandsTakeCollation"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\mongodb\\src\\sdam\\topology.ts"],"sourcesContent":["import Denque = require('denque');\nimport { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport { compareTopologyVersion, ServerDescription } from './server_description';\nimport { TopologyDescription } from './topology_description';\nimport { Server, ServerEvents, ServerOptions } from './server';\nimport {\n  ClientSession,\n  ServerSessionPool,\n  ServerSessionId,\n  ClientSessionOptions\n} from '../sessions';\nimport { SrvPoller, SrvPollingEvent } from './srv_polling';\nimport { CMAP_EVENTS, ConnectionPoolEvents } from '../cmap/connection_pool';\nimport {\n  MongoServerSelectionError,\n  MongoCompatibilityError,\n  MongoDriverError,\n  MongoTopologyClosedError,\n  MongoRuntimeError\n} from '../error';\nimport { readPreferenceServerSelector, ServerSelector } from './server_selection';\nimport {\n  makeStateMachine,\n  eachAsync,\n  ClientMetadata,\n  Callback,\n  HostAddress,\n  ns,\n  emitWarning,\n  EventEmitterWithState\n} from '../utils';\nimport {\n  TopologyType,\n  ServerType,\n  ClusterTime,\n  TimerQueue,\n  _advanceClusterTime,\n  drainTimerQueue,\n  clearAndRemoveTimerFrom,\n  STATE_CLOSED,\n  STATE_CLOSING,\n  STATE_CONNECTING,\n  STATE_CONNECTED\n} from './common';\nimport {\n  ServerOpeningEvent,\n  ServerClosedEvent,\n  ServerDescriptionChangedEvent,\n  TopologyOpeningEvent,\n  TopologyClosedEvent,\n  TopologyDescriptionChangedEvent\n} from './events';\nimport type { Document, BSONSerializeOptions } from '../bson';\nimport type { MongoCredentials } from '../cmap/auth/mongo_credentials';\nimport type { Transaction } from '../transactions';\nimport type { CloseOptions } from '../cmap/connection_pool';\nimport { DestroyOptions, Connection, ConnectionEvents } from '../cmap/connection';\nimport type { MongoOptions, ServerApi } from '../mongo_client';\nimport { DEFAULT_OPTIONS } from '../connection_string';\nimport { serialize, deserialize } from '../bson';\nimport { TypedEventEmitter } from '../mongo_types';\n\n// Global state\nlet globalTopologyCounter = 0;\n\n// events that we relay to the `Topology`\nconst SERVER_RELAY_EVENTS = [\n  Server.SERVER_HEARTBEAT_STARTED,\n  Server.SERVER_HEARTBEAT_SUCCEEDED,\n  Server.SERVER_HEARTBEAT_FAILED,\n  Connection.COMMAND_STARTED,\n  Connection.COMMAND_SUCCEEDED,\n  Connection.COMMAND_FAILED,\n  ...CMAP_EVENTS\n];\n\n// all events we listen to from `Server` instances\nconst LOCAL_SERVER_EVENTS = [\n  Server.CONNECT,\n  Server.DESCRIPTION_RECEIVED,\n  Server.CLOSED,\n  Server.ENDED\n];\n\nconst stateTransition = makeStateMachine({\n  [STATE_CLOSED]: [STATE_CLOSED, STATE_CONNECTING],\n  [STATE_CONNECTING]: [STATE_CONNECTING, STATE_CLOSING, STATE_CONNECTED, STATE_CLOSED],\n  [STATE_CONNECTED]: [STATE_CONNECTED, STATE_CLOSING, STATE_CLOSED],\n  [STATE_CLOSING]: [STATE_CLOSING, STATE_CLOSED]\n});\n\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n\n/** @internal */\nexport type ServerSelectionCallback = Callback<Server>;\n\n/** @internal */\nexport interface ServerSelectionRequest {\n  serverSelector: ServerSelector;\n  transaction?: Transaction;\n  callback: ServerSelectionCallback;\n  timer?: NodeJS.Timeout;\n  [kCancelled]?: boolean;\n}\n\n/** @internal */\nexport interface TopologyPrivate {\n  /** the id of this topology */\n  id: number;\n  /** passed in options */\n  options: TopologyOptions;\n  /** initial seedlist of servers to connect to */\n  seedlist: HostAddress[];\n  /** initial state */\n  state: string;\n  /** the topology description */\n  description: TopologyDescription;\n  serverSelectionTimeoutMS: number;\n  heartbeatFrequencyMS: number;\n  minHeartbeatFrequencyMS: number;\n  /** A map of server instances to normalized addresses */\n  servers: Map<string, Server>;\n  /** Server Session Pool */\n  sessionPool: ServerSessionPool;\n  /** Active client sessions */\n  sessions: Set<ClientSession>;\n  credentials?: MongoCredentials;\n  clusterTime?: ClusterTime;\n  /** timers created for the initial connect to a server */\n  connectionTimers: TimerQueue;\n\n  /** related to srv polling */\n  srvPoller?: SrvPoller;\n  detectShardedTopology: (event: TopologyDescriptionChangedEvent) => void;\n  detectSrvRecords: (event: SrvPollingEvent) => void;\n}\n\n/** @public */\nexport interface TopologyOptions extends BSONSerializeOptions, ServerOptions {\n  hosts: HostAddress[];\n  retryWrites: boolean;\n  retryReads: boolean;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS: number;\n  /** The name of the replica set to connect to */\n  replicaSet?: string;\n  srvHost?: string;\n  /** @internal */\n  srvPoller?: SrvPoller;\n  /** Indicates that a client should directly connect to a node without attempting to discover its topology type */\n  directConnection: boolean;\n  loadBalanced: boolean;\n  metadata: ClientMetadata;\n  /** MongoDB server API version */\n  serverApi?: ServerApi;\n}\n\n/** @public */\nexport interface ConnectOptions {\n  readPreference?: ReadPreference;\n}\n\n/** @public */\nexport interface SelectServerOptions {\n  readPreference?: ReadPreferenceLike;\n  /** How long to block for server selection before throwing an error */\n  serverSelectionTimeoutMS?: number;\n  session?: ClientSession;\n}\n\n/** @public */\nexport type TopologyEvents = {\n  /** Top level MongoClient doesn't emit this so it is marked: @internal */\n  connect(topology: Topology): void;\n  serverOpening(event: ServerOpeningEvent): void;\n  serverClosed(event: ServerClosedEvent): void;\n  serverDescriptionChanged(event: ServerDescriptionChangedEvent): void;\n  topologyClosed(event: TopologyClosedEvent): void;\n  topologyOpening(event: TopologyOpeningEvent): void;\n  topologyDescriptionChanged(event: TopologyDescriptionChangedEvent): void;\n  error(error: Error): void;\n  /** TODO(NODE-3273) - remove error @internal */\n  open(error: undefined, topology: Topology): void;\n  close(): void;\n  timeout(): void;\n} & Omit<ServerEvents, 'connect'> &\n  ConnectionPoolEvents &\n  ConnectionEvents &\n  EventEmitterWithState;\n/**\n * A container of server instances representing a connection to a MongoDB topology.\n * @internal\n */\nexport class Topology extends TypedEventEmitter<TopologyEvents> {\n  /** @internal */\n  s: TopologyPrivate;\n  /** @internal */\n  [kWaitQueue]: Denque<ServerSelectionRequest>;\n  /** @internal */\n  ismaster?: Document;\n  /** @internal */\n  _type?: string;\n\n  /** @event */\n  static readonly SERVER_OPENING = 'serverOpening' as const;\n  /** @event */\n  static readonly SERVER_CLOSED = 'serverClosed' as const;\n  /** @event */\n  static readonly SERVER_DESCRIPTION_CHANGED = 'serverDescriptionChanged' as const;\n  /** @event */\n  static readonly TOPOLOGY_OPENING = 'topologyOpening' as const;\n  /** @event */\n  static readonly TOPOLOGY_CLOSED = 'topologyClosed' as const;\n  /** @event */\n  static readonly TOPOLOGY_DESCRIPTION_CHANGED = 'topologyDescriptionChanged' as const;\n  /** @event */\n  static readonly ERROR = 'error' as const;\n  /** @event */\n  static readonly OPEN = 'open' as const;\n  /** @event */\n  static readonly CONNECT = 'connect' as const;\n  /** @event */\n  static readonly CLOSE = 'close' as const;\n  /** @event */\n  static readonly TIMEOUT = 'timeout' as const;\n\n  /**\n   * @internal\n   *\n   * @privateRemarks\n   * mongodb-client-encryption's class ClientEncryption falls back to finding the bson lib\n   * defined on client.topology.bson, in order to maintain compatibility with any version\n   * of mongodb-client-encryption we keep a reference to serialize and deserialize here.\n   */\n  bson: { serialize: typeof serialize; deserialize: typeof deserialize };\n\n  /**\n   * @param seedlist - a list of HostAddress instances to connect to\n   */\n  constructor(seeds: string | string[] | HostAddress | HostAddress[], options: TopologyOptions) {\n    super();\n\n    // Legacy CSFLE support\n    this.bson = Object.create(null);\n    this.bson.serialize = serialize;\n    this.bson.deserialize = deserialize;\n\n    // Options should only be undefined in tests, MongoClient will always have defined options\n    options = options ?? {\n      hosts: [HostAddress.fromString('localhost:27017')],\n      retryReads: DEFAULT_OPTIONS.get('retryReads'),\n      retryWrites: DEFAULT_OPTIONS.get('retryWrites'),\n      serverSelectionTimeoutMS: DEFAULT_OPTIONS.get('serverSelectionTimeoutMS'),\n      directConnection: DEFAULT_OPTIONS.get('directConnection'),\n      loadBalanced: DEFAULT_OPTIONS.get('loadBalanced'),\n      metadata: DEFAULT_OPTIONS.get('metadata'),\n      monitorCommands: DEFAULT_OPTIONS.get('monitorCommands'),\n      tls: DEFAULT_OPTIONS.get('tls'),\n      maxPoolSize: DEFAULT_OPTIONS.get('maxPoolSize'),\n      minPoolSize: DEFAULT_OPTIONS.get('minPoolSize'),\n      waitQueueTimeoutMS: DEFAULT_OPTIONS.get('waitQueueTimeoutMS'),\n      connectionType: DEFAULT_OPTIONS.get('connectionType'),\n      connectTimeoutMS: DEFAULT_OPTIONS.get('connectTimeoutMS'),\n      maxIdleTimeMS: DEFAULT_OPTIONS.get('maxIdleTimeMS'),\n      heartbeatFrequencyMS: DEFAULT_OPTIONS.get('heartbeatFrequencyMS'),\n      minHeartbeatFrequencyMS: DEFAULT_OPTIONS.get('minHeartbeatFrequencyMS')\n    };\n\n    if (typeof seeds === 'string') {\n      seeds = [HostAddress.fromString(seeds)];\n    } else if (!Array.isArray(seeds)) {\n      seeds = [seeds];\n    }\n\n    const seedlist: HostAddress[] = [];\n    for (const seed of seeds) {\n      if (typeof seed === 'string') {\n        seedlist.push(HostAddress.fromString(seed));\n      } else if (seed instanceof HostAddress) {\n        seedlist.push(seed);\n      } else {\n        // FIXME(NODE-3483): May need to be a MongoParseError\n        throw new MongoRuntimeError(`Topology cannot be constructed from ${JSON.stringify(seed)}`);\n      }\n    }\n\n    const topologyType = topologyTypeFromOptions(options);\n    const topologyId = globalTopologyCounter++;\n\n    const serverDescriptions = new Map();\n    for (const hostAddress of seedlist) {\n      serverDescriptions.set(hostAddress.toString(), new ServerDescription(hostAddress));\n    }\n\n    this[kWaitQueue] = new Denque();\n    this.s = {\n      // the id of this topology\n      id: topologyId,\n      // passed in options\n      options,\n      // initial seedlist of servers to connect to\n      seedlist,\n      // initial state\n      state: STATE_CLOSED,\n      // the topology description\n      description: new TopologyDescription(\n        topologyType,\n        serverDescriptions,\n        options.replicaSet,\n        undefined,\n        undefined,\n        undefined,\n        options\n      ),\n      serverSelectionTimeoutMS: options.serverSelectionTimeoutMS,\n      heartbeatFrequencyMS: options.heartbeatFrequencyMS,\n      minHeartbeatFrequencyMS: options.minHeartbeatFrequencyMS,\n      // a map of server instances to normalized addresses\n      servers: new Map(),\n      // Server Session Pool\n      sessionPool: new ServerSessionPool(this),\n      // Active client sessions\n      sessions: new Set(),\n      credentials: options?.credentials,\n      clusterTime: undefined,\n\n      // timer management\n      connectionTimers: new Set<NodeJS.Timeout>(),\n\n      detectShardedTopology: ev => this.detectShardedTopology(ev),\n      detectSrvRecords: ev => this.detectSrvRecords(ev)\n    };\n\n    if (options.srvHost && !options.loadBalanced) {\n      this.s.srvPoller =\n        options.srvPoller ??\n        new SrvPoller({\n          heartbeatFrequencyMS: this.s.heartbeatFrequencyMS,\n          srvHost: options.srvHost\n        });\n\n      this.on(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n    }\n  }\n\n  private detectShardedTopology(event: TopologyDescriptionChangedEvent) {\n    const previousType = event.previousDescription.type;\n    const newType = event.newDescription.type;\n\n    const transitionToSharded =\n      previousType !== TopologyType.Sharded && newType === TopologyType.Sharded;\n    const srvListeners = this.s.srvPoller?.listeners(SrvPoller.SRV_RECORD_DISCOVERY);\n    const listeningToSrvPolling = !!srvListeners?.includes(this.s.detectSrvRecords);\n\n    if (transitionToSharded && !listeningToSrvPolling) {\n      this.s.srvPoller?.on(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n      this.s.srvPoller?.start();\n    }\n  }\n\n  private detectSrvRecords(ev: SrvPollingEvent) {\n    const previousTopologyDescription = this.s.description;\n    this.s.description = this.s.description.updateFromSrvPollingEvent(ev);\n    if (this.s.description === previousTopologyDescription) {\n      // Nothing changed, so return\n      return;\n    }\n\n    updateServers(this);\n\n    this.emit(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        previousTopologyDescription,\n        this.s.description\n      )\n    );\n  }\n\n  /**\n   * @returns A `TopologyDescription` for this topology\n   */\n  get description(): TopologyDescription {\n    return this.s.description;\n  }\n\n  get loadBalanced(): boolean {\n    return this.s.options.loadBalanced;\n  }\n\n  get capabilities(): ServerCapabilities {\n    return new ServerCapabilities(this.lastIsMaster());\n  }\n\n  /** Initiate server connect */\n  connect(options?: ConnectOptions, callback?: Callback): void {\n    if (typeof options === 'function') (callback = options), (options = {});\n    options = options ?? {};\n    if (this.s.state === STATE_CONNECTED) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CONNECTING);\n\n    // emit SDAM monitoring events\n    this.emit(Topology.TOPOLOGY_OPENING, new TopologyOpeningEvent(this.s.id));\n\n    // emit an event for the topology change\n    this.emit(\n      Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n      new TopologyDescriptionChangedEvent(\n        this.s.id,\n        new TopologyDescription(TopologyType.Unknown), // initial is always Unknown\n        this.s.description\n      )\n    );\n\n    // connect all known servers, then attempt server selection to connect\n    const serverDescriptions = Array.from(this.s.description.servers.values());\n    connectServers(this, serverDescriptions);\n\n    // In load balancer mode we need to fake a server description getting\n    // emitted from the monitor, since the monitor doesn't exist.\n    if (this.s.options.loadBalanced) {\n      for (const description of serverDescriptions) {\n        const newDescription = new ServerDescription(description.hostAddress, undefined, {\n          loadBalanced: this.s.options.loadBalanced\n        });\n        this.serverUpdateHandler(newDescription);\n      }\n    }\n\n    const readPreference = options.readPreference ?? ReadPreference.primary;\n    this.selectServer(readPreferenceServerSelector(readPreference), options, (err, server) => {\n      if (err) {\n        this.close();\n\n        typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n        return;\n      }\n\n      // TODO: NODE-2471\n      if (server && this.s.credentials) {\n        server.command(ns('admin.$cmd'), { ping: 1 }, err => {\n          if (err) {\n            typeof callback === 'function' ? callback(err) : this.emit(Topology.ERROR, err);\n            return;\n          }\n\n          stateTransition(this, STATE_CONNECTED);\n          // TODO(NODE-3273) - remove err\n          this.emit(Topology.OPEN, err, this);\n          this.emit(Topology.CONNECT, this);\n\n          if (typeof callback === 'function') callback(undefined, this);\n        });\n\n        return;\n      }\n\n      stateTransition(this, STATE_CONNECTED);\n      // TODO(NODE-3273) - remove err\n      this.emit(Topology.OPEN, err, this);\n      this.emit(Topology.CONNECT, this);\n\n      if (typeof callback === 'function') callback(undefined, this);\n    });\n  }\n\n  /** Close this topology */\n  close(options?: CloseOptions, callback?: Callback): void {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    if (typeof options === 'boolean') {\n      options = { force: options };\n    }\n\n    options = options ?? {};\n    if (this.s.state === STATE_CLOSED || this.s.state === STATE_CLOSING) {\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    stateTransition(this, STATE_CLOSING);\n\n    drainWaitQueue(this[kWaitQueue], new MongoTopologyClosedError());\n    drainTimerQueue(this.s.connectionTimers);\n\n    if (this.s.srvPoller) {\n      this.s.srvPoller.stop();\n      this.s.srvPoller.removeListener(SrvPoller.SRV_RECORD_DISCOVERY, this.s.detectSrvRecords);\n    }\n\n    this.removeListener(Topology.TOPOLOGY_DESCRIPTION_CHANGED, this.s.detectShardedTopology);\n\n    eachAsync(\n      Array.from(this.s.sessions.values()),\n      (session, cb) => session.endSession(cb),\n      () => {\n        this.s.sessionPool.endAllPooledSessions(() => {\n          eachAsync(\n            Array.from(this.s.servers.values()),\n            (server, cb) => destroyServer(server, this, options, cb),\n            err => {\n              this.s.servers.clear();\n\n              // emit an event for close\n              this.emit(Topology.TOPOLOGY_CLOSED, new TopologyClosedEvent(this.s.id));\n\n              stateTransition(this, STATE_CLOSED);\n\n              if (typeof callback === 'function') {\n                callback(err);\n              }\n            }\n          );\n        });\n      }\n    );\n  }\n\n  /**\n   * Selects a server according to the selection predicate provided\n   *\n   * @param selector - An optional selector to select servers by, defaults to a random selection within a latency window\n   * @param options - Optional settings related to server selection\n   * @param callback - The callback used to indicate success or failure\n   * @returns An instance of a `Server` meeting the criteria of the predicate provided\n   */\n  selectServer(options: SelectServerOptions, callback: Callback<Server>): void;\n  selectServer(\n    selector: string | ReadPreference | ServerSelector,\n    callback: Callback<Server>\n  ): void;\n  selectServer(\n    selector: string | ReadPreference | ServerSelector,\n    options: SelectServerOptions,\n    callback: Callback<Server>\n  ): void;\n  selectServer(\n    selector: string | ReadPreference | ServerSelector | SelectServerOptions,\n    _options?: SelectServerOptions | Callback<Server>,\n    _callback?: Callback<Server>\n  ): void {\n    let options = _options as SelectServerOptions;\n    const callback = (_callback ?? _options) as Callback<Server>;\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    let serverSelector;\n    if (typeof selector !== 'function') {\n      if (typeof selector === 'string') {\n        serverSelector = readPreferenceServerSelector(ReadPreference.fromString(selector));\n      } else {\n        let readPreference;\n        if (selector instanceof ReadPreference) {\n          readPreference = selector;\n        } else {\n          ReadPreference.translate(options);\n          readPreference = options.readPreference || ReadPreference.primary;\n        }\n\n        serverSelector = readPreferenceServerSelector(readPreference as ReadPreference);\n      }\n    } else {\n      serverSelector = selector;\n    }\n\n    options = Object.assign(\n      {},\n      { serverSelectionTimeoutMS: this.s.serverSelectionTimeoutMS },\n      options\n    );\n\n    const isSharded = this.description.type === TopologyType.Sharded;\n    const session = options.session;\n    const transaction = session && session.transaction;\n\n    if (isSharded && transaction && transaction.server) {\n      callback(undefined, transaction.server);\n      return;\n    }\n\n    const waitQueueMember: ServerSelectionRequest = {\n      serverSelector,\n      transaction,\n      callback\n    };\n\n    const serverSelectionTimeoutMS = options.serverSelectionTimeoutMS;\n    if (serverSelectionTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        const timeoutError = new MongoServerSelectionError(\n          `Server selection timed out after ${serverSelectionTimeoutMS} ms`,\n          this.description\n        );\n\n        waitQueueMember.callback(timeoutError);\n      }, serverSelectionTimeoutMS);\n    }\n\n    this[kWaitQueue].push(waitQueueMember);\n    processWaitQueue(this);\n  }\n\n  // Sessions related methods\n\n  /**\n   * @returns Whether the topology should initiate selection to determine session support\n   */\n  shouldCheckForSessionSupport(): boolean {\n    if (this.description.type === TopologyType.Single) {\n      return !this.description.hasKnownServers;\n    }\n\n    return !this.description.hasDataBearingServers;\n  }\n\n  /**\n   * @returns Whether sessions are supported on the current topology\n   */\n  hasSessionSupport(): boolean {\n    return this.loadBalanced || this.description.logicalSessionTimeoutMinutes != null;\n  }\n\n  /** Start a logical session */\n  startSession(options: ClientSessionOptions, clientOptions?: MongoOptions): ClientSession {\n    const session = new ClientSession(this, this.s.sessionPool, options, clientOptions);\n    session.once('ended', () => {\n      this.s.sessions.delete(session);\n    });\n\n    this.s.sessions.add(session);\n    return session;\n  }\n\n  /** Send endSessions command(s) with the given session ids */\n  endSessions(sessions: ServerSessionId[], callback?: Callback<Document>): void {\n    if (!Array.isArray(sessions)) {\n      sessions = [sessions];\n    }\n\n    this.selectServer(\n      readPreferenceServerSelector(ReadPreference.primaryPreferred),\n      (err, server) => {\n        if (err || !server) {\n          if (typeof callback === 'function') callback(err);\n          return;\n        }\n\n        server.command(\n          ns('admin.$cmd'),\n          { endSessions: sessions },\n          { noResponse: true },\n          (err, result) => {\n            if (typeof callback === 'function') callback(err, result);\n          }\n        );\n      }\n    );\n  }\n\n  /**\n   * Update the internal TopologyDescription with a ServerDescription\n   *\n   * @param serverDescription - The server to update in the internal list of server descriptions\n   */\n  serverUpdateHandler(serverDescription: ServerDescription): void {\n    if (!this.s.description.hasServer(serverDescription.address)) {\n      return;\n    }\n\n    // ignore this server update if its from an outdated topologyVersion\n    if (isStaleServerDescription(this.s.description, serverDescription)) {\n      return;\n    }\n\n    // these will be used for monitoring events later\n    const previousTopologyDescription = this.s.description;\n    const previousServerDescription = this.s.description.servers.get(serverDescription.address);\n    if (!previousServerDescription) {\n      return;\n    }\n\n    // Driver Sessions Spec: \"Whenever a driver receives a cluster time from\n    // a server it MUST compare it to the current highest seen cluster time\n    // for the deployment. If the new cluster time is higher than the\n    // highest seen cluster time it MUST become the new highest seen cluster\n    // time. Two cluster times are compared using only the BsonTimestamp\n    // value of the clusterTime embedded field.\"\n    const clusterTime = serverDescription.$clusterTime;\n    if (clusterTime) {\n      _advanceClusterTime(this, clusterTime);\n    }\n\n    // If we already know all the information contained in this updated description, then\n    // we don't need to emit SDAM events, but still need to update the description, in order\n    // to keep client-tracked attributes like last update time and round trip time up to date\n    const equalDescriptions =\n      previousServerDescription && previousServerDescription.equals(serverDescription);\n\n    // first update the TopologyDescription\n    this.s.description = this.s.description.update(serverDescription);\n    if (this.s.description.compatibilityError) {\n      this.emit(Topology.ERROR, new MongoCompatibilityError(this.s.description.compatibilityError));\n      return;\n    }\n\n    // emit monitoring events for this change\n    if (!equalDescriptions) {\n      const newDescription = this.s.description.servers.get(serverDescription.address);\n      if (newDescription) {\n        this.emit(\n          Topology.SERVER_DESCRIPTION_CHANGED,\n          new ServerDescriptionChangedEvent(\n            this.s.id,\n            serverDescription.address,\n            previousServerDescription,\n            newDescription\n          )\n        );\n      }\n    }\n\n    // update server list from updated descriptions\n    updateServers(this, serverDescription);\n\n    // attempt to resolve any outstanding server selection attempts\n    if (this[kWaitQueue].length > 0) {\n      processWaitQueue(this);\n    }\n\n    if (!equalDescriptions) {\n      this.emit(\n        Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n        new TopologyDescriptionChangedEvent(\n          this.s.id,\n          previousTopologyDescription,\n          this.s.description\n        )\n      );\n    }\n  }\n\n  auth(credentials?: MongoCredentials, callback?: Callback): void {\n    if (typeof credentials === 'function') (callback = credentials), (credentials = undefined);\n    if (typeof callback === 'function') callback(undefined, true);\n  }\n\n  get clientMetadata(): ClientMetadata {\n    return this.s.options.metadata;\n  }\n\n  isConnected(): boolean {\n    return this.s.state === STATE_CONNECTED;\n  }\n\n  isDestroyed(): boolean {\n    return this.s.state === STATE_CLOSED;\n  }\n\n  /**\n   * @deprecated This function is deprecated and will be removed in the next major version.\n   */\n  unref(): void {\n    emitWarning('`unref` is a noop and will be removed in the next major version');\n  }\n\n  // NOTE: There are many places in code where we explicitly check the last isMaster\n  //       to do feature support detection. This should be done any other way, but for\n  //       now we will just return the first isMaster seen, which should suffice.\n  lastIsMaster(): Document {\n    const serverDescriptions = Array.from(this.description.servers.values());\n    if (serverDescriptions.length === 0) return {};\n    const sd = serverDescriptions.filter(\n      (sd: ServerDescription) => sd.type !== ServerType.Unknown\n    )[0];\n\n    const result = sd || { maxWireVersion: this.description.commonWireVersion };\n    return result;\n  }\n\n  get logicalSessionTimeoutMinutes(): number | undefined {\n    return this.description.logicalSessionTimeoutMinutes;\n  }\n\n  get clusterTime(): ClusterTime | undefined {\n    return this.s.clusterTime;\n  }\n\n  set clusterTime(clusterTime: ClusterTime | undefined) {\n    this.s.clusterTime = clusterTime;\n  }\n}\n\n/** @public */\nexport const TOPOLOGY_EVENTS = [\n  Topology.SERVER_OPENING,\n  Topology.SERVER_CLOSED,\n  Topology.SERVER_DESCRIPTION_CHANGED,\n  Topology.TOPOLOGY_OPENING,\n  Topology.TOPOLOGY_CLOSED,\n  Topology.TOPOLOGY_DESCRIPTION_CHANGED,\n  Topology.ERROR,\n  Topology.TIMEOUT,\n  Topology.CLOSE\n];\n\n/** Destroys a server, and removes all event listeners from the instance */\nfunction destroyServer(\n  server: Server,\n  topology: Topology,\n  options?: DestroyOptions,\n  callback?: Callback\n) {\n  options = options ?? {};\n  for (const event of LOCAL_SERVER_EVENTS) {\n    server.removeAllListeners(event);\n  }\n\n  server.destroy(options, () => {\n    topology.emit(\n      Topology.SERVER_CLOSED,\n      new ServerClosedEvent(topology.s.id, server.description.address)\n    );\n\n    for (const event of SERVER_RELAY_EVENTS) {\n      server.removeAllListeners(event);\n    }\n    if (typeof callback === 'function') {\n      callback();\n    }\n  });\n}\n\n/** Predicts the TopologyType from options */\nfunction topologyTypeFromOptions(options?: TopologyOptions) {\n  if (options?.directConnection) {\n    return TopologyType.Single;\n  }\n\n  if (options?.replicaSet) {\n    return TopologyType.ReplicaSetNoPrimary;\n  }\n\n  if (options?.loadBalanced) {\n    return TopologyType.LoadBalanced;\n  }\n\n  return TopologyType.Unknown;\n}\n\nfunction randomSelection(array: ServerDescription[]): ServerDescription {\n  return array[Math.floor(Math.random() * array.length)];\n}\n\n/**\n * Creates new server instances and attempts to connect them\n *\n * @param topology - The topology that this server belongs to\n * @param serverDescription - The description for the server to initialize and connect to\n * @param connectDelay - Time to wait before attempting initial connection\n */\nfunction createAndConnectServer(\n  topology: Topology,\n  serverDescription: ServerDescription,\n  connectDelay?: number\n) {\n  topology.emit(\n    Topology.SERVER_OPENING,\n    new ServerOpeningEvent(topology.s.id, serverDescription.address)\n  );\n\n  const server = new Server(topology, serverDescription, topology.s.options);\n  for (const event of SERVER_RELAY_EVENTS) {\n    server.on(event, (e: any) => topology.emit(event, e));\n  }\n\n  server.on(Server.DESCRIPTION_RECEIVED, description => topology.serverUpdateHandler(description));\n\n  if (connectDelay) {\n    const connectTimer = setTimeout(() => {\n      clearAndRemoveTimerFrom(connectTimer, topology.s.connectionTimers);\n      server.connect();\n    }, connectDelay);\n\n    topology.s.connectionTimers.add(connectTimer);\n    return server;\n  }\n\n  server.connect();\n  return server;\n}\n\n/**\n * Create `Server` instances for all initially known servers, connect them, and assign\n * them to the passed in `Topology`.\n *\n * @param topology - The topology responsible for the servers\n * @param serverDescriptions - A list of server descriptions to connect\n */\nfunction connectServers(topology: Topology, serverDescriptions: ServerDescription[]) {\n  topology.s.servers = serverDescriptions.reduce(\n    (servers: Map<string, Server>, serverDescription: ServerDescription) => {\n      const server = createAndConnectServer(topology, serverDescription);\n      servers.set(serverDescription.address, server);\n      return servers;\n    },\n    new Map<string, Server>()\n  );\n}\n\n/**\n * @param topology - Topology to update.\n * @param incomingServerDescription - New server description.\n */\nfunction updateServers(topology: Topology, incomingServerDescription?: ServerDescription) {\n  // update the internal server's description\n  if (incomingServerDescription && topology.s.servers.has(incomingServerDescription.address)) {\n    const server = topology.s.servers.get(incomingServerDescription.address);\n    if (server) {\n      server.s.description = incomingServerDescription;\n    }\n  }\n\n  // add new servers for all descriptions we currently don't know about locally\n  for (const serverDescription of topology.description.servers.values()) {\n    if (!topology.s.servers.has(serverDescription.address)) {\n      const server = createAndConnectServer(topology, serverDescription);\n      topology.s.servers.set(serverDescription.address, server);\n    }\n  }\n\n  // for all servers no longer known, remove their descriptions and destroy their instances\n  for (const entry of topology.s.servers) {\n    const serverAddress = entry[0];\n    if (topology.description.hasServer(serverAddress)) {\n      continue;\n    }\n\n    if (!topology.s.servers.has(serverAddress)) {\n      continue;\n    }\n\n    const server = topology.s.servers.get(serverAddress);\n    topology.s.servers.delete(serverAddress);\n\n    // prepare server for garbage collection\n    if (server) {\n      destroyServer(server, topology);\n    }\n  }\n}\n\nfunction drainWaitQueue(queue: Denque<ServerSelectionRequest>, err?: MongoDriverError) {\n  while (queue.length) {\n    const waitQueueMember = queue.shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    if (!waitQueueMember[kCancelled]) {\n      waitQueueMember.callback(err);\n    }\n  }\n}\n\nfunction processWaitQueue(topology: Topology) {\n  if (topology.s.state === STATE_CLOSED) {\n    drainWaitQueue(topology[kWaitQueue], new MongoTopologyClosedError());\n    return;\n  }\n\n  const isSharded = topology.description.type === TopologyType.Sharded;\n  const serverDescriptions = Array.from(topology.description.servers.values());\n  const membersToProcess = topology[kWaitQueue].length;\n  for (let i = 0; i < membersToProcess; ++i) {\n    const waitQueueMember = topology[kWaitQueue].shift();\n    if (!waitQueueMember) {\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      continue;\n    }\n\n    let selectedDescriptions;\n    try {\n      const serverSelector = waitQueueMember.serverSelector;\n      selectedDescriptions = serverSelector\n        ? serverSelector(topology.description, serverDescriptions)\n        : serverDescriptions;\n    } catch (e) {\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      waitQueueMember.callback(e);\n      continue;\n    }\n\n    if (selectedDescriptions.length === 0) {\n      topology[kWaitQueue].push(waitQueueMember);\n      continue;\n    }\n\n    const selectedServerDescription = randomSelection(selectedDescriptions);\n    const selectedServer = topology.s.servers.get(selectedServerDescription.address);\n    const transaction = waitQueueMember.transaction;\n    if (isSharded && transaction && transaction.isActive && selectedServer) {\n      transaction.pinServer(selectedServer);\n    }\n\n    if (waitQueueMember.timer) {\n      clearTimeout(waitQueueMember.timer);\n    }\n\n    waitQueueMember.callback(undefined, selectedServer);\n  }\n\n  if (topology[kWaitQueue].length > 0) {\n    // ensure all server monitors attempt monitoring soon\n    for (const [, server] of topology.s.servers) {\n      process.nextTick(function scheduleServerCheck() {\n        return server.requestCheck();\n      });\n    }\n  }\n}\n\nfunction isStaleServerDescription(\n  topologyDescription: TopologyDescription,\n  incomingServerDescription: ServerDescription\n) {\n  const currentServerDescription = topologyDescription.servers.get(\n    incomingServerDescription.address\n  );\n  const currentTopologyVersion = currentServerDescription?.topologyVersion;\n  return (\n    compareTopologyVersion(currentTopologyVersion, incomingServerDescription.topologyVersion) > 0\n  );\n}\n\n/** @public */\nexport class ServerCapabilities {\n  maxWireVersion: number;\n  minWireVersion: number;\n\n  constructor(ismaster: Document) {\n    this.minWireVersion = ismaster.minWireVersion || 0;\n    this.maxWireVersion = ismaster.maxWireVersion || 0;\n  }\n\n  get hasAggregationCursor(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasWriteCommands(): boolean {\n    return this.maxWireVersion >= 2;\n  }\n  get hasTextSearch(): boolean {\n    return this.minWireVersion >= 0;\n  }\n\n  get hasAuthCommands(): boolean {\n    return this.maxWireVersion >= 1;\n  }\n\n  get hasListCollectionsCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get hasListIndexesCommand(): boolean {\n    return this.maxWireVersion >= 3;\n  }\n\n  get supportsSnapshotReads(): boolean {\n    return this.maxWireVersion >= 13;\n  }\n\n  get commandsTakeWriteConcern(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n\n  get commandsTakeCollation(): boolean {\n    return this.maxWireVersion >= 5;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}