{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SetProfilingLevelOperation = exports.ProfilingLevel = void 0;\nconst command_1 = require(\"./command\");\nconst utils_1 = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n/** @public */\nexports.ProfilingLevel = Object.freeze({\n  off: 'off',\n  slowOnly: 'slow_only',\n  all: 'all'\n});\n/** @internal */\nclass SetProfilingLevelOperation extends command_1.CommandOperation {\n  constructor(db, level, options) {\n    super(db, options);\n    this.options = options;\n    switch (level) {\n      case exports.ProfilingLevel.off:\n        this.profile = 0;\n        break;\n      case exports.ProfilingLevel.slowOnly:\n        this.profile = 1;\n        break;\n      case exports.ProfilingLevel.all:\n        this.profile = 2;\n        break;\n      default:\n        this.profile = 0;\n        break;\n    }\n    this.level = level;\n  }\n  execute(server, session, callback) {\n    const level = this.level;\n    if (!levelValues.has(level)) {\n      return callback(new error_1.MongoInvalidArgumentError(`Profiling level must be one of \"${(0, utils_1.enumToString)(exports.ProfilingLevel)}\"`));\n    }\n    // TODO(NODE-3483): Determine error to put here\n    super.executeCommand(server, session, {\n      profile: this.profile\n    }, (err, doc) => {\n      if (err == null && doc.ok === 1) return callback(undefined, level);\n      return err != null ? callback(err) : callback(new error_1.MongoRuntimeError('Error with profile command'));\n    });\n  }\n}\nexports.SetProfilingLevelOperation = SetProfilingLevelOperation;","map":{"version":3,"names":["command_1","require","utils_1","error_1","levelValues","Set","exports","ProfilingLevel","Object","freeze","off","slowOnly","all","SetProfilingLevelOperation","CommandOperation","constructor","db","level","options","profile","execute","server","session","callback","has","MongoInvalidArgumentError","enumToString","executeCommand","err","doc","ok","undefined","MongoRuntimeError"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\mongodb\\src\\operations\\set_profiling_level.ts"],"sourcesContent":["import { CommandOperation, CommandOperationOptions } from './command';\nimport type { Callback } from '../utils';\nimport { enumToString } from '../utils';\nimport type { Server } from '../sdam/server';\nimport type { Db } from '../db';\nimport type { ClientSession } from '../sessions';\nimport { MongoRuntimeError, MongoInvalidArgumentError } from '../error';\nconst levelValues = new Set(['off', 'slow_only', 'all']);\n\n/** @public */\nexport const ProfilingLevel = Object.freeze({\n  off: 'off',\n  slowOnly: 'slow_only',\n  all: 'all'\n} as const);\n\n/** @public */\nexport type ProfilingLevel = typeof ProfilingLevel[keyof typeof ProfilingLevel];\n\n/** @public */\nexport type SetProfilingLevelOptions = CommandOperationOptions;\n\n/** @internal */\nexport class SetProfilingLevelOperation extends CommandOperation<ProfilingLevel> {\n  options: SetProfilingLevelOptions;\n  level: ProfilingLevel;\n  profile: 0 | 1 | 2;\n\n  constructor(db: Db, level: ProfilingLevel, options: SetProfilingLevelOptions) {\n    super(db, options);\n    this.options = options;\n    switch (level) {\n      case ProfilingLevel.off:\n        this.profile = 0;\n        break;\n      case ProfilingLevel.slowOnly:\n        this.profile = 1;\n        break;\n      case ProfilingLevel.all:\n        this.profile = 2;\n        break;\n      default:\n        this.profile = 0;\n        break;\n    }\n\n    this.level = level;\n  }\n\n  execute(server: Server, session: ClientSession, callback: Callback<ProfilingLevel>): void {\n    const level = this.level;\n\n    if (!levelValues.has(level)) {\n      return callback(\n        new MongoInvalidArgumentError(\n          `Profiling level must be one of \"${enumToString(ProfilingLevel)}\"`\n        )\n      );\n    }\n\n    // TODO(NODE-3483): Determine error to put here\n    super.executeCommand(server, session, { profile: this.profile }, (err, doc) => {\n      if (err == null && doc.ok === 1) return callback(undefined, level);\n      return err != null\n        ? callback(err)\n        : callback(new MongoRuntimeError('Error with profile command'));\n    });\n  }\n}\n"],"mappings":";;;;;;AAAA,MAAAA,SAAA,GAAAC,OAAA;AAEA,MAAAC,OAAA,GAAAD,OAAA;AAIA,MAAAE,OAAA,GAAAF,OAAA;AACA,MAAMG,WAAW,GAAG,IAAIC,GAAG,CAAC,CAAC,KAAK,EAAE,WAAW,EAAE,KAAK,CAAC,CAAC;AAExD;AACaC,OAAA,CAAAC,cAAc,GAAGC,MAAM,CAACC,MAAM,CAAC;EAC1CC,GAAG,EAAE,KAAK;EACVC,QAAQ,EAAE,WAAW;EACrBC,GAAG,EAAE;CACG,CAAC;AAQX;AACA,MAAaC,0BAA2B,SAAQb,SAAA,CAAAc,gBAAgC;EAK9EC,YAAYC,EAAM,EAAEC,KAAqB,EAAEC,OAAiC;IAC1E,KAAK,CAACF,EAAE,EAAEE,OAAO,CAAC;IAClB,IAAI,CAACA,OAAO,GAAGA,OAAO;IACtB,QAAQD,KAAK;MACX,KAAKX,OAAA,CAAAC,cAAc,CAACG,GAAG;QACrB,IAAI,CAACS,OAAO,GAAG,CAAC;QAChB;MACF,KAAKb,OAAA,CAAAC,cAAc,CAACI,QAAQ;QAC1B,IAAI,CAACQ,OAAO,GAAG,CAAC;QAChB;MACF,KAAKb,OAAA,CAAAC,cAAc,CAACK,GAAG;QACrB,IAAI,CAACO,OAAO,GAAG,CAAC;QAChB;MACF;QACE,IAAI,CAACA,OAAO,GAAG,CAAC;QAChB;;IAGJ,IAAI,CAACF,KAAK,GAAGA,KAAK;EACpB;EAEAG,OAAOA,CAACC,MAAc,EAAEC,OAAsB,EAAEC,QAAkC;IAChF,MAAMN,KAAK,GAAG,IAAI,CAACA,KAAK;IAExB,IAAI,CAACb,WAAW,CAACoB,GAAG,CAACP,KAAK,CAAC,EAAE;MAC3B,OAAOM,QAAQ,CACb,IAAIpB,OAAA,CAAAsB,yBAAyB,CAC3B,mCAAmC,IAAAvB,OAAA,CAAAwB,YAAY,EAACpB,OAAA,CAAAC,cAAc,CAAC,GAAG,CACnE,CACF;;IAGH;IACA,KAAK,CAACoB,cAAc,CAACN,MAAM,EAAEC,OAAO,EAAE;MAAEH,OAAO,EAAE,IAAI,CAACA;IAAO,CAAE,EAAE,CAACS,GAAG,EAAEC,GAAG,KAAI;MAC5E,IAAID,GAAG,IAAI,IAAI,IAAIC,GAAG,CAACC,EAAE,KAAK,CAAC,EAAE,OAAOP,QAAQ,CAACQ,SAAS,EAAEd,KAAK,CAAC;MAClE,OAAOW,GAAG,IAAI,IAAI,GACdL,QAAQ,CAACK,GAAG,CAAC,GACbL,QAAQ,CAAC,IAAIpB,OAAA,CAAA6B,iBAAiB,CAAC,4BAA4B,CAAC,CAAC;IACnE,CAAC,CAAC;EACJ;;AA5CF1B,OAAA,CAAAO,0BAAA,GAAAA,0BAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}