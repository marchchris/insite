{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GridFSBucketWriteStream = void 0;\nconst stream_1 = require(\"stream\");\nconst bson_1 = require(\"../bson\");\nconst error_1 = require(\"../error\");\nconst utils_1 = require(\"../utils\");\nconst write_concern_1 = require(\"./../write_concern\");\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nclass GridFSBucketWriteStream extends stream_1.Writable {\n  /** @internal\n   * @param bucket - Handle for this stream's corresponding bucket\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   */\n  constructor(bucket, filename, options) {\n    super();\n    options = options !== null && options !== void 0 ? options : {};\n    this.bucket = bucket;\n    this.chunks = bucket.s._chunksCollection;\n    this.filename = filename;\n    this.files = bucket.s._filesCollection;\n    this.options = options;\n    this.writeConcern = write_concern_1.WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n    // Signals the write is all done\n    this.done = false;\n    this.id = options.id ? options.id : new bson_1.ObjectId();\n    // properly inherit the default chunksize from parent\n    this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n    this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n    this.length = 0;\n    this.n = 0;\n    this.pos = 0;\n    this.state = {\n      streamEnd: false,\n      outstandingRequests: 0,\n      errored: false,\n      aborted: false\n    };\n    if (!this.bucket.s.calledOpenUploadStream) {\n      this.bucket.s.calledOpenUploadStream = true;\n      checkIndexes(this, () => {\n        this.bucket.s.checkedIndexes = true;\n        this.bucket.emit('index');\n      });\n    }\n  }\n  write(chunk, encodingOrCallback, callback) {\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback = typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;\n    return waitForIndexes(this, () => doWrite(this, chunk, encoding, callback));\n  }\n  abort(callback) {\n    return (0, utils_1.maybePromise)(callback, callback => {\n      if (this.state.streamEnd) {\n        // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n        return callback(new error_1.MongoAPIError('Cannot abort a stream that has already completed'));\n      }\n      if (this.state.aborted) {\n        // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n        return callback(new error_1.MongoAPIError('Cannot call abort() on a stream twice'));\n      }\n      this.state.aborted = true;\n      this.chunks.deleteMany({\n        files_id: this.id\n      }, error => callback(error));\n    });\n  }\n  end(chunkOrCallback, encodingOrCallback, callback) {\n    const chunk = typeof chunkOrCallback === 'function' ? undefined : chunkOrCallback;\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback = typeof chunkOrCallback === 'function' ? chunkOrCallback : typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;\n    if (checkAborted(this, callback)) return;\n    this.state.streamEnd = true;\n    if (callback) {\n      this.once(GridFSBucketWriteStream.FINISH, result => {\n        if (callback) callback(undefined, result);\n      });\n    }\n    if (!chunk) {\n      waitForIndexes(this, () => !!writeRemnant(this));\n      return;\n    }\n    this.write(chunk, encoding, () => {\n      writeRemnant(this);\n    });\n  }\n}\nexports.GridFSBucketWriteStream = GridFSBucketWriteStream;\n/** @event */\nGridFSBucketWriteStream.CLOSE = 'close';\n/** @event */\nGridFSBucketWriteStream.ERROR = 'error';\n/**\n * `end()` was called and the write stream successfully wrote the file metadata and all the chunks to MongoDB.\n * @event\n */\nGridFSBucketWriteStream.FINISH = 'finish';\nfunction __handleError(stream, error, callback) {\n  if (stream.state.errored) {\n    return;\n  }\n  stream.state.errored = true;\n  if (callback) {\n    return callback(error);\n  }\n  stream.emit(GridFSBucketWriteStream.ERROR, error);\n}\nfunction createChunkDoc(filesId, n, data) {\n  return {\n    _id: new bson_1.ObjectId(),\n    files_id: filesId,\n    n,\n    data\n  };\n}\nfunction checkChunksIndex(stream, callback) {\n  stream.chunks.listIndexes().toArray((error, indexes) => {\n    let index;\n    if (error) {\n      // Collection doesn't exist so create index\n      if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n        index = {\n          files_id: 1,\n          n: 1\n        };\n        stream.chunks.createIndex(index, {\n          background: false,\n          unique: true\n        }, error => {\n          if (error) {\n            return callback(error);\n          }\n          callback();\n        });\n        return;\n      }\n      return callback(error);\n    }\n    let hasChunksIndex = false;\n    if (indexes) {\n      indexes.forEach(index => {\n        if (index.key) {\n          const keys = Object.keys(index.key);\n          if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n            hasChunksIndex = true;\n          }\n        }\n      });\n    }\n    if (hasChunksIndex) {\n      callback();\n    } else {\n      index = {\n        files_id: 1,\n        n: 1\n      };\n      const writeConcernOptions = getWriteOptions(stream);\n      stream.chunks.createIndex(index, {\n        ...writeConcernOptions,\n        background: true,\n        unique: true\n      }, callback);\n    }\n  });\n}\nfunction checkDone(stream, callback) {\n  if (stream.done) return true;\n  if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n    // Set done so we do not trigger duplicate createFilesDoc\n    stream.done = true;\n    // Create a new files doc\n    const filesDoc = createFilesDoc(stream.id, stream.length, stream.chunkSizeBytes, stream.filename, stream.options.contentType, stream.options.aliases, stream.options.metadata);\n    if (checkAborted(stream, callback)) {\n      return false;\n    }\n    stream.files.insertOne(filesDoc, getWriteOptions(stream), error => {\n      if (error) {\n        return __handleError(stream, error, callback);\n      }\n      stream.emit(GridFSBucketWriteStream.FINISH, filesDoc);\n      stream.emit(GridFSBucketWriteStream.CLOSE);\n    });\n    return true;\n  }\n  return false;\n}\nfunction checkIndexes(stream, callback) {\n  stream.files.findOne({}, {\n    projection: {\n      _id: 1\n    }\n  }, (error, doc) => {\n    if (error) {\n      return callback(error);\n    }\n    if (doc) {\n      return callback();\n    }\n    stream.files.listIndexes().toArray((error, indexes) => {\n      let index;\n      if (error) {\n        // Collection doesn't exist so create index\n        if (error instanceof error_1.MongoError && error.code === error_1.MONGODB_ERROR_CODES.NamespaceNotFound) {\n          index = {\n            filename: 1,\n            uploadDate: 1\n          };\n          stream.files.createIndex(index, {\n            background: false\n          }, error => {\n            if (error) {\n              return callback(error);\n            }\n            checkChunksIndex(stream, callback);\n          });\n          return;\n        }\n        return callback(error);\n      }\n      let hasFileIndex = false;\n      if (indexes) {\n        indexes.forEach(index => {\n          const keys = Object.keys(index.key);\n          if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n            hasFileIndex = true;\n          }\n        });\n      }\n      if (hasFileIndex) {\n        checkChunksIndex(stream, callback);\n      } else {\n        index = {\n          filename: 1,\n          uploadDate: 1\n        };\n        const writeConcernOptions = getWriteOptions(stream);\n        stream.files.createIndex(index, {\n          ...writeConcernOptions,\n          background: false\n        }, error => {\n          if (error) {\n            return callback(error);\n          }\n          checkChunksIndex(stream, callback);\n        });\n      }\n    });\n  });\n}\nfunction createFilesDoc(_id, length, chunkSize, filename, contentType, aliases, metadata) {\n  const ret = {\n    _id,\n    length,\n    chunkSize,\n    uploadDate: new Date(),\n    filename\n  };\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n  return ret;\n}\nfunction doWrite(stream, chunk, encoding, callback) {\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n  const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n  stream.length += inputBuf.length;\n  // Input is small enough to fit in our buffer\n  if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n    inputBuf.copy(stream.bufToStore, stream.pos);\n    stream.pos += inputBuf.length;\n    callback && callback();\n    // Note that we reverse the typical semantics of write's return value\n    // to be compatible with node's `.pipe()` function.\n    // True means client can keep writing.\n    return true;\n  }\n  // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n  let inputBufRemaining = inputBuf.length;\n  let spaceRemaining = stream.chunkSizeBytes - stream.pos;\n  let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  let outstandingRequests = 0;\n  while (inputBufRemaining > 0) {\n    const inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n    stream.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n    let doc;\n    if (spaceRemaining === 0) {\n      doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n      ++stream.state.outstandingRequests;\n      ++outstandingRequests;\n      if (checkAborted(stream, callback)) {\n        return false;\n      }\n      stream.chunks.insertOne(doc, getWriteOptions(stream), error => {\n        if (error) {\n          return __handleError(stream, error);\n        }\n        --stream.state.outstandingRequests;\n        --outstandingRequests;\n        if (!outstandingRequests) {\n          stream.emit('drain', doc);\n          callback && callback();\n          checkDone(stream);\n        }\n      });\n      spaceRemaining = stream.chunkSizeBytes;\n      stream.pos = 0;\n      ++stream.n;\n    }\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  }\n  // Note that we reverse the typical semantics of write's return value\n  // to be compatible with node's `.pipe()` function.\n  // False means the client should wait for the 'drain' event.\n  return false;\n}\nfunction getWriteOptions(stream) {\n  const obj = {};\n  if (stream.writeConcern) {\n    obj.writeConcern = {\n      w: stream.writeConcern.w,\n      wtimeout: stream.writeConcern.wtimeout,\n      j: stream.writeConcern.j\n    };\n  }\n  return obj;\n}\nfunction waitForIndexes(stream, callback) {\n  if (stream.bucket.s.checkedIndexes) {\n    return callback(false);\n  }\n  stream.bucket.once('index', () => {\n    callback(true);\n  });\n  return true;\n}\nfunction writeRemnant(stream, callback) {\n  // Buffer is empty, so don't bother to insert\n  if (stream.pos === 0) {\n    return checkDone(stream, callback);\n  }\n  ++stream.state.outstandingRequests;\n  // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n  const remnant = Buffer.alloc(stream.pos);\n  stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n  const doc = createChunkDoc(stream.id, stream.n, remnant);\n  // If the stream was aborted, do not write remnant\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n  stream.chunks.insertOne(doc, getWriteOptions(stream), error => {\n    if (error) {\n      return __handleError(stream, error);\n    }\n    --stream.state.outstandingRequests;\n    checkDone(stream);\n  });\n  return true;\n}\nfunction checkAborted(stream, callback) {\n  if (stream.state.aborted) {\n    if (typeof callback === 'function') {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosedError\n      callback(new error_1.MongoAPIError('Stream has been aborted'));\n    }\n    return true;\n  }\n  return false;\n}","map":{"version":3,"names":["stream_1","require","bson_1","error_1","utils_1","write_concern_1","GridFSBucketWriteStream","Writable","constructor","bucket","filename","options","chunks","s","_chunksCollection","files","_filesCollection","writeConcern","WriteConcern","fromOptions","done","id","ObjectId","chunkSizeBytes","bufToStore","Buffer","alloc","length","n","pos","state","streamEnd","outstandingRequests","errored","aborted","calledOpenUploadStream","checkIndexes","checkedIndexes","emit","write","chunk","encodingOrCallback","callback","encoding","undefined","waitForIndexes","doWrite","abort","maybePromise","MongoAPIError","deleteMany","files_id","error","end","chunkOrCallback","checkAborted","once","FINISH","result","writeRemnant","exports","CLOSE","ERROR","__handleError","stream","createChunkDoc","filesId","data","_id","checkChunksIndex","listIndexes","toArray","indexes","index","MongoError","code","MONGODB_ERROR_CODES","NamespaceNotFound","createIndex","background","unique","hasChunksIndex","forEach","key","keys","Object","writeConcernOptions","getWriteOptions","checkDone","filesDoc","createFilesDoc","contentType","aliases","metadata","insertOne","findOne","projection","doc","uploadDate","hasFileIndex","chunkSize","ret","Date","inputBuf","isBuffer","from","copy","inputBufRemaining","spaceRemaining","numToCopy","Math","min","inputBufPos","obj","w","wtimeout","j","remnant"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\mongodb\\src\\gridfs\\upload.ts"],"sourcesContent":["import { Writable } from 'stream';\nimport type { Document } from '../bson';\nimport { ObjectId } from '../bson';\nimport type { Collection } from '../collection';\nimport { AnyError, MONGODB_ERROR_CODES, MongoError, MongoAPIError } from '../error';\nimport { Callback, maybePromise } from '../utils';\nimport type { WriteConcernOptions } from '../write_concern';\nimport { WriteConcern } from './../write_concern';\nimport type { GridFSFile } from './download';\nimport type { GridFSBucket } from './index';\n\n/** @public */\nexport interface GridFSChunk {\n  _id: ObjectId;\n  files_id: ObjectId;\n  n: number;\n  data: Buffer | Uint8Array;\n}\n\n/** @public */\nexport interface GridFSBucketWriteStreamOptions extends WriteConcernOptions {\n  /** Overwrite this bucket's chunkSizeBytes for this file */\n  chunkSizeBytes?: number;\n  /** Custom file id for the GridFS file. */\n  id?: ObjectId;\n  /** Object to store in the file document's `metadata` field */\n  metadata?: Document;\n  /** String to store in the file document's `contentType` field */\n  contentType?: string;\n  /** Array of strings to store in the file document's `aliases` field */\n  aliases?: string[];\n}\n\n/**\n * A writable stream that enables you to write buffers to GridFS.\n *\n * Do not instantiate this class directly. Use `openUploadStream()` instead.\n * @public\n */\nexport class GridFSBucketWriteStream extends Writable implements NodeJS.WritableStream {\n  bucket: GridFSBucket;\n  chunks: Collection<GridFSChunk>;\n  filename: string;\n  files: Collection<GridFSFile>;\n  options: GridFSBucketWriteStreamOptions;\n  done: boolean;\n  id: ObjectId;\n  chunkSizeBytes: number;\n  bufToStore: Buffer;\n  length: number;\n  n: number;\n  pos: number;\n  state: {\n    streamEnd: boolean;\n    outstandingRequests: number;\n    errored: boolean;\n    aborted: boolean;\n  };\n  writeConcern?: WriteConcern;\n\n  /** @event */\n  static readonly CLOSE = 'close';\n  /** @event */\n  static readonly ERROR = 'error';\n  /**\n   * `end()` was called and the write stream successfully wrote the file metadata and all the chunks to MongoDB.\n   * @event\n   */\n  static readonly FINISH = 'finish';\n\n  /** @internal\n   * @param bucket - Handle for this stream's corresponding bucket\n   * @param filename - The value of the 'filename' key in the files doc\n   * @param options - Optional settings.\n   */\n  constructor(bucket: GridFSBucket, filename: string, options?: GridFSBucketWriteStreamOptions) {\n    super();\n\n    options = options ?? {};\n    this.bucket = bucket;\n    this.chunks = bucket.s._chunksCollection;\n    this.filename = filename;\n    this.files = bucket.s._filesCollection;\n    this.options = options;\n    this.writeConcern = WriteConcern.fromOptions(options) || bucket.s.options.writeConcern;\n    // Signals the write is all done\n    this.done = false;\n\n    this.id = options.id ? options.id : new ObjectId();\n    // properly inherit the default chunksize from parent\n    this.chunkSizeBytes = options.chunkSizeBytes || this.bucket.s.options.chunkSizeBytes;\n    this.bufToStore = Buffer.alloc(this.chunkSizeBytes);\n    this.length = 0;\n    this.n = 0;\n    this.pos = 0;\n    this.state = {\n      streamEnd: false,\n      outstandingRequests: 0,\n      errored: false,\n      aborted: false\n    };\n\n    if (!this.bucket.s.calledOpenUploadStream) {\n      this.bucket.s.calledOpenUploadStream = true;\n\n      checkIndexes(this, () => {\n        this.bucket.s.checkedIndexes = true;\n        this.bucket.emit('index');\n      });\n    }\n  }\n\n  /**\n   * Write a buffer to the stream.\n   *\n   * @param chunk - Buffer to write\n   * @param encodingOrCallback - Optional encoding for the buffer\n   * @param callback - Function to call when the chunk was added to the buffer, or if the entire chunk was persisted to MongoDB if this chunk caused a flush.\n   * @returns False if this write required flushing a chunk to MongoDB. True otherwise.\n   */\n  write(chunk: Buffer | string): boolean;\n  write(chunk: Buffer | string, callback: Callback<void>): boolean;\n  write(chunk: Buffer | string, encoding: BufferEncoding | undefined): boolean;\n  write(\n    chunk: Buffer | string,\n    encoding: BufferEncoding | undefined,\n    callback: Callback<void>\n  ): boolean;\n  write(\n    chunk: Buffer | string,\n    encodingOrCallback?: Callback<void> | BufferEncoding,\n    callback?: Callback<void>\n  ): boolean {\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback = typeof encodingOrCallback === 'function' ? encodingOrCallback : callback;\n    return waitForIndexes(this, () => doWrite(this, chunk, encoding, callback));\n  }\n\n  // TODO(NODE-3405): Refactor this with maybePromise and MongoStreamClosedError\n  /**\n   * Places this write stream into an aborted state (all future writes fail)\n   * and deletes all chunks that have already been written.\n   *\n   * @param callback - called when chunks are successfully removed or error occurred\n   */\n  abort(): Promise<void>;\n  abort(callback: Callback<void>): void;\n  abort(callback?: Callback<void>): Promise<void> | void {\n    return maybePromise(callback, callback => {\n      if (this.state.streamEnd) {\n        // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n        return callback(new MongoAPIError('Cannot abort a stream that has already completed'));\n      }\n\n      if (this.state.aborted) {\n        // TODO(NODE-3485): Replace with MongoGridFSStreamClosed\n        return callback(new MongoAPIError('Cannot call abort() on a stream twice'));\n      }\n\n      this.state.aborted = true;\n      this.chunks.deleteMany({ files_id: this.id }, error => callback(error));\n    });\n  }\n\n  /**\n   * Tells the stream that no more data will be coming in. The stream will\n   * persist the remaining data to MongoDB, write the files document, and\n   * then emit a 'finish' event.\n   *\n   * @param chunk - Buffer to write\n   * @param encoding - Optional encoding for the buffer\n   * @param callback - Function to call when all files and chunks have been persisted to MongoDB\n   */\n  end(): void;\n  end(chunk: Buffer): void;\n  end(callback: Callback<GridFSFile | void>): void;\n  end(chunk: Buffer, callback: Callback<GridFSFile | void>): void;\n  end(chunk: Buffer, encoding: BufferEncoding): void;\n  end(\n    chunk: Buffer,\n    encoding: BufferEncoding | undefined,\n    callback: Callback<GridFSFile | void>\n  ): void;\n  end(\n    chunkOrCallback?: Buffer | Callback<GridFSFile | void>,\n    encodingOrCallback?: BufferEncoding | Callback<GridFSFile | void>,\n    callback?: Callback<GridFSFile | void>\n  ): void {\n    const chunk = typeof chunkOrCallback === 'function' ? undefined : chunkOrCallback;\n    const encoding = typeof encodingOrCallback === 'function' ? undefined : encodingOrCallback;\n    callback =\n      typeof chunkOrCallback === 'function'\n        ? chunkOrCallback\n        : typeof encodingOrCallback === 'function'\n        ? encodingOrCallback\n        : callback;\n\n    if (checkAborted(this, callback)) return;\n\n    this.state.streamEnd = true;\n\n    if (callback) {\n      this.once(GridFSBucketWriteStream.FINISH, (result: GridFSFile) => {\n        if (callback) callback(undefined, result);\n      });\n    }\n\n    if (!chunk) {\n      waitForIndexes(this, () => !!writeRemnant(this));\n      return;\n    }\n\n    this.write(chunk, encoding, () => {\n      writeRemnant(this);\n    });\n  }\n}\n\nfunction __handleError(\n  stream: GridFSBucketWriteStream,\n  error: AnyError,\n  callback?: Callback\n): void {\n  if (stream.state.errored) {\n    return;\n  }\n  stream.state.errored = true;\n  if (callback) {\n    return callback(error);\n  }\n  stream.emit(GridFSBucketWriteStream.ERROR, error);\n}\n\nfunction createChunkDoc(filesId: ObjectId, n: number, data: Buffer): GridFSChunk {\n  return {\n    _id: new ObjectId(),\n    files_id: filesId,\n    n,\n    data\n  };\n}\n\nfunction checkChunksIndex(stream: GridFSBucketWriteStream, callback: Callback): void {\n  stream.chunks.listIndexes().toArray((error?: AnyError, indexes?: Document[]) => {\n    let index: { files_id: number; n: number };\n    if (error) {\n      // Collection doesn't exist so create index\n      if (error instanceof MongoError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound) {\n        index = { files_id: 1, n: 1 };\n        stream.chunks.createIndex(index, { background: false, unique: true }, error => {\n          if (error) {\n            return callback(error);\n          }\n\n          callback();\n        });\n        return;\n      }\n      return callback(error);\n    }\n\n    let hasChunksIndex = false;\n    if (indexes) {\n      indexes.forEach((index: Document) => {\n        if (index.key) {\n          const keys = Object.keys(index.key);\n          if (keys.length === 2 && index.key.files_id === 1 && index.key.n === 1) {\n            hasChunksIndex = true;\n          }\n        }\n      });\n    }\n\n    if (hasChunksIndex) {\n      callback();\n    } else {\n      index = { files_id: 1, n: 1 };\n      const writeConcernOptions = getWriteOptions(stream);\n\n      stream.chunks.createIndex(\n        index,\n        {\n          ...writeConcernOptions,\n          background: true,\n          unique: true\n        },\n        callback\n      );\n    }\n  });\n}\n\nfunction checkDone(stream: GridFSBucketWriteStream, callback?: Callback): boolean {\n  if (stream.done) return true;\n  if (stream.state.streamEnd && stream.state.outstandingRequests === 0 && !stream.state.errored) {\n    // Set done so we do not trigger duplicate createFilesDoc\n    stream.done = true;\n    // Create a new files doc\n    const filesDoc = createFilesDoc(\n      stream.id,\n      stream.length,\n      stream.chunkSizeBytes,\n      stream.filename,\n      stream.options.contentType,\n      stream.options.aliases,\n      stream.options.metadata\n    );\n\n    if (checkAborted(stream, callback)) {\n      return false;\n    }\n\n    stream.files.insertOne(filesDoc, getWriteOptions(stream), (error?: AnyError) => {\n      if (error) {\n        return __handleError(stream, error, callback);\n      }\n      stream.emit(GridFSBucketWriteStream.FINISH, filesDoc);\n      stream.emit(GridFSBucketWriteStream.CLOSE);\n    });\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction checkIndexes(stream: GridFSBucketWriteStream, callback: Callback): void {\n  stream.files.findOne({}, { projection: { _id: 1 } }, (error, doc) => {\n    if (error) {\n      return callback(error);\n    }\n    if (doc) {\n      return callback();\n    }\n\n    stream.files.listIndexes().toArray((error?: AnyError, indexes?: Document) => {\n      let index: { filename: number; uploadDate: number };\n      if (error) {\n        // Collection doesn't exist so create index\n        if (error instanceof MongoError && error.code === MONGODB_ERROR_CODES.NamespaceNotFound) {\n          index = { filename: 1, uploadDate: 1 };\n          stream.files.createIndex(index, { background: false }, (error?: AnyError) => {\n            if (error) {\n              return callback(error);\n            }\n\n            checkChunksIndex(stream, callback);\n          });\n          return;\n        }\n        return callback(error);\n      }\n\n      let hasFileIndex = false;\n      if (indexes) {\n        indexes.forEach((index: Document) => {\n          const keys = Object.keys(index.key);\n          if (keys.length === 2 && index.key.filename === 1 && index.key.uploadDate === 1) {\n            hasFileIndex = true;\n          }\n        });\n      }\n\n      if (hasFileIndex) {\n        checkChunksIndex(stream, callback);\n      } else {\n        index = { filename: 1, uploadDate: 1 };\n\n        const writeConcernOptions = getWriteOptions(stream);\n\n        stream.files.createIndex(\n          index,\n          {\n            ...writeConcernOptions,\n            background: false\n          },\n          (error?: AnyError) => {\n            if (error) {\n              return callback(error);\n            }\n\n            checkChunksIndex(stream, callback);\n          }\n        );\n      }\n    });\n  });\n}\n\nfunction createFilesDoc(\n  _id: ObjectId,\n  length: number,\n  chunkSize: number,\n  filename: string,\n  contentType?: string,\n  aliases?: string[],\n  metadata?: Document\n): GridFSFile {\n  const ret: GridFSFile = {\n    _id,\n    length,\n    chunkSize,\n    uploadDate: new Date(),\n    filename\n  };\n\n  if (contentType) {\n    ret.contentType = contentType;\n  }\n\n  if (aliases) {\n    ret.aliases = aliases;\n  }\n\n  if (metadata) {\n    ret.metadata = metadata;\n  }\n\n  return ret;\n}\n\nfunction doWrite(\n  stream: GridFSBucketWriteStream,\n  chunk: Buffer | string,\n  encoding?: BufferEncoding,\n  callback?: Callback<void>\n): boolean {\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n\n  const inputBuf = Buffer.isBuffer(chunk) ? chunk : Buffer.from(chunk, encoding);\n\n  stream.length += inputBuf.length;\n\n  // Input is small enough to fit in our buffer\n  if (stream.pos + inputBuf.length < stream.chunkSizeBytes) {\n    inputBuf.copy(stream.bufToStore, stream.pos);\n    stream.pos += inputBuf.length;\n\n    callback && callback();\n\n    // Note that we reverse the typical semantics of write's return value\n    // to be compatible with node's `.pipe()` function.\n    // True means client can keep writing.\n    return true;\n  }\n\n  // Otherwise, buffer is too big for current chunk, so we need to flush\n  // to MongoDB.\n  let inputBufRemaining = inputBuf.length;\n  let spaceRemaining: number = stream.chunkSizeBytes - stream.pos;\n  let numToCopy = Math.min(spaceRemaining, inputBuf.length);\n  let outstandingRequests = 0;\n  while (inputBufRemaining > 0) {\n    const inputBufPos = inputBuf.length - inputBufRemaining;\n    inputBuf.copy(stream.bufToStore, stream.pos, inputBufPos, inputBufPos + numToCopy);\n    stream.pos += numToCopy;\n    spaceRemaining -= numToCopy;\n    let doc: GridFSChunk;\n    if (spaceRemaining === 0) {\n      doc = createChunkDoc(stream.id, stream.n, Buffer.from(stream.bufToStore));\n      ++stream.state.outstandingRequests;\n      ++outstandingRequests;\n\n      if (checkAborted(stream, callback)) {\n        return false;\n      }\n\n      stream.chunks.insertOne(doc, getWriteOptions(stream), (error?: AnyError) => {\n        if (error) {\n          return __handleError(stream, error);\n        }\n        --stream.state.outstandingRequests;\n        --outstandingRequests;\n\n        if (!outstandingRequests) {\n          stream.emit('drain', doc);\n          callback && callback();\n          checkDone(stream);\n        }\n      });\n\n      spaceRemaining = stream.chunkSizeBytes;\n      stream.pos = 0;\n      ++stream.n;\n    }\n    inputBufRemaining -= numToCopy;\n    numToCopy = Math.min(spaceRemaining, inputBufRemaining);\n  }\n\n  // Note that we reverse the typical semantics of write's return value\n  // to be compatible with node's `.pipe()` function.\n  // False means the client should wait for the 'drain' event.\n  return false;\n}\n\nfunction getWriteOptions(stream: GridFSBucketWriteStream): WriteConcernOptions {\n  const obj: WriteConcernOptions = {};\n  if (stream.writeConcern) {\n    obj.writeConcern = {\n      w: stream.writeConcern.w,\n      wtimeout: stream.writeConcern.wtimeout,\n      j: stream.writeConcern.j\n    };\n  }\n  return obj;\n}\n\nfunction waitForIndexes(\n  stream: GridFSBucketWriteStream,\n  callback: (res: boolean) => boolean\n): boolean {\n  if (stream.bucket.s.checkedIndexes) {\n    return callback(false);\n  }\n\n  stream.bucket.once('index', () => {\n    callback(true);\n  });\n\n  return true;\n}\n\nfunction writeRemnant(stream: GridFSBucketWriteStream, callback?: Callback): boolean {\n  // Buffer is empty, so don't bother to insert\n  if (stream.pos === 0) {\n    return checkDone(stream, callback);\n  }\n\n  ++stream.state.outstandingRequests;\n\n  // Create a new buffer to make sure the buffer isn't bigger than it needs\n  // to be.\n  const remnant = Buffer.alloc(stream.pos);\n  stream.bufToStore.copy(remnant, 0, 0, stream.pos);\n  const doc = createChunkDoc(stream.id, stream.n, remnant);\n\n  // If the stream was aborted, do not write remnant\n  if (checkAborted(stream, callback)) {\n    return false;\n  }\n\n  stream.chunks.insertOne(doc, getWriteOptions(stream), (error?: AnyError) => {\n    if (error) {\n      return __handleError(stream, error);\n    }\n    --stream.state.outstandingRequests;\n    checkDone(stream);\n  });\n  return true;\n}\n\nfunction checkAborted(stream: GridFSBucketWriteStream, callback?: Callback<void>): boolean {\n  if (stream.state.aborted) {\n    if (typeof callback === 'function') {\n      // TODO(NODE-3485): Replace with MongoGridFSStreamClosedError\n      callback(new MongoAPIError('Stream has been aborted'));\n    }\n    return true;\n  }\n  return false;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}