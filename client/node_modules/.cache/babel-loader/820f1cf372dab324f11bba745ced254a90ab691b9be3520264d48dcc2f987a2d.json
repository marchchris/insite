{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.isResumableError = exports.isNetworkTimeoutError = exports.isSDAMUnrecoverableError = exports.isNodeShuttingDownError = exports.isRetryableError = exports.isRetryableWriteError = exports.MongoWriteConcernError = exports.MongoServerSelectionError = exports.MongoSystemError = exports.MongoMissingDependencyError = exports.MongoMissingCredentialsError = exports.MongoCompatibilityError = exports.MongoInvalidArgumentError = exports.MongoParseError = exports.MongoNetworkTimeoutError = exports.MongoNetworkError = exports.isNetworkErrorBeforeHandshake = exports.MongoTopologyClosedError = exports.MongoCursorExhaustedError = exports.MongoServerClosedError = exports.MongoCursorInUseError = exports.MongoGridFSChunkError = exports.MongoGridFSStreamError = exports.MongoTailableCursorError = exports.MongoChangeStreamError = exports.MongoKerberosError = exports.MongoExpiredSessionError = exports.MongoTransactionError = exports.MongoNotConnectedError = exports.MongoDecompressionError = exports.MongoBatchReExecutionError = exports.MongoRuntimeError = exports.MongoAPIError = exports.MongoDriverError = exports.MongoServerError = exports.MongoError = exports.GET_MORE_RESUMABLE_CODES = exports.MONGODB_ERROR_CODES = void 0;\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n/** @internal MongoDB Error Codes */\nexports.MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotMaster: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotMasterNoSlaveOk: 13435,\n  NotMasterOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100\n});\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexports.GET_MORE_RESUMABLE_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ExceededTimeLimit, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotMaster, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk, exports.MONGODB_ERROR_CODES.NotMasterOrSecondary, exports.MONGODB_ERROR_CODES.StaleShardVersion, exports.MONGODB_ERROR_CODES.StaleEpoch, exports.MONGODB_ERROR_CODES.StaleConfig, exports.MONGODB_ERROR_CODES.RetryChangeStream, exports.MONGODB_ERROR_CODES.FailedToSatisfyReadPreference, exports.MONGODB_ERROR_CODES.CursorNotFound]);\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error, it uses the constructor with a string argument\n */\nclass MongoError extends Error {\n  constructor(message) {\n    if (message instanceof Error) {\n      super(message.message);\n    } else {\n      super(message);\n    }\n  }\n  get name() {\n    return 'MongoError';\n  }\n  /** Legacy name for server error responses */\n  get errmsg() {\n    return this.message;\n  }\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n  hasErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      return false;\n    }\n    return this[kErrorLabels].has(label);\n  }\n  addErrorLabel(label) {\n    if (this[kErrorLabels] == null) {\n      this[kErrorLabels] = new Set();\n    }\n    this[kErrorLabels].add(label);\n  }\n  get errorLabels() {\n    return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n  }\n}\nexports.MongoError = MongoError;\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nclass MongoServerError extends MongoError {\n  constructor(message) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n    if (message.errorLabels) {\n      this[kErrorLabels] = new Set(message.errorLabels);\n    }\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message') this[name] = message[name];\n    }\n  }\n  get name() {\n    return 'MongoServerError';\n  }\n}\nexports.MongoServerError = MongoServerError;\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nclass MongoDriverError extends MongoError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoDriverError';\n  }\n}\nexports.MongoDriverError = MongoDriverError;\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\nclass MongoAPIError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoAPIError';\n  }\n}\nexports.MongoAPIError = MongoAPIError;\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nclass MongoRuntimeError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoRuntimeError';\n  }\n}\nexports.MongoRuntimeError = MongoRuntimeError;\n/**\n * An error generated when a batch command is reexecuted after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nclass MongoBatchReExecutionError extends MongoAPIError {\n  constructor(message = 'This batch has already been executed, create new batch to execute') {\n    super(message);\n  }\n  get name() {\n    return 'MongoBatchReExecutionError';\n  }\n}\nexports.MongoBatchReExecutionError = MongoBatchReExecutionError;\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nclass MongoDecompressionError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoDecompressionError';\n  }\n}\nexports.MongoDecompressionError = MongoDecompressionError;\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nclass MongoNotConnectedError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoNotConnectedError';\n  }\n}\nexports.MongoNotConnectedError = MongoNotConnectedError;\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nclass MongoTransactionError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoTransactionError';\n  }\n}\nexports.MongoTransactionError = MongoTransactionError;\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nclass MongoExpiredSessionError extends MongoAPIError {\n  constructor(message = 'Cannot use a session that has ended') {\n    super(message);\n  }\n  get name() {\n    return 'MongoExpiredSessionError';\n  }\n}\nexports.MongoExpiredSessionError = MongoExpiredSessionError;\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nclass MongoKerberosError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoKerberosError';\n  }\n}\nexports.MongoKerberosError = MongoKerberosError;\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoChangeStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoChangeStreamError';\n  }\n}\nexports.MongoChangeStreamError = MongoChangeStreamError;\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nclass MongoTailableCursorError extends MongoAPIError {\n  constructor(message = 'Tailable cursor does not support this operation') {\n    super(message);\n  }\n  get name() {\n    return 'MongoTailableCursorError';\n  }\n}\nexports.MongoTailableCursorError = MongoTailableCursorError;\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSStreamError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoGridFSStreamError';\n  }\n}\nexports.MongoGridFSStreamError = MongoGridFSStreamError;\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nclass MongoGridFSChunkError extends MongoRuntimeError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoGridFSChunkError';\n  }\n}\nexports.MongoGridFSChunkError = MongoGridFSChunkError;\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nclass MongoCursorInUseError extends MongoAPIError {\n  constructor(message = 'Cursor is already initialized') {\n    super(message);\n  }\n  get name() {\n    return 'MongoCursorInUseError';\n  }\n}\nexports.MongoCursorInUseError = MongoCursorInUseError;\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nclass MongoServerClosedError extends MongoAPIError {\n  constructor(message = 'Server is closed') {\n    super(message);\n  }\n  get name() {\n    return 'MongoServerClosedError';\n  }\n}\nexports.MongoServerClosedError = MongoServerClosedError;\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nclass MongoCursorExhaustedError extends MongoAPIError {\n  constructor(message) {\n    super(message || 'Cursor is exhausted');\n  }\n  get name() {\n    return 'MongoCursorExhaustedError';\n  }\n}\nexports.MongoCursorExhaustedError = MongoCursorExhaustedError;\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nclass MongoTopologyClosedError extends MongoAPIError {\n  constructor(message = 'Topology is closed') {\n    super(message);\n  }\n  get name() {\n    return 'MongoTopologyClosedError';\n  }\n}\nexports.MongoTopologyClosedError = MongoTopologyClosedError;\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nfunction isNetworkErrorBeforeHandshake(err) {\n  return err[kBeforeHandshake] === true;\n}\nexports.isNetworkErrorBeforeHandshake = isNetworkErrorBeforeHandshake;\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nclass MongoNetworkError extends MongoError {\n  constructor(message, options) {\n    super(message);\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n  get name() {\n    return 'MongoNetworkError';\n  }\n}\nexports.MongoNetworkError = MongoNetworkError;\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error with an instanceof check\n */\nclass MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message, options) {\n    super(message, options);\n  }\n  get name() {\n    return 'MongoNetworkTimeoutError';\n  }\n}\nexports.MongoNetworkTimeoutError = MongoNetworkTimeoutError;\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nclass MongoParseError extends MongoDriverError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoParseError';\n  }\n}\nexports.MongoParseError = MongoParseError;\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nclass MongoInvalidArgumentError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoInvalidArgumentError';\n  }\n}\nexports.MongoInvalidArgumentError = MongoInvalidArgumentError;\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nclass MongoCompatibilityError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoCompatibilityError';\n  }\n}\nexports.MongoCompatibilityError = MongoCompatibilityError;\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nclass MongoMissingCredentialsError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoMissingCredentialsError';\n  }\n}\nexports.MongoMissingCredentialsError = MongoMissingCredentialsError;\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nclass MongoMissingDependencyError extends MongoAPIError {\n  constructor(message) {\n    super(message);\n  }\n  get name() {\n    return 'MongoMissingDependencyError';\n  }\n}\nexports.MongoMissingDependencyError = MongoMissingDependencyError;\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nclass MongoSystemError extends MongoError {\n  constructor(message, reason) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n    if (reason) {\n      this.reason = reason;\n    }\n  }\n  get name() {\n    return 'MongoSystemError';\n  }\n}\nexports.MongoSystemError = MongoSystemError;\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nclass MongoServerSelectionError extends MongoSystemError {\n  constructor(message, reason) {\n    super(message, reason);\n  }\n  get name() {\n    return 'MongoServerSelectionError';\n  }\n}\nexports.MongoServerSelectionError = MongoServerSelectionError;\nfunction makeWriteConcernResultObject(input) {\n  const output = Object.assign({}, input);\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n  return output;\n}\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nclass MongoWriteConcernError extends MongoServerError {\n  constructor(message, result) {\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n    super(message);\n    this.errInfo = message.errInfo;\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n  get name() {\n    return 'MongoWriteConcernError';\n  }\n}\nexports.MongoWriteConcernError = MongoWriteConcernError;\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.NotMaster, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk, exports.MONGODB_ERROR_CODES.NotMasterOrSecondary]);\nconst RETRYABLE_WRITE_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotMaster, exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk, exports.MONGODB_ERROR_CODES.NotMasterOrSecondary, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.HostNotFound, exports.MONGODB_ERROR_CODES.HostUnreachable, exports.MONGODB_ERROR_CODES.NetworkTimeout, exports.MONGODB_ERROR_CODES.SocketException, exports.MONGODB_ERROR_CODES.ExceededTimeLimit]);\nfunction isRetryableWriteError(error) {\n  var _a, _b, _c;\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has((_c = (_b = (_a = error.result) === null || _a === void 0 ? void 0 : _a.code) !== null && _b !== void 0 ? _b : error.code) !== null && _c !== void 0 ? _c : 0);\n  }\n  return typeof error.code === 'number' && RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\nexports.isRetryableWriteError = isRetryableWriteError;\n/** Determines whether an error is something the driver should attempt to retry */\nfunction isRetryableError(error) {\n  return (\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    typeof error.code === 'number' && RETRYABLE_ERROR_CODES.has(error.code) || error instanceof MongoNetworkError || !!error.message.match(/not master/) || !!error.message.match(/node is recovering/)\n  );\n}\nexports.isRetryableError = isRetryableError;\nconst SDAM_RECOVERING_CODES = new Set([exports.MONGODB_ERROR_CODES.ShutdownInProgress, exports.MONGODB_ERROR_CODES.PrimarySteppedDown, exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.InterruptedDueToReplStateChange, exports.MONGODB_ERROR_CODES.NotMasterOrSecondary]);\nconst SDAM_NOTMASTER_CODES = new Set([exports.MONGODB_ERROR_CODES.NotMaster, exports.MONGODB_ERROR_CODES.NotMasterNoSlaveOk, exports.MONGODB_ERROR_CODES.LegacyNotPrimary]);\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set([exports.MONGODB_ERROR_CODES.InterruptedAtShutdown, exports.MONGODB_ERROR_CODES.ShutdownInProgress]);\nfunction isRecoveringError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n  return /not master or secondary/.test(err.message) || /node is recovering/.test(err.message);\n}\nfunction isNotMasterError(err) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOTMASTER_CODES.has(err.code);\n  }\n  if (isRecoveringError(err)) {\n    return false;\n  }\n  return /not master/.test(err.message);\n}\nfunction isNodeShuttingDownError(err) {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\nexports.isNodeShuttingDownError = isNodeShuttingDownError;\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nfunction isSDAMUnrecoverableError(error) {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n  return isRecoveringError(error) || isNotMasterError(error);\n}\nexports.isSDAMUnrecoverableError = isSDAMUnrecoverableError;\nfunction isNetworkTimeoutError(err) {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\nexports.isNetworkTimeoutError = isNetworkTimeoutError;\n// From spec@https://github.com/mongodb/specifications/blob/7a2e93d85935ee4b1046a8d2ad3514c657dc74fa/source/change-streams/change-streams.rst#resumable-error:\n//\n// An error is considered resumable if it meets any of the following criteria:\n// - any error encountered which is not a server error (e.g. a timeout error or network error)\n// - any server error response from a getMore command excluding those containing the error label\n//   NonRetryableChangeStreamError and those containing the following error codes:\n//   - Interrupted: 11601\n//   - CappedPositionLost: 136\n//   - CursorKilled: 237\n//\n// An error on an aggregate command is not a resumable error. Only errors on a getMore command may be considered resumable errors.\nfunction isResumableError(error, wireVersion) {\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error && error instanceof MongoError && error.code === 43) {\n      return true;\n    }\n    return error instanceof MongoError && error.hasErrorLabel('ResumableChangeStreamError');\n  }\n  if (error && typeof error.code === 'number') {\n    return exports.GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n  return false;\n}\nexports.isResumableError = isResumableError;","map":{"version":3,"names":["kErrorLabels","Symbol","exports","MONGODB_ERROR_CODES","Object","freeze","HostUnreachable","HostNotFound","NetworkTimeout","ShutdownInProgress","PrimarySteppedDown","ExceededTimeLimit","SocketException","NotMaster","InterruptedAtShutdown","InterruptedDueToReplStateChange","NotMasterNoSlaveOk","NotMasterOrSecondary","StaleShardVersion","StaleEpoch","StaleConfig","RetryChangeStream","FailedToSatisfyReadPreference","CursorNotFound","LegacyNotPrimary","WriteConcernFailed","NamespaceNotFound","IllegalOperation","MaxTimeMSExpired","UnknownReplWriteConcern","UnsatisfiableWriteConcern","GET_MORE_RESUMABLE_CODES","Set","MongoError","Error","constructor","message","name","errmsg","hasErrorLabel","label","has","addErrorLabel","add","errorLabels","Array","from","MongoServerError","$err","MongoDriverError","MongoAPIError","MongoRuntimeError","MongoBatchReExecutionError","MongoDecompressionError","MongoNotConnectedError","MongoTransactionError","MongoExpiredSessionError","MongoKerberosError","MongoChangeStreamError","MongoTailableCursorError","MongoGridFSStreamError","MongoGridFSChunkError","MongoCursorInUseError","MongoServerClosedError","MongoCursorExhaustedError","MongoTopologyClosedError","kBeforeHandshake","isNetworkErrorBeforeHandshake","err","MongoNetworkError","options","beforeHandshake","MongoNetworkTimeoutError","MongoParseError","MongoInvalidArgumentError","MongoCompatibilityError","MongoMissingCredentialsError","MongoMissingDependencyError","MongoSystemError","reason","error","MongoServerSelectionError","makeWriteConcernResultObject","input","output","assign","ok","code","codeName","MongoWriteConcernError","result","isArray","errInfo","RETRYABLE_ERROR_CODES","RETRYABLE_WRITE_ERROR_CODES","isRetryableWriteError","_c","_b","_a","isRetryableError","match","SDAM_RECOVERING_CODES","SDAM_NOTMASTER_CODES","SDAM_NODE_SHUTTING_DOWN_ERROR_CODES","isRecoveringError","test","isNotMasterError","isNodeShuttingDownError","isSDAMUnrecoverableError","isNetworkTimeoutError","isResumableError","wireVersion"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\mongodb\\src\\error.ts"],"sourcesContent":["import type { TopologyVersion } from './sdam/server_description';\nimport type { Document } from './bson';\nimport type { TopologyDescription } from './sdam/topology_description';\n\n/** @public */\nexport type AnyError = MongoError | Error;\n\n/** @internal */\nconst kErrorLabels = Symbol('errorLabels');\n\n/** @internal MongoDB Error Codes */\nexport const MONGODB_ERROR_CODES = Object.freeze({\n  HostUnreachable: 6,\n  HostNotFound: 7,\n  NetworkTimeout: 89,\n  ShutdownInProgress: 91,\n  PrimarySteppedDown: 189,\n  ExceededTimeLimit: 262,\n  SocketException: 9001,\n  NotMaster: 10107,\n  InterruptedAtShutdown: 11600,\n  InterruptedDueToReplStateChange: 11602,\n  NotMasterNoSlaveOk: 13435,\n  NotMasterOrSecondary: 13436,\n  StaleShardVersion: 63,\n  StaleEpoch: 150,\n  StaleConfig: 13388,\n  RetryChangeStream: 234,\n  FailedToSatisfyReadPreference: 133,\n  CursorNotFound: 43,\n  LegacyNotPrimary: 10058,\n  WriteConcernFailed: 64,\n  NamespaceNotFound: 26,\n  IllegalOperation: 20,\n  MaxTimeMSExpired: 50,\n  UnknownReplWriteConcern: 79,\n  UnsatisfiableWriteConcern: 100\n} as const);\n\n// From spec@https://github.com/mongodb/specifications/blob/f93d78191f3db2898a59013a7ed5650352ef6da8/source/change-streams/change-streams.rst#resumable-error\nexport const GET_MORE_RESUMABLE_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.ExceededTimeLimit,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.NotMaster,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotMasterNoSlaveOk,\n  MONGODB_ERROR_CODES.NotMasterOrSecondary,\n  MONGODB_ERROR_CODES.StaleShardVersion,\n  MONGODB_ERROR_CODES.StaleEpoch,\n  MONGODB_ERROR_CODES.StaleConfig,\n  MONGODB_ERROR_CODES.RetryChangeStream,\n  MONGODB_ERROR_CODES.FailedToSatisfyReadPreference,\n  MONGODB_ERROR_CODES.CursorNotFound\n]);\n\n/** @public */\nexport interface ErrorDescription extends Document {\n  message?: string;\n  errmsg?: string;\n  $err?: string;\n  errorLabels?: string[];\n  errInfo?: Document;\n}\n\n/**\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error, it uses the constructor with a string argument\n */\nexport class MongoError extends Error {\n  /** @internal */\n  [kErrorLabels]: Set<string>;\n  /**\n   * This is a number in MongoServerError and a string in MongoDriverError\n   * @privateRemarks\n   * Define the type override on the subclasses when we can use the override keyword\n   */\n  code?: number | string;\n  topologyVersion?: TopologyVersion;\n\n  constructor(message: string | Error) {\n    if (message instanceof Error) {\n      super(message.message);\n    } else {\n      super(message);\n    }\n  }\n\n  get name(): string {\n    return 'MongoError';\n  }\n\n  /** Legacy name for server error responses */\n  get errmsg(): string {\n    return this.message;\n  }\n\n  /**\n   * Checks the error to see if it has an error label\n   *\n   * @param label - The error label to check for\n   * @returns returns true if the error has the provided error label\n   */\n  hasErrorLabel(label: string): boolean {\n    if (this[kErrorLabels] == null) {\n      return false;\n    }\n\n    return this[kErrorLabels].has(label);\n  }\n\n  addErrorLabel(label: string): void {\n    if (this[kErrorLabels] == null) {\n      this[kErrorLabels] = new Set();\n    }\n\n    this[kErrorLabels].add(label);\n  }\n\n  get errorLabels(): string[] {\n    return this[kErrorLabels] ? Array.from(this[kErrorLabels]) : [];\n  }\n}\n\n/**\n * An error coming from the mongo server\n *\n * @public\n * @category Error\n */\nexport class MongoServerError extends MongoError {\n  codeName?: string;\n  writeConcernError?: Document;\n  errInfo?: Document;\n  ok?: number;\n  [key: string]: any;\n\n  constructor(message: ErrorDescription) {\n    super(message.message || message.errmsg || message.$err || 'n/a');\n    if (message.errorLabels) {\n      this[kErrorLabels] = new Set(message.errorLabels);\n    }\n\n    for (const name in message) {\n      if (name !== 'errorLabels' && name !== 'errmsg' && name !== 'message')\n        this[name] = message[name];\n    }\n  }\n\n  get name(): string {\n    return 'MongoServerError';\n  }\n}\n\n/**\n * An error generated by the driver\n *\n * @public\n * @category Error\n */\nexport class MongoDriverError extends MongoError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoDriverError';\n  }\n}\n\n/**\n * An error generated when the driver API is used incorrectly\n *\n * @privateRemarks\n * Should **never** be directly instantiated\n *\n * @public\n * @category Error\n */\n\nexport class MongoAPIError extends MongoDriverError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoAPIError';\n  }\n}\n\n/**\n * An error generated when the driver encounters unexpected input\n * or reaches an unexpected/invalid internal state\n *\n * @privateRemarks\n * Should **never** be directly instantiated.\n *\n * @public\n * @category Error\n */\nexport class MongoRuntimeError extends MongoDriverError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoRuntimeError';\n  }\n}\n\n/**\n * An error generated when a batch command is reexecuted after one of the commands in the batch\n * has failed\n *\n * @public\n * @category Error\n */\nexport class MongoBatchReExecutionError extends MongoAPIError {\n  constructor(message = 'This batch has already been executed, create new batch to execute') {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoBatchReExecutionError';\n  }\n}\n\n/**\n * An error generated when the driver fails to decompress\n * data received from the server.\n *\n * @public\n * @category Error\n */\nexport class MongoDecompressionError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoDecompressionError';\n  }\n}\n\n/**\n * An error thrown when the user attempts to operate on a database or collection through a MongoClient\n * that has not yet successfully called the \"connect\" method\n *\n * @public\n * @category Error\n */\nexport class MongoNotConnectedError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoNotConnectedError';\n  }\n}\n\n/**\n * An error generated when the user makes a mistake in the usage of transactions.\n * (e.g. attempting to commit a transaction with a readPreference other than primary)\n *\n * @public\n * @category Error\n */\nexport class MongoTransactionError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoTransactionError';\n  }\n}\n\n/**\n * An error generated when the user attempts to operate\n * on a session that has expired or has been closed.\n *\n * @public\n * @category Error\n */\nexport class MongoExpiredSessionError extends MongoAPIError {\n  constructor(message = 'Cannot use a session that has ended') {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoExpiredSessionError';\n  }\n}\n\n/**\n * A error generated when the user attempts to authenticate\n * via Kerberos, but fails to connect to the Kerberos client.\n *\n * @public\n * @category Error\n */\nexport class MongoKerberosError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoKerberosError';\n  }\n}\n\n/**\n * An error generated when a ChangeStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport class MongoChangeStreamError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoChangeStreamError';\n  }\n}\n\n/**\n * An error thrown when the user calls a function or method not supported on a tailable cursor\n *\n * @public\n * @category Error\n */\nexport class MongoTailableCursorError extends MongoAPIError {\n  constructor(message = 'Tailable cursor does not support this operation') {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoTailableCursorError';\n  }\n}\n\n/** An error generated when a GridFSStream operation fails to execute.\n *\n * @public\n * @category Error\n */\nexport class MongoGridFSStreamError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoGridFSStreamError';\n  }\n}\n\n/**\n * An error generated when a malformed or invalid chunk is\n * encountered when reading from a GridFSStream.\n *\n * @public\n * @category Error\n */\nexport class MongoGridFSChunkError extends MongoRuntimeError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoGridFSChunkError';\n  }\n}\n\n/**\n * An error thrown when the user attempts to add options to a cursor that has already been\n * initialized\n *\n * @public\n * @category Error\n */\nexport class MongoCursorInUseError extends MongoAPIError {\n  constructor(message = 'Cursor is already initialized') {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoCursorInUseError';\n  }\n}\n\n/**\n * An error generated when an attempt is made to operate\n * on a closed/closing server.\n *\n * @public\n * @category Error\n */\nexport class MongoServerClosedError extends MongoAPIError {\n  constructor(message = 'Server is closed') {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoServerClosedError';\n  }\n}\n\n/**\n * An error thrown when an attempt is made to read from a cursor that has been exhausted\n *\n * @public\n * @category Error\n */\nexport class MongoCursorExhaustedError extends MongoAPIError {\n  constructor(message?: string) {\n    super(message || 'Cursor is exhausted');\n  }\n\n  get name(): string {\n    return 'MongoCursorExhaustedError';\n  }\n}\n\n/**\n * An error generated when an attempt is made to operate on a\n * dropped, or otherwise unavailable, database.\n *\n * @public\n * @category Error\n */\nexport class MongoTopologyClosedError extends MongoAPIError {\n  constructor(message = 'Topology is closed') {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoTopologyClosedError';\n  }\n}\n\n/** @internal */\nconst kBeforeHandshake = Symbol('beforeHandshake');\nexport function isNetworkErrorBeforeHandshake(err: MongoNetworkError): boolean {\n  return err[kBeforeHandshake] === true;\n}\n\n/** @public */\nexport interface MongoNetworkErrorOptions {\n  /** Indicates the timeout happened before a connection handshake completed */\n  beforeHandshake: boolean;\n}\n\n/**\n * An error indicating an issue with the network, including TCP errors and timeouts.\n * @public\n * @category Error\n */\nexport class MongoNetworkError extends MongoError {\n  /** @internal */\n  [kBeforeHandshake]?: boolean;\n\n  constructor(message: string | Error, options?: MongoNetworkErrorOptions) {\n    super(message);\n\n    if (options && typeof options.beforeHandshake === 'boolean') {\n      this[kBeforeHandshake] = options.beforeHandshake;\n    }\n  }\n\n  get name(): string {\n    return 'MongoNetworkError';\n  }\n}\n\n/**\n * An error indicating a network timeout occurred\n * @public\n * @category Error\n *\n * @privateRemarks\n * CSFLE has a dependency on this error with an instanceof check\n */\nexport class MongoNetworkTimeoutError extends MongoNetworkError {\n  constructor(message: string, options?: MongoNetworkErrorOptions) {\n    super(message, options);\n  }\n\n  get name(): string {\n    return 'MongoNetworkTimeoutError';\n  }\n}\n\n/**\n * An error used when attempting to parse a value (like a connection string)\n * @public\n * @category Error\n */\nexport class MongoParseError extends MongoDriverError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoParseError';\n  }\n}\n\n/**\n * An error generated when the user supplies malformed or unexpected arguments\n * or when a required argument or field is not provided.\n *\n *\n * @public\n * @category Error\n */\nexport class MongoInvalidArgumentError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoInvalidArgumentError';\n  }\n}\n\n/**\n * An error generated when a feature that is not enabled or allowed for the current server\n * configuration is used\n *\n *\n * @public\n * @category Error\n */\nexport class MongoCompatibilityError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoCompatibilityError';\n  }\n}\n\n/**\n * An error generated when the user fails to provide authentication credentials before attempting\n * to connect to a mongo server instance.\n *\n *\n * @public\n * @category Error\n */\nexport class MongoMissingCredentialsError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoMissingCredentialsError';\n  }\n}\n\n/**\n * An error generated when a required module or dependency is not present in the local environment\n *\n * @public\n * @category Error\n */\nexport class MongoMissingDependencyError extends MongoAPIError {\n  constructor(message: string) {\n    super(message);\n  }\n\n  get name(): string {\n    return 'MongoMissingDependencyError';\n  }\n}\n/**\n * An error signifying a general system issue\n * @public\n * @category Error\n */\nexport class MongoSystemError extends MongoError {\n  /** An optional reason context, such as an error saved during flow of monitoring and selecting servers */\n  reason?: TopologyDescription;\n\n  constructor(message: string, reason: TopologyDescription) {\n    if (reason && reason.error) {\n      super(reason.error.message || reason.error);\n    } else {\n      super(message);\n    }\n\n    if (reason) {\n      this.reason = reason;\n    }\n  }\n\n  get name(): string {\n    return 'MongoSystemError';\n  }\n}\n\n/**\n * An error signifying a client-side server selection error\n * @public\n * @category Error\n */\nexport class MongoServerSelectionError extends MongoSystemError {\n  constructor(message: string, reason: TopologyDescription) {\n    super(message, reason);\n  }\n\n  get name(): string {\n    return 'MongoServerSelectionError';\n  }\n}\n\nfunction makeWriteConcernResultObject(input: any) {\n  const output = Object.assign({}, input);\n\n  if (output.ok === 0) {\n    output.ok = 1;\n    delete output.errmsg;\n    delete output.code;\n    delete output.codeName;\n  }\n\n  return output;\n}\n\n/**\n * An error thrown when the server reports a writeConcernError\n * @public\n * @category Error\n */\nexport class MongoWriteConcernError extends MongoServerError {\n  /** The result document (provided if ok: 1) */\n  result?: Document;\n  errInfo?: Document;\n\n  constructor(message: ErrorDescription, result?: Document) {\n    if (result && Array.isArray(result.errorLabels)) {\n      message.errorLabels = result.errorLabels;\n    }\n\n    super(message);\n    this.errInfo = message.errInfo;\n\n    if (result != null) {\n      this.result = makeWriteConcernResultObject(result);\n    }\n  }\n\n  get name(): string {\n    return 'MongoWriteConcernError';\n  }\n}\n\n// see: https://github.com/mongodb/specifications/blob/master/source/retryable-writes/retryable-writes.rst#terms\nconst RETRYABLE_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.NotMaster,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotMasterNoSlaveOk,\n  MONGODB_ERROR_CODES.NotMasterOrSecondary\n]);\n\nconst RETRYABLE_WRITE_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotMaster,\n  MONGODB_ERROR_CODES.NotMasterNoSlaveOk,\n  MONGODB_ERROR_CODES.NotMasterOrSecondary,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.HostNotFound,\n  MONGODB_ERROR_CODES.HostUnreachable,\n  MONGODB_ERROR_CODES.NetworkTimeout,\n  MONGODB_ERROR_CODES.SocketException,\n  MONGODB_ERROR_CODES.ExceededTimeLimit\n]);\n\nexport function isRetryableWriteError(error: MongoError): boolean {\n  if (error instanceof MongoWriteConcernError) {\n    return RETRYABLE_WRITE_ERROR_CODES.has(error.result?.code ?? error.code ?? 0);\n  }\n  return typeof error.code === 'number' && RETRYABLE_WRITE_ERROR_CODES.has(error.code);\n}\n\n/** Determines whether an error is something the driver should attempt to retry */\nexport function isRetryableError(error: MongoError): boolean {\n  return (\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    (typeof error.code === 'number' && RETRYABLE_ERROR_CODES.has(error.code!)) ||\n    error instanceof MongoNetworkError ||\n    !!error.message.match(/not master/) ||\n    !!error.message.match(/node is recovering/)\n  );\n}\n\nconst SDAM_RECOVERING_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.ShutdownInProgress,\n  MONGODB_ERROR_CODES.PrimarySteppedDown,\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.InterruptedDueToReplStateChange,\n  MONGODB_ERROR_CODES.NotMasterOrSecondary\n]);\n\nconst SDAM_NOTMASTER_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.NotMaster,\n  MONGODB_ERROR_CODES.NotMasterNoSlaveOk,\n  MONGODB_ERROR_CODES.LegacyNotPrimary\n]);\n\nconst SDAM_NODE_SHUTTING_DOWN_ERROR_CODES = new Set<number>([\n  MONGODB_ERROR_CODES.InterruptedAtShutdown,\n  MONGODB_ERROR_CODES.ShutdownInProgress\n]);\n\nfunction isRecoveringError(err: MongoError) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_RECOVERING_CODES.has(err.code);\n  }\n\n  return /not master or secondary/.test(err.message) || /node is recovering/.test(err.message);\n}\n\nfunction isNotMasterError(err: MongoError) {\n  if (typeof err.code === 'number') {\n    // If any error code exists, we ignore the error.message\n    return SDAM_NOTMASTER_CODES.has(err.code);\n  }\n\n  if (isRecoveringError(err)) {\n    return false;\n  }\n\n  return /not master/.test(err.message);\n}\n\nexport function isNodeShuttingDownError(err: MongoError): boolean {\n  return !!(typeof err.code === 'number' && SDAM_NODE_SHUTTING_DOWN_ERROR_CODES.has(err.code));\n}\n\n/**\n * Determines whether SDAM can recover from a given error. If it cannot\n * then the pool will be cleared, and server state will completely reset\n * locally.\n *\n * @see https://github.com/mongodb/specifications/blob/master/source/server-discovery-and-monitoring/server-discovery-and-monitoring.rst#not-master-and-node-is-recovering\n */\nexport function isSDAMUnrecoverableError(error: MongoError): boolean {\n  // NOTE: null check is here for a strictly pre-CMAP world, a timeout or\n  //       close event are considered unrecoverable\n  if (error instanceof MongoParseError || error == null) {\n    return true;\n  }\n\n  return isRecoveringError(error) || isNotMasterError(error);\n}\n\nexport function isNetworkTimeoutError(err: MongoError): err is MongoNetworkError {\n  return !!(err instanceof MongoNetworkError && err.message.match(/timed out/));\n}\n\n// From spec@https://github.com/mongodb/specifications/blob/7a2e93d85935ee4b1046a8d2ad3514c657dc74fa/source/change-streams/change-streams.rst#resumable-error:\n//\n// An error is considered resumable if it meets any of the following criteria:\n// - any error encountered which is not a server error (e.g. a timeout error or network error)\n// - any server error response from a getMore command excluding those containing the error label\n//   NonRetryableChangeStreamError and those containing the following error codes:\n//   - Interrupted: 11601\n//   - CappedPositionLost: 136\n//   - CursorKilled: 237\n//\n// An error on an aggregate command is not a resumable error. Only errors on a getMore command may be considered resumable errors.\n\nexport function isResumableError(error?: MongoError, wireVersion?: number): boolean {\n  if (error instanceof MongoNetworkError) {\n    return true;\n  }\n\n  if (wireVersion != null && wireVersion >= 9) {\n    // DRIVERS-1308: For 4.4 drivers running against 4.4 servers, drivers will add a special case to treat the CursorNotFound error code as resumable\n    if (error && error instanceof MongoError && error.code === 43) {\n      return true;\n    }\n    return error instanceof MongoError && error.hasErrorLabel('ResumableChangeStreamError');\n  }\n\n  if (error && typeof error.code === 'number') {\n    return GET_MORE_RESUMABLE_CODES.has(error.code);\n  }\n  return false;\n}\n"],"mappings":";;;;;;AAOA;AACA,MAAMA,YAAY,GAAGC,MAAM,CAAC,aAAa,CAAC;AAE1C;AACaC,OAAA,CAAAC,mBAAmB,GAAGC,MAAM,CAACC,MAAM,CAAC;EAC/CC,eAAe,EAAE,CAAC;EAClBC,YAAY,EAAE,CAAC;EACfC,cAAc,EAAE,EAAE;EAClBC,kBAAkB,EAAE,EAAE;EACtBC,kBAAkB,EAAE,GAAG;EACvBC,iBAAiB,EAAE,GAAG;EACtBC,eAAe,EAAE,IAAI;EACrBC,SAAS,EAAE,KAAK;EAChBC,qBAAqB,EAAE,KAAK;EAC5BC,+BAA+B,EAAE,KAAK;EACtCC,kBAAkB,EAAE,KAAK;EACzBC,oBAAoB,EAAE,KAAK;EAC3BC,iBAAiB,EAAE,EAAE;EACrBC,UAAU,EAAE,GAAG;EACfC,WAAW,EAAE,KAAK;EAClBC,iBAAiB,EAAE,GAAG;EACtBC,6BAA6B,EAAE,GAAG;EAClCC,cAAc,EAAE,EAAE;EAClBC,gBAAgB,EAAE,KAAK;EACvBC,kBAAkB,EAAE,EAAE;EACtBC,iBAAiB,EAAE,EAAE;EACrBC,gBAAgB,EAAE,EAAE;EACpBC,gBAAgB,EAAE,EAAE;EACpBC,uBAAuB,EAAE,EAAE;EAC3BC,yBAAyB,EAAE;CACnB,CAAC;AAEX;AACa5B,OAAA,CAAA6B,wBAAwB,GAAG,IAAIC,GAAG,CAAS,CACtD9B,OAAA,CAAAC,mBAAmB,CAACG,eAAe,EACnCJ,OAAA,CAAAC,mBAAmB,CAACI,YAAY,EAChCL,OAAA,CAAAC,mBAAmB,CAACK,cAAc,EAClCN,OAAA,CAAAC,mBAAmB,CAACM,kBAAkB,EACtCP,OAAA,CAAAC,mBAAmB,CAACO,kBAAkB,EACtCR,OAAA,CAAAC,mBAAmB,CAACQ,iBAAiB,EACrCT,OAAA,CAAAC,mBAAmB,CAACS,eAAe,EACnCV,OAAA,CAAAC,mBAAmB,CAACU,SAAS,EAC7BX,OAAA,CAAAC,mBAAmB,CAACW,qBAAqB,EACzCZ,OAAA,CAAAC,mBAAmB,CAACY,+BAA+B,EACnDb,OAAA,CAAAC,mBAAmB,CAACa,kBAAkB,EACtCd,OAAA,CAAAC,mBAAmB,CAACc,oBAAoB,EACxCf,OAAA,CAAAC,mBAAmB,CAACe,iBAAiB,EACrChB,OAAA,CAAAC,mBAAmB,CAACgB,UAAU,EAC9BjB,OAAA,CAAAC,mBAAmB,CAACiB,WAAW,EAC/BlB,OAAA,CAAAC,mBAAmB,CAACkB,iBAAiB,EACrCnB,OAAA,CAAAC,mBAAmB,CAACmB,6BAA6B,EACjDpB,OAAA,CAAAC,mBAAmB,CAACoB,cAAc,CACnC,CAAC;AAWF;;;;;;;AAOA,MAAaU,UAAW,SAAQC,KAAK;EAWnCC,YAAYC,OAAuB;IACjC,IAAIA,OAAO,YAAYF,KAAK,EAAE;MAC5B,KAAK,CAACE,OAAO,CAACA,OAAO,CAAC;KACvB,MAAM;MACL,KAAK,CAACA,OAAO,CAAC;;EAElB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,YAAY;EACrB;EAEA;EACA,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAACF,OAAO;EACrB;EAEA;;;;;;EAMAG,aAAaA,CAACC,KAAa;IACzB,IAAI,IAAI,CAACxC,YAAY,CAAC,IAAI,IAAI,EAAE;MAC9B,OAAO,KAAK;;IAGd,OAAO,IAAI,CAACA,YAAY,CAAC,CAACyC,GAAG,CAACD,KAAK,CAAC;EACtC;EAEAE,aAAaA,CAACF,KAAa;IACzB,IAAI,IAAI,CAACxC,YAAY,CAAC,IAAI,IAAI,EAAE;MAC9B,IAAI,CAACA,YAAY,CAAC,GAAG,IAAIgC,GAAG,EAAE;;IAGhC,IAAI,CAAChC,YAAY,CAAC,CAAC2C,GAAG,CAACH,KAAK,CAAC;EAC/B;EAEA,IAAII,WAAWA,CAAA;IACb,OAAO,IAAI,CAAC5C,YAAY,CAAC,GAAG6C,KAAK,CAACC,IAAI,CAAC,IAAI,CAAC9C,YAAY,CAAC,CAAC,GAAG,EAAE;EACjE;;AApDFE,OAAA,CAAA+B,UAAA,GAAAA,UAAA;AAuDA;;;;;;AAMA,MAAac,gBAAiB,SAAQd,UAAU;EAO9CE,YAAYC,OAAyB;IACnC,KAAK,CAACA,OAAO,CAACA,OAAO,IAAIA,OAAO,CAACE,MAAM,IAAIF,OAAO,CAACY,IAAI,IAAI,KAAK,CAAC;IACjE,IAAIZ,OAAO,CAACQ,WAAW,EAAE;MACvB,IAAI,CAAC5C,YAAY,CAAC,GAAG,IAAIgC,GAAG,CAACI,OAAO,CAACQ,WAAW,CAAC;;IAGnD,KAAK,MAAMP,IAAI,IAAID,OAAO,EAAE;MAC1B,IAAIC,IAAI,KAAK,aAAa,IAAIA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,SAAS,EACnE,IAAI,CAACA,IAAI,CAAC,GAAGD,OAAO,CAACC,IAAI,CAAC;;EAEhC;EAEA,IAAIA,IAAIA,CAAA;IACN,OAAO,kBAAkB;EAC3B;;AArBFnC,OAAA,CAAA6C,gBAAA,GAAAA,gBAAA;AAwBA;;;;;;AAMA,MAAaE,gBAAiB,SAAQhB,UAAU;EAC9CE,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,kBAAkB;EAC3B;;AAPFnC,OAAA,CAAA+C,gBAAA,GAAAA,gBAAA;AAUA;;;;;;;;;AAUA,MAAaC,aAAc,SAAQD,gBAAgB;EACjDd,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,eAAe;EACxB;;AAPFnC,OAAA,CAAAgD,aAAA,GAAAA,aAAA;AAUA;;;;;;;;;;AAUA,MAAaC,iBAAkB,SAAQF,gBAAgB;EACrDd,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,mBAAmB;EAC5B;;AAPFnC,OAAA,CAAAiD,iBAAA,GAAAA,iBAAA;AAUA;;;;;;;AAOA,MAAaC,0BAA2B,SAAQF,aAAa;EAC3Df,YAAYC,OAAO,GAAG,mEAAmE;IACvF,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,4BAA4B;EACrC;;AAPFnC,OAAA,CAAAkD,0BAAA,GAAAA,0BAAA;AAUA;;;;;;;AAOA,MAAaC,uBAAwB,SAAQF,iBAAiB;EAC5DhB,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,yBAAyB;EAClC;;AAPFnC,OAAA,CAAAmD,uBAAA,GAAAA,uBAAA;AAUA;;;;;;;AAOA,MAAaC,sBAAuB,SAAQJ,aAAa;EACvDf,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,wBAAwB;EACjC;;AAPFnC,OAAA,CAAAoD,sBAAA,GAAAA,sBAAA;AAUA;;;;;;;AAOA,MAAaC,qBAAsB,SAAQL,aAAa;EACtDf,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,uBAAuB;EAChC;;AAPFnC,OAAA,CAAAqD,qBAAA,GAAAA,qBAAA;AAUA;;;;;;;AAOA,MAAaC,wBAAyB,SAAQN,aAAa;EACzDf,YAAYC,OAAO,GAAG,qCAAqC;IACzD,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,0BAA0B;EACnC;;AAPFnC,OAAA,CAAAsD,wBAAA,GAAAA,wBAAA;AAUA;;;;;;;AAOA,MAAaC,kBAAmB,SAAQN,iBAAiB;EACvDhB,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,oBAAoB;EAC7B;;AAPFnC,OAAA,CAAAuD,kBAAA,GAAAA,kBAAA;AAUA;;;;;;AAMA,MAAaC,sBAAuB,SAAQP,iBAAiB;EAC3DhB,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,wBAAwB;EACjC;;AAPFnC,OAAA,CAAAwD,sBAAA,GAAAA,sBAAA;AAUA;;;;;;AAMA,MAAaC,wBAAyB,SAAQT,aAAa;EACzDf,YAAYC,OAAO,GAAG,iDAAiD;IACrE,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,0BAA0B;EACnC;;AAPFnC,OAAA,CAAAyD,wBAAA,GAAAA,wBAAA;AAUA;;;;;AAKA,MAAaC,sBAAuB,SAAQT,iBAAiB;EAC3DhB,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,wBAAwB;EACjC;;AAPFnC,OAAA,CAAA0D,sBAAA,GAAAA,sBAAA;AAUA;;;;;;;AAOA,MAAaC,qBAAsB,SAAQV,iBAAiB;EAC1DhB,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,uBAAuB;EAChC;;AAPFnC,OAAA,CAAA2D,qBAAA,GAAAA,qBAAA;AAUA;;;;;;;AAOA,MAAaC,qBAAsB,SAAQZ,aAAa;EACtDf,YAAYC,OAAO,GAAG,+BAA+B;IACnD,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,uBAAuB;EAChC;;AAPFnC,OAAA,CAAA4D,qBAAA,GAAAA,qBAAA;AAUA;;;;;;;AAOA,MAAaC,sBAAuB,SAAQb,aAAa;EACvDf,YAAYC,OAAO,GAAG,kBAAkB;IACtC,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,wBAAwB;EACjC;;AAPFnC,OAAA,CAAA6D,sBAAA,GAAAA,sBAAA;AAUA;;;;;;AAMA,MAAaC,yBAA0B,SAAQd,aAAa;EAC1Df,YAAYC,OAAgB;IAC1B,KAAK,CAACA,OAAO,IAAI,qBAAqB,CAAC;EACzC;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,2BAA2B;EACpC;;AAPFnC,OAAA,CAAA8D,yBAAA,GAAAA,yBAAA;AAUA;;;;;;;AAOA,MAAaC,wBAAyB,SAAQf,aAAa;EACzDf,YAAYC,OAAO,GAAG,oBAAoB;IACxC,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,0BAA0B;EACnC;;AAPFnC,OAAA,CAAA+D,wBAAA,GAAAA,wBAAA;AAUA;AACA,MAAMC,gBAAgB,GAAGjE,MAAM,CAAC,iBAAiB,CAAC;AAClD,SAAgBkE,6BAA6BA,CAACC,GAAsB;EAClE,OAAOA,GAAG,CAACF,gBAAgB,CAAC,KAAK,IAAI;AACvC;AAFAhE,OAAA,CAAAiE,6BAAA,GAAAA,6BAAA;AAUA;;;;;AAKA,MAAaE,iBAAkB,SAAQpC,UAAU;EAI/CE,YAAYC,OAAuB,EAAEkC,OAAkC;IACrE,KAAK,CAAClC,OAAO,CAAC;IAEd,IAAIkC,OAAO,IAAI,OAAOA,OAAO,CAACC,eAAe,KAAK,SAAS,EAAE;MAC3D,IAAI,CAACL,gBAAgB,CAAC,GAAGI,OAAO,CAACC,eAAe;;EAEpD;EAEA,IAAIlC,IAAIA,CAAA;IACN,OAAO,mBAAmB;EAC5B;;AAdFnC,OAAA,CAAAmE,iBAAA,GAAAA,iBAAA;AAiBA;;;;;;;;AAQA,MAAaG,wBAAyB,SAAQH,iBAAiB;EAC7DlC,YAAYC,OAAe,EAAEkC,OAAkC;IAC7D,KAAK,CAAClC,OAAO,EAAEkC,OAAO,CAAC;EACzB;EAEA,IAAIjC,IAAIA,CAAA;IACN,OAAO,0BAA0B;EACnC;;AAPFnC,OAAA,CAAAsE,wBAAA,GAAAA,wBAAA;AAUA;;;;;AAKA,MAAaC,eAAgB,SAAQxB,gBAAgB;EACnDd,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,iBAAiB;EAC1B;;AAPFnC,OAAA,CAAAuE,eAAA,GAAAA,eAAA;AAUA;;;;;;;;AAQA,MAAaC,yBAA0B,SAAQxB,aAAa;EAC1Df,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,2BAA2B;EACpC;;AAPFnC,OAAA,CAAAwE,yBAAA,GAAAA,yBAAA;AAUA;;;;;;;;AAQA,MAAaC,uBAAwB,SAAQzB,aAAa;EACxDf,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,yBAAyB;EAClC;;AAPFnC,OAAA,CAAAyE,uBAAA,GAAAA,uBAAA;AAUA;;;;;;;;AAQA,MAAaC,4BAA6B,SAAQ1B,aAAa;EAC7Df,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,8BAA8B;EACvC;;AAPFnC,OAAA,CAAA0E,4BAAA,GAAAA,4BAAA;AAUA;;;;;;AAMA,MAAaC,2BAA4B,SAAQ3B,aAAa;EAC5Df,YAAYC,OAAe;IACzB,KAAK,CAACA,OAAO,CAAC;EAChB;EAEA,IAAIC,IAAIA,CAAA;IACN,OAAO,6BAA6B;EACtC;;AAPFnC,OAAA,CAAA2E,2BAAA,GAAAA,2BAAA;AASA;;;;;AAKA,MAAaC,gBAAiB,SAAQ7C,UAAU;EAI9CE,YAAYC,OAAe,EAAE2C,MAA2B;IACtD,IAAIA,MAAM,IAAIA,MAAM,CAACC,KAAK,EAAE;MAC1B,KAAK,CAACD,MAAM,CAACC,KAAK,CAAC5C,OAAO,IAAI2C,MAAM,CAACC,KAAK,CAAC;KAC5C,MAAM;MACL,KAAK,CAAC5C,OAAO,CAAC;;IAGhB,IAAI2C,MAAM,EAAE;MACV,IAAI,CAACA,MAAM,GAAGA,MAAM;;EAExB;EAEA,IAAI1C,IAAIA,CAAA;IACN,OAAO,kBAAkB;EAC3B;;AAlBFnC,OAAA,CAAA4E,gBAAA,GAAAA,gBAAA;AAqBA;;;;;AAKA,MAAaG,yBAA0B,SAAQH,gBAAgB;EAC7D3C,YAAYC,OAAe,EAAE2C,MAA2B;IACtD,KAAK,CAAC3C,OAAO,EAAE2C,MAAM,CAAC;EACxB;EAEA,IAAI1C,IAAIA,CAAA;IACN,OAAO,2BAA2B;EACpC;;AAPFnC,OAAA,CAAA+E,yBAAA,GAAAA,yBAAA;AAUA,SAASC,4BAA4BA,CAACC,KAAU;EAC9C,MAAMC,MAAM,GAAGhF,MAAM,CAACiF,MAAM,CAAC,EAAE,EAAEF,KAAK,CAAC;EAEvC,IAAIC,MAAM,CAACE,EAAE,KAAK,CAAC,EAAE;IACnBF,MAAM,CAACE,EAAE,GAAG,CAAC;IACb,OAAOF,MAAM,CAAC9C,MAAM;IACpB,OAAO8C,MAAM,CAACG,IAAI;IAClB,OAAOH,MAAM,CAACI,QAAQ;;EAGxB,OAAOJ,MAAM;AACf;AAEA;;;;;AAKA,MAAaK,sBAAuB,SAAQ1C,gBAAgB;EAK1DZ,YAAYC,OAAyB,EAAEsD,MAAiB;IACtD,IAAIA,MAAM,IAAI7C,KAAK,CAAC8C,OAAO,CAACD,MAAM,CAAC9C,WAAW,CAAC,EAAE;MAC/CR,OAAO,CAACQ,WAAW,GAAG8C,MAAM,CAAC9C,WAAW;;IAG1C,KAAK,CAACR,OAAO,CAAC;IACd,IAAI,CAACwD,OAAO,GAAGxD,OAAO,CAACwD,OAAO;IAE9B,IAAIF,MAAM,IAAI,IAAI,EAAE;MAClB,IAAI,CAACA,MAAM,GAAGR,4BAA4B,CAACQ,MAAM,CAAC;;EAEtD;EAEA,IAAIrD,IAAIA,CAAA;IACN,OAAO,wBAAwB;EACjC;;AApBFnC,OAAA,CAAAuF,sBAAA,GAAAA,sBAAA;AAuBA;AACA,MAAMI,qBAAqB,GAAG,IAAI7D,GAAG,CAAS,CAC5C9B,OAAA,CAAAC,mBAAmB,CAACG,eAAe,EACnCJ,OAAA,CAAAC,mBAAmB,CAACI,YAAY,EAChCL,OAAA,CAAAC,mBAAmB,CAACK,cAAc,EAClCN,OAAA,CAAAC,mBAAmB,CAACM,kBAAkB,EACtCP,OAAA,CAAAC,mBAAmB,CAACO,kBAAkB,EACtCR,OAAA,CAAAC,mBAAmB,CAACS,eAAe,EACnCV,OAAA,CAAAC,mBAAmB,CAACU,SAAS,EAC7BX,OAAA,CAAAC,mBAAmB,CAACW,qBAAqB,EACzCZ,OAAA,CAAAC,mBAAmB,CAACY,+BAA+B,EACnDb,OAAA,CAAAC,mBAAmB,CAACa,kBAAkB,EACtCd,OAAA,CAAAC,mBAAmB,CAACc,oBAAoB,CACzC,CAAC;AAEF,MAAM6E,2BAA2B,GAAG,IAAI9D,GAAG,CAAS,CAClD9B,OAAA,CAAAC,mBAAmB,CAACW,qBAAqB,EACzCZ,OAAA,CAAAC,mBAAmB,CAACY,+BAA+B,EACnDb,OAAA,CAAAC,mBAAmB,CAACU,SAAS,EAC7BX,OAAA,CAAAC,mBAAmB,CAACa,kBAAkB,EACtCd,OAAA,CAAAC,mBAAmB,CAACc,oBAAoB,EACxCf,OAAA,CAAAC,mBAAmB,CAACO,kBAAkB,EACtCR,OAAA,CAAAC,mBAAmB,CAACM,kBAAkB,EACtCP,OAAA,CAAAC,mBAAmB,CAACI,YAAY,EAChCL,OAAA,CAAAC,mBAAmB,CAACG,eAAe,EACnCJ,OAAA,CAAAC,mBAAmB,CAACK,cAAc,EAClCN,OAAA,CAAAC,mBAAmB,CAACS,eAAe,EACnCV,OAAA,CAAAC,mBAAmB,CAACQ,iBAAiB,CACtC,CAAC;AAEF,SAAgBoF,qBAAqBA,CAACf,KAAiB;;EACrD,IAAIA,KAAK,YAAYS,sBAAsB,EAAE;IAC3C,OAAOK,2BAA2B,CAACrD,GAAG,CAAC,CAAAuD,EAAA,IAAAC,EAAA,IAAAC,EAAA,GAAAlB,KAAK,CAACU,MAAM,cAAAQ,EAAA,uBAAAA,EAAA,CAAEX,IAAI,cAAAU,EAAA,cAAAA,EAAA,GAAIjB,KAAK,CAACO,IAAI,cAAAS,EAAA,cAAAA,EAAA,GAAI,CAAC,CAAC;;EAE/E,OAAO,OAAOhB,KAAK,CAACO,IAAI,KAAK,QAAQ,IAAIO,2BAA2B,CAACrD,GAAG,CAACuC,KAAK,CAACO,IAAI,CAAC;AACtF;AALArF,OAAA,CAAA6F,qBAAA,GAAAA,qBAAA;AAOA;AACA,SAAgBI,gBAAgBA,CAACnB,KAAiB;EAChD;IACE;IACC,OAAOA,KAAK,CAACO,IAAI,KAAK,QAAQ,IAAIM,qBAAqB,CAACpD,GAAG,CAACuC,KAAK,CAACO,IAAK,CAAC,IACzEP,KAAK,YAAYX,iBAAiB,IAClC,CAAC,CAACW,KAAK,CAAC5C,OAAO,CAACgE,KAAK,CAAC,YAAY,CAAC,IACnC,CAAC,CAACpB,KAAK,CAAC5C,OAAO,CAACgE,KAAK,CAAC,oBAAoB;EAAC;AAE/C;AARAlG,OAAA,CAAAiG,gBAAA,GAAAA,gBAAA;AAUA,MAAME,qBAAqB,GAAG,IAAIrE,GAAG,CAAS,CAC5C9B,OAAA,CAAAC,mBAAmB,CAACM,kBAAkB,EACtCP,OAAA,CAAAC,mBAAmB,CAACO,kBAAkB,EACtCR,OAAA,CAAAC,mBAAmB,CAACW,qBAAqB,EACzCZ,OAAA,CAAAC,mBAAmB,CAACY,+BAA+B,EACnDb,OAAA,CAAAC,mBAAmB,CAACc,oBAAoB,CACzC,CAAC;AAEF,MAAMqF,oBAAoB,GAAG,IAAItE,GAAG,CAAS,CAC3C9B,OAAA,CAAAC,mBAAmB,CAACU,SAAS,EAC7BX,OAAA,CAAAC,mBAAmB,CAACa,kBAAkB,EACtCd,OAAA,CAAAC,mBAAmB,CAACqB,gBAAgB,CACrC,CAAC;AAEF,MAAM+E,mCAAmC,GAAG,IAAIvE,GAAG,CAAS,CAC1D9B,OAAA,CAAAC,mBAAmB,CAACW,qBAAqB,EACzCZ,OAAA,CAAAC,mBAAmB,CAACM,kBAAkB,CACvC,CAAC;AAEF,SAAS+F,iBAAiBA,CAACpC,GAAe;EACxC,IAAI,OAAOA,GAAG,CAACmB,IAAI,KAAK,QAAQ,EAAE;IAChC;IACA,OAAOc,qBAAqB,CAAC5D,GAAG,CAAC2B,GAAG,CAACmB,IAAI,CAAC;;EAG5C,OAAO,yBAAyB,CAACkB,IAAI,CAACrC,GAAG,CAAChC,OAAO,CAAC,IAAI,oBAAoB,CAACqE,IAAI,CAACrC,GAAG,CAAChC,OAAO,CAAC;AAC9F;AAEA,SAASsE,gBAAgBA,CAACtC,GAAe;EACvC,IAAI,OAAOA,GAAG,CAACmB,IAAI,KAAK,QAAQ,EAAE;IAChC;IACA,OAAOe,oBAAoB,CAAC7D,GAAG,CAAC2B,GAAG,CAACmB,IAAI,CAAC;;EAG3C,IAAIiB,iBAAiB,CAACpC,GAAG,CAAC,EAAE;IAC1B,OAAO,KAAK;;EAGd,OAAO,YAAY,CAACqC,IAAI,CAACrC,GAAG,CAAChC,OAAO,CAAC;AACvC;AAEA,SAAgBuE,uBAAuBA,CAACvC,GAAe;EACrD,OAAO,CAAC,EAAE,OAAOA,GAAG,CAACmB,IAAI,KAAK,QAAQ,IAAIgB,mCAAmC,CAAC9D,GAAG,CAAC2B,GAAG,CAACmB,IAAI,CAAC,CAAC;AAC9F;AAFArF,OAAA,CAAAyG,uBAAA,GAAAA,uBAAA;AAIA;;;;;;;AAOA,SAAgBC,wBAAwBA,CAAC5B,KAAiB;EACxD;EACA;EACA,IAAIA,KAAK,YAAYP,eAAe,IAAIO,KAAK,IAAI,IAAI,EAAE;IACrD,OAAO,IAAI;;EAGb,OAAOwB,iBAAiB,CAACxB,KAAK,CAAC,IAAI0B,gBAAgB,CAAC1B,KAAK,CAAC;AAC5D;AARA9E,OAAA,CAAA0G,wBAAA,GAAAA,wBAAA;AAUA,SAAgBC,qBAAqBA,CAACzC,GAAe;EACnD,OAAO,CAAC,EAAEA,GAAG,YAAYC,iBAAiB,IAAID,GAAG,CAAChC,OAAO,CAACgE,KAAK,CAAC,WAAW,CAAC,CAAC;AAC/E;AAFAlG,OAAA,CAAA2G,qBAAA,GAAAA,qBAAA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAAgBC,gBAAgBA,CAAC9B,KAAkB,EAAE+B,WAAoB;EACvE,IAAI/B,KAAK,YAAYX,iBAAiB,EAAE;IACtC,OAAO,IAAI;;EAGb,IAAI0C,WAAW,IAAI,IAAI,IAAIA,WAAW,IAAI,CAAC,EAAE;IAC3C;IACA,IAAI/B,KAAK,IAAIA,KAAK,YAAY/C,UAAU,IAAI+C,KAAK,CAACO,IAAI,KAAK,EAAE,EAAE;MAC7D,OAAO,IAAI;;IAEb,OAAOP,KAAK,YAAY/C,UAAU,IAAI+C,KAAK,CAACzC,aAAa,CAAC,4BAA4B,CAAC;;EAGzF,IAAIyC,KAAK,IAAI,OAAOA,KAAK,CAACO,IAAI,KAAK,QAAQ,EAAE;IAC3C,OAAOrF,OAAA,CAAA6B,wBAAwB,CAACU,GAAG,CAACuC,KAAK,CAACO,IAAI,CAAC;;EAEjD,OAAO,KAAK;AACd;AAjBArF,OAAA,CAAA4G,gBAAA,GAAAA,gBAAA","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}