{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.hasSessionSupport = exports.CryptoConnection = exports.APM_EVENTS = exports.Connection = void 0;\nconst message_stream_1 = require(\"./message_stream\");\nconst stream_description_1 = require(\"./stream_description\");\nconst command_monitoring_events_1 = require(\"./command_monitoring_events\");\nconst sessions_1 = require(\"../sessions\");\nconst utils_1 = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst commands_1 = require(\"./commands\");\nconst bson_1 = require(\"../bson\");\nconst shared_1 = require(\"./wire_protocol/shared\");\nconst read_preference_1 = require(\"../read_preference\");\nconst mongo_types_1 = require(\"../mongo_types\");\n/** @internal */\nconst kStream = Symbol('stream');\n/** @internal */\nconst kQueue = Symbol('queue');\n/** @internal */\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\nconst kDescription = Symbol('description');\n/** @internal */\nconst kIsMaster = Symbol('ismaster');\n/** @internal */\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\nconst kFullResult = Symbol('fullResult');\n/** @internal */\nclass Connection extends mongo_types_1.TypedEventEmitter {\n  constructor(stream, options) {\n    var _a, _b;\n    super();\n    this.id = options.id;\n    this.address = streamIdentifier(stream);\n    this.socketTimeoutMS = (_a = options.socketTimeoutMS) !== null && _a !== void 0 ? _a : 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.closed = false;\n    this.destroyed = false;\n    this[kDescription] = new stream_description_1.StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = (0, utils_1.now)();\n    // setup parser stream and message handling\n    this[kQueue] = new Map();\n    this[kMessageStream] = new message_stream_1.MessageStream({\n      ...options,\n      maxBsonMessageSize: (_b = this.ismaster) === null || _b === void 0 ? void 0 : _b.maxBsonMessageSize\n    });\n    this[kMessageStream].on('message', messageHandler(this));\n    this[kStream] = stream;\n    stream.on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    });\n    this[kMessageStream].on('error', error => this.handleIssue({\n      destroy: error\n    }));\n    stream.on('close', () => this.handleIssue({\n      isClose: true\n    }));\n    stream.on('timeout', () => this.handleIssue({\n      isTimeout: true,\n      destroy: true\n    }));\n    // hook the message stream up to the passed in stream\n    stream.pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(stream);\n  }\n  get description() {\n    return this[kDescription];\n  }\n  get ismaster() {\n    return this[kIsMaster];\n  }\n  // the `connect` method stores the result of the handshake ismaster on the connection\n  set ismaster(response) {\n    this[kDescription].receiveResponse(response);\n    this[kDescription] = Object.freeze(this[kDescription]);\n    // TODO: remove this, and only use the `StreamDescription` in the future\n    this[kIsMaster] = response;\n  }\n  get serviceId() {\n    var _a;\n    return (_a = this.ismaster) === null || _a === void 0 ? void 0 : _a.serviceId;\n  }\n  get loadBalanced() {\n    return this.description.loadBalanced;\n  }\n  get generation() {\n    return this[kGeneration] || 0;\n  }\n  set generation(generation) {\n    this[kGeneration] = generation;\n  }\n  get idleTime() {\n    return (0, utils_1.calculateDurationInMs)(this[kLastUseTime]);\n  }\n  get clusterTime() {\n    return this[kClusterTime];\n  }\n  get stream() {\n    return this[kStream];\n  }\n  markAvailable() {\n    this[kLastUseTime] = (0, utils_1.now)();\n  }\n  handleIssue(issue) {\n    if (this.closed) {\n      return;\n    }\n    if (issue.destroy) {\n      this[kStream].destroy(typeof issue.destroy === 'boolean' ? undefined : issue.destroy);\n    }\n    this.closed = true;\n    for (const [, op] of this[kQueue]) {\n      if (issue.isTimeout) {\n        op.cb(new error_1.MongoNetworkTimeoutError(`connection ${this.id} to ${this.address} timed out`, {\n          beforeHandshake: this.ismaster == null\n        }));\n      } else if (issue.isClose) {\n        op.cb(new error_1.MongoNetworkError(`connection ${this.id} to ${this.address} closed`));\n      } else {\n        op.cb(typeof issue.destroy === 'boolean' ? undefined : issue.destroy);\n      }\n    }\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n  destroy(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {\n        force: false\n      };\n    }\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n    options = Object.assign({\n      force: false\n    }, options);\n    if (this[kStream] == null || this.destroyed) {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    if (options.force) {\n      this[kStream].destroy();\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n      return;\n    }\n    this[kStream].end(() => {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n    });\n  }\n  /** @internal */\n  command(ns, cmd, options, callback) {\n    if (!(ns instanceof utils_1.MongoDBNamespace)) {\n      // TODO(NODE-3483): Replace this with a MongoCommandError\n      throw new error_1.MongoRuntimeError('Must provide a MongoDBNamespace instance');\n    }\n    const readPreference = (0, shared_1.getReadPreference)(cmd, options);\n    const shouldUseOpMsg = supportsOpMsg(this);\n    const session = options === null || options === void 0 ? void 0 : options.session;\n    let clusterTime = this.clusterTime;\n    let finalCmd = Object.assign({}, cmd);\n    if (this.serverApi) {\n      const {\n        version,\n        strict,\n        deprecationErrors\n      } = this.serverApi;\n      finalCmd.apiVersion = version;\n      if (strict != null) finalCmd.apiStrict = strict;\n      if (deprecationErrors != null) finalCmd.apiDeprecationErrors = deprecationErrors;\n    }\n    if (hasSessionSupport(this) && session) {\n      if (session.clusterTime && clusterTime && session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)) {\n        clusterTime = session.clusterTime;\n      }\n      const err = (0, sessions_1.applySession)(session, finalCmd, options);\n      if (err) {\n        return callback(err);\n      }\n    }\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      finalCmd.$clusterTime = clusterTime;\n    }\n    if ((0, shared_1.isSharded)(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n      finalCmd = {\n        $query: finalCmd,\n        $readPreference: readPreference.toJSON()\n      };\n    }\n    const commandOptions = Object.assign({\n      command: true,\n      numberToSkip: 0,\n      numberToReturn: -1,\n      checkKeys: false,\n      // This value is not overridable\n      slaveOk: readPreference.slaveOk()\n    }, options);\n    const cmdNs = `${ns.db}.$cmd`;\n    const message = shouldUseOpMsg ? new commands_1.Msg(cmdNs, finalCmd, commandOptions) : new commands_1.Query(cmdNs, finalCmd, commandOptions);\n    try {\n      write(this, message, commandOptions, callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n  /** @internal */\n  query(ns, cmd, options, callback) {\n    var _a;\n    const isExplain = cmd.$explain != null;\n    const readPreference = (_a = options.readPreference) !== null && _a !== void 0 ? _a : read_preference_1.ReadPreference.primary;\n    const batchSize = options.batchSize || 0;\n    const limit = options.limit;\n    const numberToSkip = options.skip || 0;\n    let numberToReturn = 0;\n    if (limit && (limit < 0 || limit !== 0 && limit < batchSize || limit > 0 && batchSize === 0)) {\n      numberToReturn = limit;\n    } else {\n      numberToReturn = batchSize;\n    }\n    if (isExplain) {\n      // nToReturn must be 0 (match all) or negative (match N and close cursor)\n      // nToReturn > 0 will give explain results equivalent to limit(0)\n      numberToReturn = -Math.abs(limit || 0);\n    }\n    const queryOptions = {\n      numberToSkip,\n      numberToReturn,\n      pre32Limit: typeof limit === 'number' ? limit : undefined,\n      checkKeys: false,\n      slaveOk: readPreference.slaveOk()\n    };\n    if (options.projection) {\n      queryOptions.returnFieldSelector = options.projection;\n    }\n    const query = new commands_1.Query(ns.toString(), cmd, queryOptions);\n    if (typeof options.tailable === 'boolean') {\n      query.tailable = options.tailable;\n    }\n    if (typeof options.oplogReplay === 'boolean') {\n      query.oplogReplay = options.oplogReplay;\n    }\n    if (typeof options.timeout === 'boolean') {\n      query.noCursorTimeout = !options.timeout;\n    } else if (typeof options.noCursorTimeout === 'boolean') {\n      query.noCursorTimeout = options.noCursorTimeout;\n    }\n    if (typeof options.awaitData === 'boolean') {\n      query.awaitData = options.awaitData;\n    }\n    if (typeof options.partial === 'boolean') {\n      query.partial = options.partial;\n    }\n    write(this, query, {\n      [kFullResult]: true,\n      ...(0, bson_1.pluckBSONSerializeOptions)(options)\n    }, (err, result) => {\n      if (err || !result) return callback(err, result);\n      if (isExplain && result.documents && result.documents[0]) {\n        return callback(undefined, result.documents[0]);\n      }\n      callback(undefined, result);\n    });\n  }\n  /** @internal */\n  getMore(ns, cursorId, options, callback) {\n    const fullResult = !!options[kFullResult];\n    const wireVersion = (0, utils_1.maxWireVersion)(this);\n    if (!cursorId) {\n      // TODO(NODE-3483): Replace this with a MongoCommandError\n      callback(new error_1.MongoRuntimeError('Invalid internal cursor state, no known cursor id'));\n      return;\n    }\n    if (wireVersion < 4) {\n      const getMoreOp = new commands_1.GetMore(ns.toString(), cursorId, {\n        numberToReturn: options.batchSize\n      });\n      const queryOptions = (0, shared_1.applyCommonQueryOptions)({}, Object.assign(options, {\n        ...(0, bson_1.pluckBSONSerializeOptions)(options)\n      }));\n      queryOptions[kFullResult] = true;\n      queryOptions.command = true;\n      write(this, getMoreOp, queryOptions, (err, response) => {\n        if (fullResult) return callback(err, response);\n        if (err) return callback(err);\n        callback(undefined, {\n          cursor: {\n            id: response.cursorId,\n            nextBatch: response.documents\n          }\n        });\n      });\n      return;\n    }\n    const getMoreCmd = {\n      getMore: cursorId,\n      collection: ns.collection\n    };\n    if (typeof options.batchSize === 'number') {\n      getMoreCmd.batchSize = Math.abs(options.batchSize);\n    }\n    if (typeof options.maxAwaitTimeMS === 'number') {\n      getMoreCmd.maxTimeMS = options.maxAwaitTimeMS;\n    }\n    const commandOptions = Object.assign({\n      returnFieldSelector: null,\n      documentsReturnedIn: 'nextBatch'\n    }, options);\n    this.command(ns, getMoreCmd, commandOptions, callback);\n  }\n  /** @internal */\n  killCursors(ns, cursorIds, options, callback) {\n    if (!cursorIds || !Array.isArray(cursorIds)) {\n      // TODO(NODE-3483): Replace this with a MongoCommandError\n      throw new error_1.MongoRuntimeError(`Invalid list of cursor ids provided: ${cursorIds}`);\n    }\n    if ((0, utils_1.maxWireVersion)(this) < 4) {\n      try {\n        write(this, new commands_1.KillCursor(ns.toString(), cursorIds), {\n          noResponse: true,\n          ...options\n        }, callback);\n      } catch (err) {\n        callback(err);\n      }\n      return;\n    }\n    this.command(ns, {\n      killCursors: ns.collection,\n      cursors: cursorIds\n    }, {\n      [kFullResult]: true,\n      ...options\n    }, (err, response) => {\n      if (err || !response) return callback(err);\n      if (response.cursorNotFound) {\n        return callback(new error_1.MongoNetworkError('cursor killed or timed out'), null);\n      }\n      if (!Array.isArray(response.documents) || response.documents.length === 0) {\n        return callback(\n        // TODO(NODE-3483)\n        new error_1.MongoRuntimeError(`invalid killCursors result returned for cursor id ${cursorIds[0]}`));\n      }\n      callback(undefined, response.documents[0]);\n    });\n  }\n}\nexports.Connection = Connection;\n/** @event */\nConnection.COMMAND_STARTED = 'commandStarted';\n/** @event */\nConnection.COMMAND_SUCCEEDED = 'commandSucceeded';\n/** @event */\nConnection.COMMAND_FAILED = 'commandFailed';\n/** @event */\nConnection.CLUSTER_TIME_RECEIVED = 'clusterTimeReceived';\n/** @event */\nConnection.CLOSE = 'close';\n/** @event */\nConnection.MESSAGE = 'message';\n/** @event */\nConnection.PINNED = 'pinned';\n/** @event */\nConnection.UNPINNED = 'unpinned';\n/** @public */\nexports.APM_EVENTS = [Connection.COMMAND_STARTED, Connection.COMMAND_SUCCEEDED, Connection.COMMAND_FAILED];\n/** @internal */\nclass CryptoConnection extends Connection {\n  constructor(stream, options) {\n    super(stream, options);\n    this[kAutoEncrypter] = options.autoEncrypter;\n  }\n  /** @internal @override */\n  command(ns, cmd, options, callback) {\n    const autoEncrypter = this[kAutoEncrypter];\n    if (!autoEncrypter) {\n      return callback(new error_1.MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n    }\n    const serverWireVersion = (0, utils_1.maxWireVersion)(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options, callback);\n    }\n    if (serverWireVersion < 8) {\n      callback(new error_1.MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2'));\n      return;\n    }\n    autoEncrypter.encrypt(ns.toString(), cmd, options, (err, encrypted) => {\n      if (err || encrypted == null) {\n        callback(err, null);\n        return;\n      }\n      super.command(ns, encrypted, options, (err, response) => {\n        if (err || response == null) {\n          callback(err, response);\n          return;\n        }\n        autoEncrypter.decrypt(response, options, callback);\n      });\n    });\n  }\n}\nexports.CryptoConnection = CryptoConnection;\n/** @internal */\nfunction hasSessionSupport(conn) {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null || !!description.loadBalanced;\n}\nexports.hasSessionSupport = hasSessionSupport;\nfunction supportsOpMsg(conn) {\n  const description = conn.description;\n  if (description == null) {\n    return false;\n  }\n  return (0, utils_1.maxWireVersion)(conn) >= 6 && !description.__nodejs_mock_server__;\n}\nfunction messageHandler(conn) {\n  return function messageHandler(message) {\n    // always emit the message, in case we are streaming\n    conn.emit('message', message);\n    const operationDescription = conn[kQueue].get(message.responseTo);\n    if (!operationDescription) {\n      return;\n    }\n    const callback = operationDescription.cb;\n    // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n    conn[kQueue].delete(message.responseTo);\n    if ('moreToCome' in message && message.moreToCome) {\n      // requeue the callback for next synthetic request\n      conn[kQueue].set(message.requestId, operationDescription);\n    } else if (operationDescription.socketTimeoutOverride) {\n      conn[kStream].setTimeout(conn.socketTimeoutMS);\n    }\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      // If this error is generated by our own code, it will already have the correct class applied\n      // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n      // in either case, it should not be wrapped\n      callback(err);\n      return;\n    }\n    if (message.documents[0]) {\n      const document = message.documents[0];\n      const session = operationDescription.session;\n      if (session) {\n        (0, sessions_1.updateSessionFromResponse)(session, document);\n      }\n      if (document.$clusterTime) {\n        conn[kClusterTime] = document.$clusterTime;\n        conn.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n      }\n      if (operationDescription.command) {\n        if (document.writeConcernError) {\n          callback(new error_1.MongoWriteConcernError(document.writeConcernError, document));\n          return;\n        }\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n          callback(new error_1.MongoServerError(document));\n          return;\n        }\n      } else {\n        // Pre 3.2 support\n        if (document.ok === 0 || document.$err || document.errmsg) {\n          callback(new error_1.MongoServerError(document));\n          return;\n        }\n      }\n    }\n    callback(undefined, operationDescription.fullResult ? message : message.documents[0]);\n  };\n}\nfunction streamIdentifier(stream) {\n  if (typeof stream.address === 'function') {\n    return `${stream.remoteAddress}:${stream.remotePort}`;\n  }\n  return (0, utils_1.uuidV4)().toString('hex');\n}\nfunction write(conn, command, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n  }\n  options = options !== null && options !== void 0 ? options : {};\n  const operationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    fullResult: !!options[kFullResult],\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n    command: !!options.command,\n    // for BSON parsing\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    started: 0\n  };\n  if (conn[kDescription] && conn[kDescription].compressor) {\n    operationDescription.agreedCompressor = conn[kDescription].compressor;\n    if (conn[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n    }\n  }\n  if (typeof options.socketTimeoutMS === 'number') {\n    operationDescription.socketTimeoutOverride = true;\n    conn[kStream].setTimeout(options.socketTimeoutMS);\n  }\n  // if command monitoring is enabled we need to modify the callback here\n  if (conn.monitorCommands) {\n    conn.emit(Connection.COMMAND_STARTED, new command_monitoring_events_1.CommandStartedEvent(conn, command));\n    operationDescription.started = (0, utils_1.now)();\n    operationDescription.cb = (err, reply) => {\n      if (err) {\n        conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, err, operationDescription.started));\n      } else {\n        if (reply && (reply.ok === 0 || reply.$err)) {\n          conn.emit(Connection.COMMAND_FAILED, new command_monitoring_events_1.CommandFailedEvent(conn, command, reply, operationDescription.started));\n        } else {\n          conn.emit(Connection.COMMAND_SUCCEEDED, new command_monitoring_events_1.CommandSucceededEvent(conn, command, reply, operationDescription.started));\n        }\n      }\n      if (typeof callback === 'function') {\n        callback(err, reply);\n      }\n    };\n  }\n  if (!operationDescription.noResponse) {\n    conn[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n  try {\n    conn[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      conn[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}","map":{"version":3,"names":["message_stream_1","require","stream_description_1","command_monitoring_events_1","sessions_1","utils_1","error_1","commands_1","bson_1","shared_1","read_preference_1","mongo_types_1","kStream","Symbol","kQueue","kMessageStream","kGeneration","kLastUseTime","kClusterTime","kDescription","kIsMaster","kAutoEncrypter","kFullResult","Connection","TypedEventEmitter","constructor","stream","options","id","address","streamIdentifier","socketTimeoutMS","_a","monitorCommands","serverApi","closed","destroyed","StreamDescription","generation","now","Map","MessageStream","maxBsonMessageSize","_b","ismaster","on","messageHandler","error","handleIssue","destroy","isClose","isTimeout","pipe","description","response","receiveResponse","Object","freeze","serviceId","loadBalanced","idleTime","calculateDurationInMs","clusterTime","markAvailable","issue","undefined","op","cb","MongoNetworkTimeoutError","beforeHandshake","MongoNetworkError","clear","emit","CLOSE","callback","force","removeAllListeners","PINNED","UNPINNED","assign","end","command","ns","cmd","MongoDBNamespace","MongoRuntimeError","readPreference","getReadPreference","shouldUseOpMsg","supportsOpMsg","session","finalCmd","version","strict","deprecationErrors","apiVersion","apiStrict","apiDeprecationErrors","hasSessionSupport","greaterThan","err","applySession","$clusterTime","isSharded","mode","$query","$readPreference","toJSON","commandOptions","numberToSkip","numberToReturn","checkKeys","slaveOk","cmdNs","db","message","Msg","Query","write","query","isExplain","$explain","ReadPreference","primary","batchSize","limit","skip","Math","abs","queryOptions","pre32Limit","projection","returnFieldSelector","toString","tailable","oplogReplay","timeout","noCursorTimeout","awaitData","partial","pluckBSONSerializeOptions","result","documents","getMore","cursorId","fullResult","wireVersion","maxWireVersion","getMoreOp","GetMore","applyCommonQueryOptions","cursor","nextBatch","getMoreCmd","collection","maxAwaitTimeMS","maxTimeMS","documentsReturnedIn","killCursors","cursorIds","Array","isArray","KillCursor","noResponse","cursors","cursorNotFound","length","exports","COMMAND_STARTED","COMMAND_SUCCEEDED","COMMAND_FAILED","CLUSTER_TIME_RECEIVED","MESSAGE","APM_EVENTS","CryptoConnection","autoEncrypter","MongoMissingDependencyError","serverWireVersion","MongoCompatibilityError","encrypt","encrypted","decrypt","conn","logicalSessionTimeoutMinutes","__nodejs_mock_server__","operationDescription","get","responseTo","delete","moreToCome","set","requestId","socketTimeoutOverride","setTimeout","parse","document","updateSessionFromResponse","writeConcernError","MongoWriteConcernError","ok","$err","errmsg","code","MongoServerError","remoteAddress","remotePort","uuidV4","promoteLongs","promoteValues","promoteBuffers","bsonRegExp","raw","started","compressor","agreedCompressor","zlibCompressionLevel","CommandStartedEvent","reply","CommandFailedEvent","CommandSucceededEvent","writeCommand","e"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\mongodb\\src\\cmap\\connection.ts"],"sourcesContent":["import { MessageStream, OperationDescription } from './message_stream';\nimport { StreamDescription, StreamDescriptionOptions } from './stream_description';\nimport {\n  CommandStartedEvent,\n  CommandFailedEvent,\n  CommandSucceededEvent\n} from './command_monitoring_events';\nimport { applySession, ClientSession, updateSessionFromResponse } from '../sessions';\nimport {\n  uuidV4,\n  ClientMetadata,\n  now,\n  calculateDurationInMs,\n  Callback,\n  MongoDBNamespace,\n  maxWireVersion,\n  HostAddress\n} from '../utils';\nimport {\n  MongoRuntimeError,\n  MongoMissingDependencyError,\n  MongoCompatibilityError,\n  MongoNetworkError,\n  MongoNetworkTimeoutError,\n  MongoServerError,\n  MongoWriteConcernError\n} from '../error';\nimport {\n  BinMsg,\n  WriteProtocolMessageType,\n  Response,\n  KillCursor,\n  GetMore,\n  Query,\n  OpQueryOptions,\n  Msg\n} from './commands';\nimport { BSONSerializeOptions, Document, Long, pluckBSONSerializeOptions, ObjectId } from '../bson';\nimport type { AutoEncrypter } from '../deps';\nimport type { MongoCredentials } from './auth/mongo_credentials';\nimport type { Stream } from './connect';\nimport { applyCommonQueryOptions, getReadPreference, isSharded } from './wire_protocol/shared';\nimport { ReadPreference, ReadPreferenceLike } from '../read_preference';\nimport type { W, WriteConcern, WriteConcernOptions } from '../write_concern';\nimport type { ServerApi, SupportedNodeConnectionOptions } from '../mongo_client';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\n\n/** @internal */\nconst kStream = Symbol('stream');\n/** @internal */\nconst kQueue = Symbol('queue');\n/** @internal */\nconst kMessageStream = Symbol('messageStream');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kLastUseTime = Symbol('lastUseTime');\n/** @internal */\nconst kClusterTime = Symbol('clusterTime');\n/** @internal */\nconst kDescription = Symbol('description');\n/** @internal */\nconst kIsMaster = Symbol('ismaster');\n/** @internal */\nconst kAutoEncrypter = Symbol('autoEncrypter');\n/** @internal */\nconst kFullResult = Symbol('fullResult');\n\n/** @internal */\nexport interface QueryOptions extends BSONSerializeOptions {\n  readPreference: ReadPreference;\n  documentsReturnedIn?: string;\n  batchSize?: number;\n  limit?: number;\n  skip?: number;\n  projection?: Document;\n  tailable?: boolean;\n  awaitData?: boolean;\n  noCursorTimeout?: boolean;\n  /** @deprecated use `noCursorTimeout` instead */\n  timeout?: boolean;\n  partial?: boolean;\n  oplogReplay?: boolean;\n}\n\n/** @internal */\nexport interface CommandOptions extends BSONSerializeOptions {\n  command?: boolean;\n  slaveOk?: boolean;\n  /** Specify read preference if command supports it */\n  readPreference?: ReadPreferenceLike;\n  raw?: boolean;\n  monitoring?: boolean;\n  [kFullResult]?: boolean;\n  socketTimeoutMS?: number;\n  /** Session to use for the operation */\n  session?: ClientSession;\n  documentsReturnedIn?: string;\n  noResponse?: boolean;\n\n  // FIXME: NODE-2802\n  willRetryWrite?: boolean;\n\n  // FIXME: NODE-2781\n  writeConcern?: WriteConcernOptions | WriteConcern | W;\n}\n\n/** @internal */\nexport interface GetMoreOptions extends CommandOptions {\n  batchSize?: number;\n  maxTimeMS?: number;\n  maxAwaitTimeMS?: number;\n  comment?: Document | string;\n}\n\n/** @public */\nexport interface ConnectionOptions\n  extends SupportedNodeConnectionOptions,\n    StreamDescriptionOptions {\n  // Internal creation info\n  id: number | '<monitor>';\n  generation: number;\n  hostAddress: HostAddress;\n  // Settings\n  autoEncrypter?: AutoEncrypter;\n  serverApi?: ServerApi;\n  monitorCommands: boolean;\n  /** @internal */\n  connectionType?: typeof Connection;\n  credentials?: MongoCredentials;\n  connectTimeoutMS?: number;\n  tls: boolean;\n  keepAlive?: boolean;\n  keepAliveInitialDelay?: number;\n  noDelay?: boolean;\n  socketTimeoutMS?: number;\n  cancellationToken?: CancellationToken;\n\n  metadata: ClientMetadata;\n}\n\n/** @public */\nexport interface DestroyOptions {\n  /** Force the destruction. */\n  force?: boolean;\n}\n\n/** @public */\nexport type ConnectionEvents = {\n  commandStarted(event: CommandStartedEvent): void;\n  commandSucceeded(event: CommandSucceededEvent): void;\n  commandFailed(event: CommandFailedEvent): void;\n  clusterTimeReceived(clusterTime: Document): void;\n  close(): void;\n  message(message: any): void;\n  pinned(pinType: string): void;\n  unpinned(pinType: string): void;\n};\n\n/** @internal */\nexport class Connection extends TypedEventEmitter<ConnectionEvents> {\n  id: number | '<monitor>';\n  address: string;\n  socketTimeoutMS: number;\n  monitorCommands: boolean;\n  closed: boolean;\n  destroyed: boolean;\n  lastIsMasterMS?: number;\n  serverApi?: ServerApi;\n  helloOk?: boolean;\n  /** @internal */\n  [kDescription]: StreamDescription;\n  /** @internal */\n  [kGeneration]: number;\n  /** @internal */\n  [kLastUseTime]: number;\n  /** @internal */\n  [kQueue]: Map<number, OperationDescription>;\n  /** @internal */\n  [kMessageStream]: MessageStream;\n  /** @internal */\n  [kStream]: Stream;\n  /** @internal */\n  [kIsMaster]: Document;\n  /** @internal */\n  [kClusterTime]: Document;\n\n  /** @event */\n  static readonly COMMAND_STARTED = 'commandStarted' as const;\n  /** @event */\n  static readonly COMMAND_SUCCEEDED = 'commandSucceeded' as const;\n  /** @event */\n  static readonly COMMAND_FAILED = 'commandFailed' as const;\n  /** @event */\n  static readonly CLUSTER_TIME_RECEIVED = 'clusterTimeReceived' as const;\n  /** @event */\n  static readonly CLOSE = 'close' as const;\n  /** @event */\n  static readonly MESSAGE = 'message' as const;\n  /** @event */\n  static readonly PINNED = 'pinned' as const;\n  /** @event */\n  static readonly UNPINNED = 'unpinned' as const;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super();\n    this.id = options.id;\n    this.address = streamIdentifier(stream);\n    this.socketTimeoutMS = options.socketTimeoutMS ?? 0;\n    this.monitorCommands = options.monitorCommands;\n    this.serverApi = options.serverApi;\n    this.closed = false;\n    this.destroyed = false;\n\n    this[kDescription] = new StreamDescription(this.address, options);\n    this[kGeneration] = options.generation;\n    this[kLastUseTime] = now();\n\n    // setup parser stream and message handling\n    this[kQueue] = new Map();\n    this[kMessageStream] = new MessageStream({\n      ...options,\n      maxBsonMessageSize: this.ismaster?.maxBsonMessageSize\n    });\n    this[kMessageStream].on('message', messageHandler(this));\n    this[kStream] = stream;\n    stream.on('error', () => {\n      /* ignore errors, listen to `close` instead */\n    });\n\n    this[kMessageStream].on('error', error => this.handleIssue({ destroy: error }));\n    stream.on('close', () => this.handleIssue({ isClose: true }));\n    stream.on('timeout', () => this.handleIssue({ isTimeout: true, destroy: true }));\n\n    // hook the message stream up to the passed in stream\n    stream.pipe(this[kMessageStream]);\n    this[kMessageStream].pipe(stream);\n  }\n\n  get description(): StreamDescription {\n    return this[kDescription];\n  }\n\n  get ismaster(): Document {\n    return this[kIsMaster];\n  }\n\n  // the `connect` method stores the result of the handshake ismaster on the connection\n  set ismaster(response: Document) {\n    this[kDescription].receiveResponse(response);\n    this[kDescription] = Object.freeze(this[kDescription]);\n\n    // TODO: remove this, and only use the `StreamDescription` in the future\n    this[kIsMaster] = response;\n  }\n\n  get serviceId(): ObjectId | undefined {\n    return this.ismaster?.serviceId;\n  }\n\n  get loadBalanced(): boolean {\n    return this.description.loadBalanced;\n  }\n\n  get generation(): number {\n    return this[kGeneration] || 0;\n  }\n\n  set generation(generation: number) {\n    this[kGeneration] = generation;\n  }\n\n  get idleTime(): number {\n    return calculateDurationInMs(this[kLastUseTime]);\n  }\n\n  get clusterTime(): Document {\n    return this[kClusterTime];\n  }\n\n  get stream(): Stream {\n    return this[kStream];\n  }\n\n  markAvailable(): void {\n    this[kLastUseTime] = now();\n  }\n\n  handleIssue(issue: { isTimeout?: boolean; isClose?: boolean; destroy?: boolean | Error }): void {\n    if (this.closed) {\n      return;\n    }\n\n    if (issue.destroy) {\n      this[kStream].destroy(typeof issue.destroy === 'boolean' ? undefined : issue.destroy);\n    }\n\n    this.closed = true;\n\n    for (const [, op] of this[kQueue]) {\n      if (issue.isTimeout) {\n        op.cb(\n          new MongoNetworkTimeoutError(`connection ${this.id} to ${this.address} timed out`, {\n            beforeHandshake: this.ismaster == null\n          })\n        );\n      } else if (issue.isClose) {\n        op.cb(new MongoNetworkError(`connection ${this.id} to ${this.address} closed`));\n      } else {\n        op.cb(typeof issue.destroy === 'boolean' ? undefined : issue.destroy);\n      }\n    }\n\n    this[kQueue].clear();\n    this.emit(Connection.CLOSE);\n  }\n\n  destroy(): void;\n  destroy(callback: Callback): void;\n  destroy(options: DestroyOptions): void;\n  destroy(options: DestroyOptions, callback: Callback): void;\n  destroy(options?: DestroyOptions | Callback, callback?: Callback): void {\n    if (typeof options === 'function') {\n      callback = options;\n      options = { force: false };\n    }\n\n    this.removeAllListeners(Connection.PINNED);\n    this.removeAllListeners(Connection.UNPINNED);\n\n    options = Object.assign({ force: false }, options);\n    if (this[kStream] == null || this.destroyed) {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    if (options.force) {\n      this[kStream].destroy();\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n\n      return;\n    }\n\n    this[kStream].end(() => {\n      this.destroyed = true;\n      if (typeof callback === 'function') {\n        callback();\n      }\n    });\n  }\n\n  /** @internal */\n  command(\n    ns: MongoDBNamespace,\n    cmd: Document,\n    options: CommandOptions | undefined,\n    callback: Callback\n  ): void {\n    if (!(ns instanceof MongoDBNamespace)) {\n      // TODO(NODE-3483): Replace this with a MongoCommandError\n      throw new MongoRuntimeError('Must provide a MongoDBNamespace instance');\n    }\n\n    const readPreference = getReadPreference(cmd, options);\n    const shouldUseOpMsg = supportsOpMsg(this);\n    const session = options?.session;\n\n    let clusterTime = this.clusterTime;\n    let finalCmd = Object.assign({}, cmd);\n\n    if (this.serverApi) {\n      const { version, strict, deprecationErrors } = this.serverApi;\n      finalCmd.apiVersion = version;\n      if (strict != null) finalCmd.apiStrict = strict;\n      if (deprecationErrors != null) finalCmd.apiDeprecationErrors = deprecationErrors;\n    }\n\n    if (hasSessionSupport(this) && session) {\n      if (\n        session.clusterTime &&\n        clusterTime &&\n        session.clusterTime.clusterTime.greaterThan(clusterTime.clusterTime)\n      ) {\n        clusterTime = session.clusterTime;\n      }\n\n      const err = applySession(session, finalCmd, options as CommandOptions);\n      if (err) {\n        return callback(err);\n      }\n    }\n\n    // if we have a known cluster time, gossip it\n    if (clusterTime) {\n      finalCmd.$clusterTime = clusterTime;\n    }\n\n    if (isSharded(this) && !shouldUseOpMsg && readPreference && readPreference.mode !== 'primary') {\n      finalCmd = {\n        $query: finalCmd,\n        $readPreference: readPreference.toJSON()\n      };\n    }\n\n    const commandOptions: Document = Object.assign(\n      {\n        command: true,\n        numberToSkip: 0,\n        numberToReturn: -1,\n        checkKeys: false,\n        // This value is not overridable\n        slaveOk: readPreference.slaveOk()\n      },\n      options\n    );\n\n    const cmdNs = `${ns.db}.$cmd`;\n    const message = shouldUseOpMsg\n      ? new Msg(cmdNs, finalCmd, commandOptions)\n      : new Query(cmdNs, finalCmd, commandOptions);\n\n    try {\n      write(this, message, commandOptions, callback);\n    } catch (err) {\n      callback(err);\n    }\n  }\n\n  /** @internal */\n  query(ns: MongoDBNamespace, cmd: Document, options: QueryOptions, callback: Callback): void {\n    const isExplain = cmd.$explain != null;\n    const readPreference = options.readPreference ?? ReadPreference.primary;\n    const batchSize = options.batchSize || 0;\n    const limit = options.limit;\n    const numberToSkip = options.skip || 0;\n    let numberToReturn = 0;\n    if (\n      limit &&\n      (limit < 0 || (limit !== 0 && limit < batchSize) || (limit > 0 && batchSize === 0))\n    ) {\n      numberToReturn = limit;\n    } else {\n      numberToReturn = batchSize;\n    }\n\n    if (isExplain) {\n      // nToReturn must be 0 (match all) or negative (match N and close cursor)\n      // nToReturn > 0 will give explain results equivalent to limit(0)\n      numberToReturn = -Math.abs(limit || 0);\n    }\n\n    const queryOptions: OpQueryOptions = {\n      numberToSkip,\n      numberToReturn,\n      pre32Limit: typeof limit === 'number' ? limit : undefined,\n      checkKeys: false,\n      slaveOk: readPreference.slaveOk()\n    };\n\n    if (options.projection) {\n      queryOptions.returnFieldSelector = options.projection;\n    }\n\n    const query = new Query(ns.toString(), cmd, queryOptions);\n    if (typeof options.tailable === 'boolean') {\n      query.tailable = options.tailable;\n    }\n\n    if (typeof options.oplogReplay === 'boolean') {\n      query.oplogReplay = options.oplogReplay;\n    }\n\n    if (typeof options.timeout === 'boolean') {\n      query.noCursorTimeout = !options.timeout;\n    } else if (typeof options.noCursorTimeout === 'boolean') {\n      query.noCursorTimeout = options.noCursorTimeout;\n    }\n\n    if (typeof options.awaitData === 'boolean') {\n      query.awaitData = options.awaitData;\n    }\n\n    if (typeof options.partial === 'boolean') {\n      query.partial = options.partial;\n    }\n\n    write(\n      this,\n      query,\n      { [kFullResult]: true, ...pluckBSONSerializeOptions(options) },\n      (err, result) => {\n        if (err || !result) return callback(err, result);\n        if (isExplain && result.documents && result.documents[0]) {\n          return callback(undefined, result.documents[0]);\n        }\n\n        callback(undefined, result);\n      }\n    );\n  }\n\n  /** @internal */\n  getMore(\n    ns: MongoDBNamespace,\n    cursorId: Long,\n    options: GetMoreOptions,\n    callback: Callback<Document>\n  ): void {\n    const fullResult = !!options[kFullResult];\n    const wireVersion = maxWireVersion(this);\n    if (!cursorId) {\n      // TODO(NODE-3483): Replace this with a MongoCommandError\n      callback(new MongoRuntimeError('Invalid internal cursor state, no known cursor id'));\n      return;\n    }\n\n    if (wireVersion < 4) {\n      const getMoreOp = new GetMore(ns.toString(), cursorId, { numberToReturn: options.batchSize });\n      const queryOptions = applyCommonQueryOptions(\n        {},\n        Object.assign(options, { ...pluckBSONSerializeOptions(options) })\n      );\n\n      queryOptions[kFullResult] = true;\n      queryOptions.command = true;\n      write(this, getMoreOp, queryOptions, (err, response) => {\n        if (fullResult) return callback(err, response);\n        if (err) return callback(err);\n        callback(undefined, { cursor: { id: response.cursorId, nextBatch: response.documents } });\n      });\n\n      return;\n    }\n\n    const getMoreCmd: Document = {\n      getMore: cursorId,\n      collection: ns.collection\n    };\n\n    if (typeof options.batchSize === 'number') {\n      getMoreCmd.batchSize = Math.abs(options.batchSize);\n    }\n\n    if (typeof options.maxAwaitTimeMS === 'number') {\n      getMoreCmd.maxTimeMS = options.maxAwaitTimeMS;\n    }\n\n    const commandOptions = Object.assign(\n      {\n        returnFieldSelector: null,\n        documentsReturnedIn: 'nextBatch'\n      },\n      options\n    );\n\n    this.command(ns, getMoreCmd, commandOptions, callback);\n  }\n\n  /** @internal */\n  killCursors(\n    ns: MongoDBNamespace,\n    cursorIds: Long[],\n    options: CommandOptions,\n    callback: Callback\n  ): void {\n    if (!cursorIds || !Array.isArray(cursorIds)) {\n      // TODO(NODE-3483): Replace this with a MongoCommandError\n      throw new MongoRuntimeError(`Invalid list of cursor ids provided: ${cursorIds}`);\n    }\n\n    if (maxWireVersion(this) < 4) {\n      try {\n        write(\n          this,\n          new KillCursor(ns.toString(), cursorIds),\n          { noResponse: true, ...options },\n          callback\n        );\n      } catch (err) {\n        callback(err);\n      }\n\n      return;\n    }\n\n    this.command(\n      ns,\n      { killCursors: ns.collection, cursors: cursorIds },\n      { [kFullResult]: true, ...options },\n      (err, response) => {\n        if (err || !response) return callback(err);\n        if (response.cursorNotFound) {\n          return callback(new MongoNetworkError('cursor killed or timed out'), null);\n        }\n\n        if (!Array.isArray(response.documents) || response.documents.length === 0) {\n          return callback(\n            // TODO(NODE-3483)\n            new MongoRuntimeError(\n              `invalid killCursors result returned for cursor id ${cursorIds[0]}`\n            )\n          );\n        }\n\n        callback(undefined, response.documents[0]);\n      }\n    );\n  }\n}\n\n/** @public */\nexport const APM_EVENTS = [\n  Connection.COMMAND_STARTED,\n  Connection.COMMAND_SUCCEEDED,\n  Connection.COMMAND_FAILED\n];\n\n/** @internal */\nexport class CryptoConnection extends Connection {\n  /** @internal */\n  [kAutoEncrypter]?: AutoEncrypter;\n\n  constructor(stream: Stream, options: ConnectionOptions) {\n    super(stream, options);\n    this[kAutoEncrypter] = options.autoEncrypter;\n  }\n\n  /** @internal @override */\n  command(ns: MongoDBNamespace, cmd: Document, options: CommandOptions, callback: Callback): void {\n    const autoEncrypter = this[kAutoEncrypter];\n    if (!autoEncrypter) {\n      return callback(new MongoMissingDependencyError('No AutoEncrypter available for encryption'));\n    }\n\n    const serverWireVersion = maxWireVersion(this);\n    if (serverWireVersion === 0) {\n      // This means the initial handshake hasn't happened yet\n      return super.command(ns, cmd, options, callback);\n    }\n\n    if (serverWireVersion < 8) {\n      callback(\n        new MongoCompatibilityError('Auto-encryption requires a minimum MongoDB version of 4.2')\n      );\n      return;\n    }\n\n    autoEncrypter.encrypt(ns.toString(), cmd, options, (err, encrypted) => {\n      if (err || encrypted == null) {\n        callback(err, null);\n        return;\n      }\n\n      super.command(ns, encrypted, options, (err, response) => {\n        if (err || response == null) {\n          callback(err, response);\n          return;\n        }\n\n        autoEncrypter.decrypt(response, options, callback);\n      });\n    });\n  }\n}\n\n/** @internal */\nexport function hasSessionSupport(conn: Connection): boolean {\n  const description = conn.description;\n  return description.logicalSessionTimeoutMinutes != null || !!description.loadBalanced;\n}\n\nfunction supportsOpMsg(conn: Connection) {\n  const description = conn.description;\n  if (description == null) {\n    return false;\n  }\n\n  return maxWireVersion(conn) >= 6 && !description.__nodejs_mock_server__;\n}\n\nfunction messageHandler(conn: Connection) {\n  return function messageHandler(message: BinMsg | Response) {\n    // always emit the message, in case we are streaming\n    conn.emit('message', message);\n    const operationDescription = conn[kQueue].get(message.responseTo);\n    if (!operationDescription) {\n      return;\n    }\n\n    const callback = operationDescription.cb;\n\n    // SERVER-45775: For exhaust responses we should be able to use the same requestId to\n    // track response, however the server currently synthetically produces remote requests\n    // making the `responseTo` change on each response\n    conn[kQueue].delete(message.responseTo);\n    if ('moreToCome' in message && message.moreToCome) {\n      // requeue the callback for next synthetic request\n      conn[kQueue].set(message.requestId, operationDescription);\n    } else if (operationDescription.socketTimeoutOverride) {\n      conn[kStream].setTimeout(conn.socketTimeoutMS);\n    }\n\n    try {\n      // Pass in the entire description because it has BSON parsing options\n      message.parse(operationDescription);\n    } catch (err) {\n      // If this error is generated by our own code, it will already have the correct class applied\n      // if it is not, then it is coming from a catastrophic data parse failure or the BSON library\n      // in either case, it should not be wrapped\n      callback(err);\n      return;\n    }\n\n    if (message.documents[0]) {\n      const document: Document = message.documents[0];\n      const session = operationDescription.session;\n      if (session) {\n        updateSessionFromResponse(session, document);\n      }\n\n      if (document.$clusterTime) {\n        conn[kClusterTime] = document.$clusterTime;\n        conn.emit(Connection.CLUSTER_TIME_RECEIVED, document.$clusterTime);\n      }\n\n      if (operationDescription.command) {\n        if (document.writeConcernError) {\n          callback(new MongoWriteConcernError(document.writeConcernError, document));\n          return;\n        }\n\n        if (document.ok === 0 || document.$err || document.errmsg || document.code) {\n          callback(new MongoServerError(document));\n          return;\n        }\n      } else {\n        // Pre 3.2 support\n        if (document.ok === 0 || document.$err || document.errmsg) {\n          callback(new MongoServerError(document));\n          return;\n        }\n      }\n    }\n\n    callback(undefined, operationDescription.fullResult ? message : message.documents[0]);\n  };\n}\n\nfunction streamIdentifier(stream: Stream) {\n  if (typeof stream.address === 'function') {\n    return `${stream.remoteAddress}:${stream.remotePort}`;\n  }\n\n  return uuidV4().toString('hex');\n}\n\nfunction write(\n  conn: Connection,\n  command: WriteProtocolMessageType,\n  options: CommandOptions,\n  callback: Callback\n) {\n  if (typeof options === 'function') {\n    callback = options;\n  }\n\n  options = options ?? {};\n  const operationDescription: OperationDescription = {\n    requestId: command.requestId,\n    cb: callback,\n    session: options.session,\n    fullResult: !!options[kFullResult],\n    noResponse: typeof options.noResponse === 'boolean' ? options.noResponse : false,\n    documentsReturnedIn: options.documentsReturnedIn,\n    command: !!options.command,\n\n    // for BSON parsing\n    promoteLongs: typeof options.promoteLongs === 'boolean' ? options.promoteLongs : true,\n    promoteValues: typeof options.promoteValues === 'boolean' ? options.promoteValues : true,\n    promoteBuffers: typeof options.promoteBuffers === 'boolean' ? options.promoteBuffers : false,\n    bsonRegExp: typeof options.bsonRegExp === 'boolean' ? options.bsonRegExp : false,\n    raw: typeof options.raw === 'boolean' ? options.raw : false,\n    started: 0\n  };\n\n  if (conn[kDescription] && conn[kDescription].compressor) {\n    operationDescription.agreedCompressor = conn[kDescription].compressor;\n\n    if (conn[kDescription].zlibCompressionLevel) {\n      operationDescription.zlibCompressionLevel = conn[kDescription].zlibCompressionLevel;\n    }\n  }\n\n  if (typeof options.socketTimeoutMS === 'number') {\n    operationDescription.socketTimeoutOverride = true;\n    conn[kStream].setTimeout(options.socketTimeoutMS);\n  }\n\n  // if command monitoring is enabled we need to modify the callback here\n  if (conn.monitorCommands) {\n    conn.emit(Connection.COMMAND_STARTED, new CommandStartedEvent(conn, command));\n\n    operationDescription.started = now();\n    operationDescription.cb = (err, reply) => {\n      if (err) {\n        conn.emit(\n          Connection.COMMAND_FAILED,\n          new CommandFailedEvent(conn, command, err, operationDescription.started)\n        );\n      } else {\n        if (reply && (reply.ok === 0 || reply.$err)) {\n          conn.emit(\n            Connection.COMMAND_FAILED,\n            new CommandFailedEvent(conn, command, reply, operationDescription.started)\n          );\n        } else {\n          conn.emit(\n            Connection.COMMAND_SUCCEEDED,\n            new CommandSucceededEvent(conn, command, reply, operationDescription.started)\n          );\n        }\n      }\n\n      if (typeof callback === 'function') {\n        callback(err, reply);\n      }\n    };\n  }\n\n  if (!operationDescription.noResponse) {\n    conn[kQueue].set(operationDescription.requestId, operationDescription);\n  }\n\n  try {\n    conn[kMessageStream].writeCommand(command, operationDescription);\n  } catch (e) {\n    if (!operationDescription.noResponse) {\n      conn[kQueue].delete(operationDescription.requestId);\n      operationDescription.cb(e);\n      return;\n    }\n  }\n\n  if (operationDescription.noResponse) {\n    operationDescription.cb();\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}