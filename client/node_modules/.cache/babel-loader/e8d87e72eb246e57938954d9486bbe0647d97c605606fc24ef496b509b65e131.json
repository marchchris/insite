{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.CMAP_EVENTS = exports.ConnectionPool = void 0;\nconst Denque = require(\"denque\");\nconst connection_1 = require(\"./connection\");\nconst logger_1 = require(\"../logger\");\nconst metrics_1 = require(\"./metrics\");\nconst connect_1 = require(\"./connect\");\nconst utils_1 = require(\"../utils\");\nconst error_1 = require(\"../error\");\nconst errors_1 = require(\"./errors\");\nconst connection_pool_events_1 = require(\"./connection_pool_events\");\nconst mongo_types_1 = require(\"../mongo_types\");\n/** @internal */\nconst kLogger = Symbol('logger');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPermits = Symbol('permits');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nclass ConnectionPool extends mongo_types_1.TypedEventEmitter {\n  /** @internal */\n  constructor(options) {\n    var _a, _b, _c, _d;\n    super();\n    this.closed = false;\n    this.options = Object.freeze({\n      ...options,\n      connectionType: connection_1.Connection,\n      maxPoolSize: (_a = options.maxPoolSize) !== null && _a !== void 0 ? _a : 100,\n      minPoolSize: (_b = options.minPoolSize) !== null && _b !== void 0 ? _b : 0,\n      maxIdleTimeMS: (_c = options.maxIdleTimeMS) !== null && _c !== void 0 ? _c : 0,\n      waitQueueTimeoutMS: (_d = options.waitQueueTimeoutMS) !== null && _d !== void 0 ? _d : 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new error_1.MongoInvalidArgumentError('Connection pool minimum size must not be greater than maximum pool size');\n    }\n    this[kLogger] = new logger_1.Logger('ConnectionPool');\n    this[kConnections] = new Denque();\n    this[kPermits] = this.options.maxPoolSize;\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = (0, utils_1.makeCounter)(1);\n    this[kCancellationToken] = new mongo_types_1.CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new Denque();\n    this[kMetrics] = new metrics_1.ConnectionPoolMetrics();\n    this[kCheckedOut] = 0;\n    this[kProcessingWaitQueue] = false;\n    process.nextTick(() => {\n      this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new connection_pool_events_1.ConnectionPoolCreatedEvent(this));\n      ensureMinPoolSize(this);\n    });\n  }\n  /** The address of the endpoint the pool is connected to */\n  get address() {\n    return this.options.hostAddress.toString();\n  }\n  /** An integer representing the SDAM generation of the pool */\n  get generation() {\n    return this[kGeneration];\n  }\n  /** An integer expressing how many total connections (active + in use) the pool currently has */\n  get totalConnectionCount() {\n    return this[kConnections].length + (this.options.maxPoolSize - this[kPermits]);\n  }\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount() {\n    return this[kConnections].length;\n  }\n  get waitQueueSize() {\n    return this[kWaitQueue].length;\n  }\n  get loadBalanced() {\n    return this.options.loadBalanced;\n  }\n  get serviceGenerations() {\n    return this[kServiceGenerations];\n  }\n  get currentCheckedOutCount() {\n    return this[kCheckedOut];\n  }\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  waitQueueErrorMetrics() {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  checkOut(callback) {\n    this.emit(ConnectionPool.CONNECTION_CHECK_OUT_STARTED, new connection_pool_events_1.ConnectionCheckOutStartedEvent(this));\n    if (this.closed) {\n      this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'poolClosed'));\n      callback(new errors_1.PoolClosedError(this));\n      return;\n    }\n    const waitQueueMember = {\n      callback\n    };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n        this.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(this, 'timeout'));\n        waitQueueMember.callback(new errors_1.WaitQueueTimeoutError(this.loadBalanced ? this.waitQueueErrorMetrics() : 'Timed out while checking out a connection from connection pool', this.address));\n      }, waitQueueTimeoutMS);\n    }\n    this[kCheckedOut] = this[kCheckedOut] + 1;\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(processWaitQueue, this);\n  }\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection) {\n    const poolClosed = this.closed;\n    const stale = connectionIsStale(this, connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n    this[kCheckedOut] = this[kCheckedOut] - 1;\n    this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new connection_pool_events_1.ConnectionCheckedInEvent(this, connection));\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      destroyConnection(this, connection, reason);\n    }\n    process.nextTick(processWaitQueue, this);\n  }\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear(serviceId) {\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        // TODO(NODE-3483)\n        throw new error_1.MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n    } else {\n      this[kGeneration] += 1;\n    }\n    this.emit('connectionPoolCleared', new connection_pool_events_1.ConnectionPoolClearedEvent(this, serviceId));\n  }\n  close(_options, _cb) {\n    let options = _options;\n    const callback = _cb !== null && _cb !== void 0 ? _cb : _options;\n    if (typeof options === 'function') {\n      options = {};\n    }\n    options = Object.assign({\n      force: false\n    }, options);\n    if (this.closed) {\n      return callback();\n    }\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n    // drain the wait queue\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].pop();\n      if (waitQueueMember) {\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n        if (!waitQueueMember[kCancelled]) {\n          // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n          waitQueueMember.callback(new error_1.MongoRuntimeError('Connection pool closed'));\n        }\n      }\n    }\n    // clear the min pool size timer\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      clearTimeout(minPoolSizeTimer);\n    }\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n    // mark the pool as closed immediately\n    this.closed = true;\n    (0, utils_1.eachAsync)(this[kConnections].toArray(), (conn, cb) => {\n      this.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(this, conn, 'poolClosed'));\n      conn.destroy(options, cb);\n    }, err => {\n      this[kConnections].clear();\n      this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new connection_pool_events_1.ConnectionPoolClosedEvent(this));\n      callback(err);\n    });\n  }\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n  withConnection(conn, fn, callback) {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n      });\n      return;\n    }\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n}\nexports.ConnectionPool = ConnectionPool;\n/**\n * Emitted when the connection pool is created.\n * @event\n */\nConnectionPool.CONNECTION_POOL_CREATED = 'connectionPoolCreated';\n/**\n * Emitted once when the connection pool is closed\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLOSED = 'connectionPoolClosed';\n/**\n * Emitted each time the connection pool is cleared and it's generation incremented\n * @event\n */\nConnectionPool.CONNECTION_POOL_CLEARED = 'connectionPoolCleared';\n/**\n * Emitted when a connection is created.\n * @event\n */\nConnectionPool.CONNECTION_CREATED = 'connectionCreated';\n/**\n * Emitted when a connection becomes established, and is ready to use\n * @event\n */\nConnectionPool.CONNECTION_READY = 'connectionReady';\n/**\n * Emitted when a connection is closed\n * @event\n */\nConnectionPool.CONNECTION_CLOSED = 'connectionClosed';\n/**\n * Emitted when an attempt to check out a connection begins\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted';\n/**\n * Emitted when an attempt to check out a connection fails\n * @event\n */\nConnectionPool.CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed';\n/**\n * Emitted each time a connection is successfully checked out of the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_OUT = 'connectionCheckedOut';\n/**\n * Emitted each time a connection is successfully checked into the connection pool\n * @event\n */\nConnectionPool.CONNECTION_CHECKED_IN = 'connectionCheckedIn';\nfunction ensureMinPoolSize(pool) {\n  if (pool.closed || pool.options.minPoolSize === 0) {\n    return;\n  }\n  const minPoolSize = pool.options.minPoolSize;\n  for (let i = pool.totalConnectionCount; i < minPoolSize; ++i) {\n    createConnection(pool);\n  }\n  pool[kMinPoolSizeTimer] = setTimeout(() => ensureMinPoolSize(pool), 10);\n}\nfunction connectionIsStale(pool, connection) {\n  const serviceId = connection.serviceId;\n  if (pool.loadBalanced && serviceId) {\n    const sid = serviceId.toHexString();\n    const generation = pool.serviceGenerations.get(sid);\n    return connection.generation !== generation;\n  }\n  return connection.generation !== pool[kGeneration];\n}\nfunction connectionIsIdle(pool, connection) {\n  return !!(pool.options.maxIdleTimeMS && connection.idleTime > pool.options.maxIdleTimeMS);\n}\nfunction createConnection(pool, callback) {\n  const connectOptions = {\n    ...pool.options,\n    id: pool[kConnectionCounter].next().value,\n    generation: pool[kGeneration],\n    cancellationToken: pool[kCancellationToken]\n  };\n  pool[kPermits]--;\n  (0, connect_1.connect)(connectOptions, (err, connection) => {\n    if (err || !connection) {\n      pool[kPermits]++;\n      pool[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n      return;\n    }\n    // The pool might have closed since we started trying to create a connection\n    if (pool.closed) {\n      connection.destroy({\n        force: true\n      });\n      return;\n    }\n    // forward all events from the connection to the pool\n    for (const event of [...connection_1.APM_EVENTS, connection_1.Connection.CLUSTER_TIME_RECEIVED]) {\n      connection.on(event, e => pool.emit(event, e));\n    }\n    pool.emit(ConnectionPool.CONNECTION_CREATED, new connection_pool_events_1.ConnectionCreatedEvent(pool, connection));\n    if (pool.loadBalanced) {\n      connection.on(connection_1.Connection.PINNED, pinType => pool[kMetrics].markPinned(pinType));\n      connection.on(connection_1.Connection.UNPINNED, pinType => pool[kMetrics].markUnpinned(pinType));\n      const serviceId = connection.serviceId;\n      if (serviceId) {\n        let generation;\n        const sid = serviceId.toHexString();\n        if (generation = pool.serviceGenerations.get(sid)) {\n          connection.generation = generation;\n        } else {\n          pool.serviceGenerations.set(sid, 0);\n          connection.generation = 0;\n        }\n      }\n    }\n    connection.markAvailable();\n    pool.emit(ConnectionPool.CONNECTION_READY, new connection_pool_events_1.ConnectionReadyEvent(pool, connection));\n    // if a callback has been provided, check out the connection immediately\n    if (typeof callback === 'function') {\n      callback(undefined, connection);\n      return;\n    }\n    // otherwise add it to the pool for later acquisition, and try to process the wait queue\n    pool[kConnections].push(connection);\n    process.nextTick(processWaitQueue, pool);\n  });\n}\nfunction destroyConnection(pool, connection, reason) {\n  pool.emit(ConnectionPool.CONNECTION_CLOSED, new connection_pool_events_1.ConnectionClosedEvent(pool, connection, reason));\n  // allow more connections to be created\n  pool[kPermits]++;\n  // destroy the connection\n  process.nextTick(() => connection.destroy());\n}\nfunction processWaitQueue(pool) {\n  if (pool.closed || pool[kProcessingWaitQueue]) {\n    return;\n  }\n  pool[kProcessingWaitQueue] = true;\n  while (pool.waitQueueSize) {\n    const waitQueueMember = pool[kWaitQueue].peekFront();\n    if (!waitQueueMember) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n    if (waitQueueMember[kCancelled]) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n    if (!pool.availableConnectionCount) {\n      break;\n    }\n    const connection = pool[kConnections].shift();\n    if (!connection) {\n      break;\n    }\n    const isStale = connectionIsStale(pool, connection);\n    const isIdle = connectionIsIdle(pool, connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      pool.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(pool, connection));\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n      pool[kWaitQueue].shift();\n      waitQueueMember.callback(undefined, connection);\n    } else {\n      const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n      destroyConnection(pool, connection, reason);\n    }\n  }\n  const maxPoolSize = pool.options.maxPoolSize;\n  if (pool.waitQueueSize && (maxPoolSize <= 0 || pool.totalConnectionCount < maxPoolSize)) {\n    createConnection(pool, (err, connection) => {\n      const waitQueueMember = pool[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        if (!err && connection) {\n          pool[kConnections].push(connection);\n        }\n        pool[kProcessingWaitQueue] = false;\n        return;\n      }\n      if (err) {\n        pool.emit(ConnectionPool.CONNECTION_CHECK_OUT_FAILED, new connection_pool_events_1.ConnectionCheckOutFailedEvent(pool, err));\n      } else if (connection) {\n        pool.emit(ConnectionPool.CONNECTION_CHECKED_OUT, new connection_pool_events_1.ConnectionCheckedOutEvent(pool, connection));\n      }\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n      waitQueueMember.callback(err, connection);\n      pool[kProcessingWaitQueue] = false;\n      process.nextTick(() => processWaitQueue(pool));\n    });\n  } else {\n    pool[kProcessingWaitQueue] = false;\n  }\n}\nexports.CMAP_EVENTS = [ConnectionPool.CONNECTION_POOL_CREATED, ConnectionPool.CONNECTION_POOL_CLOSED, ConnectionPool.CONNECTION_CREATED, ConnectionPool.CONNECTION_READY, ConnectionPool.CONNECTION_CLOSED, ConnectionPool.CONNECTION_CHECK_OUT_STARTED, ConnectionPool.CONNECTION_CHECK_OUT_FAILED, ConnectionPool.CONNECTION_CHECKED_OUT, ConnectionPool.CONNECTION_CHECKED_IN, ConnectionPool.CONNECTION_POOL_CLEARED];","map":{"version":3,"names":["Denque","require","connection_1","logger_1","metrics_1","connect_1","utils_1","error_1","errors_1","connection_pool_events_1","mongo_types_1","kLogger","Symbol","kConnections","kPermits","kMinPoolSizeTimer","kGeneration","kServiceGenerations","kConnectionCounter","kCancellationToken","kWaitQueue","kCancelled","kMetrics","kCheckedOut","kProcessingWaitQueue","ConnectionPool","TypedEventEmitter","constructor","options","closed","Object","freeze","connectionType","Connection","maxPoolSize","_a","minPoolSize","_b","maxIdleTimeMS","_c","waitQueueTimeoutMS","_d","autoEncrypter","metadata","MongoInvalidArgumentError","Logger","undefined","Map","makeCounter","CancellationToken","setMaxListeners","Infinity","ConnectionPoolMetrics","process","nextTick","emit","CONNECTION_POOL_CREATED","ConnectionPoolCreatedEvent","ensureMinPoolSize","address","hostAddress","toString","generation","totalConnectionCount","length","availableConnectionCount","waitQueueSize","loadBalanced","serviceGenerations","currentCheckedOutCount","waitQueueErrorMetrics","info","checkOut","callback","CONNECTION_CHECK_OUT_STARTED","ConnectionCheckOutStartedEvent","CONNECTION_CHECK_OUT_FAILED","ConnectionCheckOutFailedEvent","PoolClosedError","waitQueueMember","timer","setTimeout","WaitQueueTimeoutError","push","processWaitQueue","checkIn","connection","poolClosed","stale","connectionIsStale","willDestroy","markAvailable","unshift","CONNECTION_CHECKED_IN","ConnectionCheckedInEvent","reason","destroyConnection","clear","serviceId","sid","toHexString","get","MongoRuntimeError","set","ConnectionPoolClearedEvent","close","_options","_cb","assign","force","pop","clearTimeout","minPoolSizeTimer","return","eachAsync","toArray","conn","cb","CONNECTION_CLOSED","ConnectionClosedEvent","destroy","err","CONNECTION_POOL_CLOSED","ConnectionPoolClosedEvent","withConnection","fn","fnErr","result","exports","CONNECTION_POOL_CLEARED","CONNECTION_CREATED","CONNECTION_READY","CONNECTION_CHECKED_OUT","pool","i","createConnection","connectionIsIdle","idleTime","connectOptions","id","next","value","cancellationToken","connect","debug","JSON","stringify","event","APM_EVENTS","CLUSTER_TIME_RECEIVED","on","e","ConnectionCreatedEvent","PINNED","pinType","markPinned","UNPINNED","markUnpinned","ConnectionReadyEvent","peekFront","shift","isStale","isIdle","ConnectionCheckedOutEvent","CMAP_EVENTS"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\mongodb\\src\\cmap\\connection_pool.ts"],"sourcesContent":["import Denque = require('denque');\nimport { APM_EVENTS, Connection, ConnectionEvents, ConnectionOptions } from './connection';\nimport type { ObjectId } from 'bson';\nimport { Logger } from '../logger';\nimport { ConnectionPoolMetrics } from './metrics';\nimport { connect } from './connect';\nimport { eachAsync, makeCounter, Callback } from '../utils';\nimport { MongoError, MongoInvalidArgumentError, MongoRuntimeError } from '../error';\nimport { PoolClosedError, WaitQueueTimeoutError } from './errors';\nimport {\n  ConnectionPoolCreatedEvent,\n  ConnectionPoolClosedEvent,\n  ConnectionCreatedEvent,\n  ConnectionReadyEvent,\n  ConnectionClosedEvent,\n  ConnectionCheckOutStartedEvent,\n  ConnectionCheckOutFailedEvent,\n  ConnectionCheckedOutEvent,\n  ConnectionCheckedInEvent,\n  ConnectionPoolClearedEvent\n} from './connection_pool_events';\nimport { CancellationToken, TypedEventEmitter } from '../mongo_types';\n\n/** @internal */\nconst kLogger = Symbol('logger');\n/** @internal */\nconst kConnections = Symbol('connections');\n/** @internal */\nconst kPermits = Symbol('permits');\n/** @internal */\nconst kMinPoolSizeTimer = Symbol('minPoolSizeTimer');\n/** @internal */\nconst kGeneration = Symbol('generation');\n/** @internal */\nconst kServiceGenerations = Symbol('serviceGenerations');\n/** @internal */\nconst kConnectionCounter = Symbol('connectionCounter');\n/** @internal */\nconst kCancellationToken = Symbol('cancellationToken');\n/** @internal */\nconst kWaitQueue = Symbol('waitQueue');\n/** @internal */\nconst kCancelled = Symbol('cancelled');\n/** @internal */\nconst kMetrics = Symbol('metrics');\n/** @internal */\nconst kCheckedOut = Symbol('checkedOut');\n/** @internal */\nconst kProcessingWaitQueue = Symbol('processingWaitQueue');\n\n/** @public */\nexport interface ConnectionPoolOptions extends Omit<ConnectionOptions, 'id' | 'generation'> {\n  /** The maximum number of connections that may be associated with a pool at a given time. This includes in use and available connections. */\n  maxPoolSize: number;\n  /** The minimum number of connections that MUST exist at any moment in a single connection pool. */\n  minPoolSize: number;\n  /** The maximum amount of time a connection should remain idle in the connection pool before being marked idle. */\n  maxIdleTimeMS: number;\n  /** The maximum amount of time operation execution should wait for a connection to become available. The default is 0 which means there is no limit. */\n  waitQueueTimeoutMS: number;\n  /** If we are in load balancer mode. */\n  loadBalanced: boolean;\n}\n\n/** @internal */\nexport interface WaitQueueMember {\n  callback: Callback<Connection>;\n  timer?: NodeJS.Timeout;\n  [kCancelled]?: boolean;\n}\n\n/** @public */\nexport interface CloseOptions {\n  force?: boolean;\n}\n\n/** @public */\nexport type ConnectionPoolEvents = {\n  connectionPoolCreated(event: ConnectionPoolCreatedEvent): void;\n  connectionPoolClosed(event: ConnectionPoolClosedEvent): void;\n  connectionPoolCleared(event: ConnectionPoolClearedEvent): void;\n  connectionCreated(event: ConnectionCreatedEvent): void;\n  connectionReady(event: ConnectionReadyEvent): void;\n  connectionClosed(event: ConnectionClosedEvent): void;\n  connectionCheckOutStarted(event: ConnectionCheckOutStartedEvent): void;\n  connectionCheckOutFailed(event: ConnectionCheckOutFailedEvent): void;\n  connectionCheckedOut(event: ConnectionCheckedOutEvent): void;\n  connectionCheckedIn(event: ConnectionCheckedInEvent): void;\n} & Omit<ConnectionEvents, 'close' | 'message'>;\n\n/**\n * A pool of connections which dynamically resizes, and emit events related to pool activity\n * @internal\n */\nexport class ConnectionPool extends TypedEventEmitter<ConnectionPoolEvents> {\n  closed: boolean;\n  options: Readonly<ConnectionPoolOptions>;\n  /** @internal */\n  [kLogger]: Logger;\n  /** @internal */\n  [kConnections]: Denque<Connection>;\n  /**\n   * An integer expressing how many total connections are permitted\n   * @internal\n   */\n  [kPermits]: number;\n  /** @internal */\n  [kMinPoolSizeTimer]?: NodeJS.Timeout;\n  /**\n   * An integer representing the SDAM generation of the pool\n   * @internal\n   */\n  [kGeneration]: number;\n  /** A map of generations to service ids\n   * @internal\n   */\n  [kServiceGenerations]: Map<string, number>;\n  /** @internal */\n  [kConnectionCounter]: Generator<number>;\n  /** @internal */\n  [kCancellationToken]: CancellationToken;\n  /** @internal */\n  [kWaitQueue]: Denque<WaitQueueMember>;\n  /** @internal */\n  [kMetrics]: ConnectionPoolMetrics;\n  /** @internal */\n  [kCheckedOut]: number;\n  /** @internal */\n  [kProcessingWaitQueue]: boolean;\n\n  /**\n   * Emitted when the connection pool is created.\n   * @event\n   */\n  static readonly CONNECTION_POOL_CREATED = 'connectionPoolCreated' as const;\n  /**\n   * Emitted once when the connection pool is closed\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLOSED = 'connectionPoolClosed' as const;\n  /**\n   * Emitted each time the connection pool is cleared and it's generation incremented\n   * @event\n   */\n  static readonly CONNECTION_POOL_CLEARED = 'connectionPoolCleared' as const;\n  /**\n   * Emitted when a connection is created.\n   * @event\n   */\n  static readonly CONNECTION_CREATED = 'connectionCreated' as const;\n  /**\n   * Emitted when a connection becomes established, and is ready to use\n   * @event\n   */\n  static readonly CONNECTION_READY = 'connectionReady' as const;\n  /**\n   * Emitted when a connection is closed\n   * @event\n   */\n  static readonly CONNECTION_CLOSED = 'connectionClosed' as const;\n  /**\n   * Emitted when an attempt to check out a connection begins\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_STARTED = 'connectionCheckOutStarted' as const;\n  /**\n   * Emitted when an attempt to check out a connection fails\n   * @event\n   */\n  static readonly CONNECTION_CHECK_OUT_FAILED = 'connectionCheckOutFailed' as const;\n  /**\n   * Emitted each time a connection is successfully checked out of the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_OUT = 'connectionCheckedOut' as const;\n  /**\n   * Emitted each time a connection is successfully checked into the connection pool\n   * @event\n   */\n  static readonly CONNECTION_CHECKED_IN = 'connectionCheckedIn' as const;\n\n  /** @internal */\n  constructor(options: ConnectionPoolOptions) {\n    super();\n\n    this.closed = false;\n    this.options = Object.freeze({\n      ...options,\n      connectionType: Connection,\n      maxPoolSize: options.maxPoolSize ?? 100,\n      minPoolSize: options.minPoolSize ?? 0,\n      maxIdleTimeMS: options.maxIdleTimeMS ?? 0,\n      waitQueueTimeoutMS: options.waitQueueTimeoutMS ?? 0,\n      autoEncrypter: options.autoEncrypter,\n      metadata: options.metadata\n    });\n\n    if (this.options.minPoolSize > this.options.maxPoolSize) {\n      throw new MongoInvalidArgumentError(\n        'Connection pool minimum size must not be greater than maximum pool size'\n      );\n    }\n\n    this[kLogger] = new Logger('ConnectionPool');\n    this[kConnections] = new Denque();\n    this[kPermits] = this.options.maxPoolSize;\n    this[kMinPoolSizeTimer] = undefined;\n    this[kGeneration] = 0;\n    this[kServiceGenerations] = new Map();\n    this[kConnectionCounter] = makeCounter(1);\n    this[kCancellationToken] = new CancellationToken();\n    this[kCancellationToken].setMaxListeners(Infinity);\n    this[kWaitQueue] = new Denque();\n    this[kMetrics] = new ConnectionPoolMetrics();\n    this[kCheckedOut] = 0;\n    this[kProcessingWaitQueue] = false;\n\n    process.nextTick(() => {\n      this.emit(ConnectionPool.CONNECTION_POOL_CREATED, new ConnectionPoolCreatedEvent(this));\n      ensureMinPoolSize(this);\n    });\n  }\n\n  /** The address of the endpoint the pool is connected to */\n  get address(): string {\n    return this.options.hostAddress.toString();\n  }\n\n  /** An integer representing the SDAM generation of the pool */\n  get generation(): number {\n    return this[kGeneration];\n  }\n\n  /** An integer expressing how many total connections (active + in use) the pool currently has */\n  get totalConnectionCount(): number {\n    return this[kConnections].length + (this.options.maxPoolSize - this[kPermits]);\n  }\n\n  /** An integer expressing how many connections are currently available in the pool. */\n  get availableConnectionCount(): number {\n    return this[kConnections].length;\n  }\n\n  get waitQueueSize(): number {\n    return this[kWaitQueue].length;\n  }\n\n  get loadBalanced(): boolean {\n    return this.options.loadBalanced;\n  }\n\n  get serviceGenerations(): Map<string, number> {\n    return this[kServiceGenerations];\n  }\n\n  get currentCheckedOutCount(): number {\n    return this[kCheckedOut];\n  }\n\n  /**\n   * Get the metrics information for the pool when a wait queue timeout occurs.\n   */\n  private waitQueueErrorMetrics(): string {\n    return this[kMetrics].info(this.options.maxPoolSize);\n  }\n\n  /**\n   * Check a connection out of this pool. The connection will continue to be tracked, but no reference to it\n   * will be held by the pool. This means that if a connection is checked out it MUST be checked back in or\n   * explicitly destroyed by the new owner.\n   */\n  checkOut(callback: Callback<Connection>): void {\n    this.emit(\n      ConnectionPool.CONNECTION_CHECK_OUT_STARTED,\n      new ConnectionCheckOutStartedEvent(this)\n    );\n\n    if (this.closed) {\n      this.emit(\n        ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n        new ConnectionCheckOutFailedEvent(this, 'poolClosed')\n      );\n      callback(new PoolClosedError(this));\n      return;\n    }\n\n    const waitQueueMember: WaitQueueMember = { callback };\n    const waitQueueTimeoutMS = this.options.waitQueueTimeoutMS;\n    if (waitQueueTimeoutMS) {\n      waitQueueMember.timer = setTimeout(() => {\n        waitQueueMember[kCancelled] = true;\n        waitQueueMember.timer = undefined;\n\n        this.emit(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(this, 'timeout')\n        );\n        waitQueueMember.callback(\n          new WaitQueueTimeoutError(\n            this.loadBalanced\n              ? this.waitQueueErrorMetrics()\n              : 'Timed out while checking out a connection from connection pool',\n            this.address\n          )\n        );\n      }, waitQueueTimeoutMS);\n    }\n\n    this[kCheckedOut] = this[kCheckedOut] + 1;\n    this[kWaitQueue].push(waitQueueMember);\n    process.nextTick(processWaitQueue, this);\n  }\n\n  /**\n   * Check a connection into the pool.\n   *\n   * @param connection - The connection to check in\n   */\n  checkIn(connection: Connection): void {\n    const poolClosed = this.closed;\n    const stale = connectionIsStale(this, connection);\n    const willDestroy = !!(poolClosed || stale || connection.closed);\n\n    if (!willDestroy) {\n      connection.markAvailable();\n      this[kConnections].unshift(connection);\n    }\n\n    this[kCheckedOut] = this[kCheckedOut] - 1;\n    this.emit(ConnectionPool.CONNECTION_CHECKED_IN, new ConnectionCheckedInEvent(this, connection));\n\n    if (willDestroy) {\n      const reason = connection.closed ? 'error' : poolClosed ? 'poolClosed' : 'stale';\n      destroyConnection(this, connection, reason);\n    }\n\n    process.nextTick(processWaitQueue, this);\n  }\n\n  /**\n   * Clear the pool\n   *\n   * Pool reset is handled by incrementing the pool's generation count. Any existing connection of a\n   * previous generation will eventually be pruned during subsequent checkouts.\n   */\n  clear(serviceId?: ObjectId): void {\n    if (this.loadBalanced && serviceId) {\n      const sid = serviceId.toHexString();\n      const generation = this.serviceGenerations.get(sid);\n      // Only need to worry if the generation exists, since it should\n      // always be there but typescript needs the check.\n      if (generation == null) {\n        // TODO(NODE-3483)\n        throw new MongoRuntimeError('Service generations are required in load balancer mode.');\n      } else {\n        // Increment the generation for the service id.\n        this.serviceGenerations.set(sid, generation + 1);\n      }\n    } else {\n      this[kGeneration] += 1;\n    }\n\n    this.emit('connectionPoolCleared', new ConnectionPoolClearedEvent(this, serviceId));\n  }\n\n  /** Close the pool */\n  close(callback: Callback<void>): void;\n  close(options: CloseOptions, callback: Callback<void>): void;\n  close(_options?: CloseOptions | Callback<void>, _cb?: Callback<void>): void {\n    let options = _options as CloseOptions;\n    const callback = (_cb ?? _options) as Callback<void>;\n    if (typeof options === 'function') {\n      options = {};\n    }\n\n    options = Object.assign({ force: false }, options);\n    if (this.closed) {\n      return callback();\n    }\n\n    // immediately cancel any in-flight connections\n    this[kCancellationToken].emit('cancel');\n\n    // drain the wait queue\n    while (this.waitQueueSize) {\n      const waitQueueMember = this[kWaitQueue].pop();\n      if (waitQueueMember) {\n        if (waitQueueMember.timer) {\n          clearTimeout(waitQueueMember.timer);\n        }\n        if (!waitQueueMember[kCancelled]) {\n          // TODO(NODE-3483): Replace with MongoConnectionPoolClosedError\n          waitQueueMember.callback(new MongoRuntimeError('Connection pool closed'));\n        }\n      }\n    }\n\n    // clear the min pool size timer\n    const minPoolSizeTimer = this[kMinPoolSizeTimer];\n    if (minPoolSizeTimer) {\n      clearTimeout(minPoolSizeTimer);\n    }\n\n    // end the connection counter\n    if (typeof this[kConnectionCounter].return === 'function') {\n      this[kConnectionCounter].return(undefined);\n    }\n\n    // mark the pool as closed immediately\n    this.closed = true;\n    eachAsync<Connection>(\n      this[kConnections].toArray(),\n      (conn, cb) => {\n        this.emit(\n          ConnectionPool.CONNECTION_CLOSED,\n          new ConnectionClosedEvent(this, conn, 'poolClosed')\n        );\n        conn.destroy(options, cb);\n      },\n      err => {\n        this[kConnections].clear();\n        this.emit(ConnectionPool.CONNECTION_POOL_CLOSED, new ConnectionPoolClosedEvent(this));\n        callback(err);\n      }\n    );\n  }\n\n  /**\n   * Runs a lambda with an implicitly checked out connection, checking that connection back in when the lambda\n   * has completed by calling back.\n   *\n   * NOTE: please note the required signature of `fn`\n   *\n   * @remarks When in load balancer mode, connections can be pinned to cursors or transactions.\n   *   In these cases we pass the connection in to this method to ensure it is used and a new\n   *   connection is not checked out.\n   *\n   * @param conn - A pinned connection for use in load balancing mode.\n   * @param fn - A function which operates on a managed connection\n   * @param callback - The original callback\n   */\n  withConnection(\n    conn: Connection | undefined,\n    fn: WithConnectionCallback,\n    callback?: Callback<Connection>\n  ): void {\n    if (conn) {\n      // use the provided connection, and do _not_ check it in after execution\n      fn(undefined, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n      });\n\n      return;\n    }\n\n    this.checkOut((err, conn) => {\n      // don't callback with `err` here, we might want to act upon it inside `fn`\n      fn(err as MongoError, conn, (fnErr, result) => {\n        if (typeof callback === 'function') {\n          if (fnErr) {\n            callback(fnErr);\n          } else {\n            callback(undefined, result);\n          }\n        }\n\n        if (conn) {\n          this.checkIn(conn);\n        }\n      });\n    });\n  }\n}\n\nfunction ensureMinPoolSize(pool: ConnectionPool) {\n  if (pool.closed || pool.options.minPoolSize === 0) {\n    return;\n  }\n\n  const minPoolSize = pool.options.minPoolSize;\n  for (let i = pool.totalConnectionCount; i < minPoolSize; ++i) {\n    createConnection(pool);\n  }\n\n  pool[kMinPoolSizeTimer] = setTimeout(() => ensureMinPoolSize(pool), 10);\n}\n\nfunction connectionIsStale(pool: ConnectionPool, connection: Connection) {\n  const serviceId = connection.serviceId;\n  if (pool.loadBalanced && serviceId) {\n    const sid = serviceId.toHexString();\n    const generation = pool.serviceGenerations.get(sid);\n    return connection.generation !== generation;\n  }\n\n  return connection.generation !== pool[kGeneration];\n}\n\nfunction connectionIsIdle(pool: ConnectionPool, connection: Connection) {\n  return !!(pool.options.maxIdleTimeMS && connection.idleTime > pool.options.maxIdleTimeMS);\n}\n\nfunction createConnection(pool: ConnectionPool, callback?: Callback<Connection>) {\n  const connectOptions: ConnectionOptions = {\n    ...pool.options,\n    id: pool[kConnectionCounter].next().value,\n    generation: pool[kGeneration],\n    cancellationToken: pool[kCancellationToken]\n  };\n\n  pool[kPermits]--;\n  connect(connectOptions, (err, connection) => {\n    if (err || !connection) {\n      pool[kPermits]++;\n      pool[kLogger].debug(`connection attempt failed with error [${JSON.stringify(err)}]`);\n      if (typeof callback === 'function') {\n        callback(err);\n      }\n\n      return;\n    }\n\n    // The pool might have closed since we started trying to create a connection\n    if (pool.closed) {\n      connection.destroy({ force: true });\n      return;\n    }\n\n    // forward all events from the connection to the pool\n    for (const event of [...APM_EVENTS, Connection.CLUSTER_TIME_RECEIVED]) {\n      connection.on(event, (e: any) => pool.emit(event, e));\n    }\n\n    pool.emit(ConnectionPool.CONNECTION_CREATED, new ConnectionCreatedEvent(pool, connection));\n\n    if (pool.loadBalanced) {\n      connection.on(Connection.PINNED, pinType => pool[kMetrics].markPinned(pinType));\n      connection.on(Connection.UNPINNED, pinType => pool[kMetrics].markUnpinned(pinType));\n\n      const serviceId = connection.serviceId;\n      if (serviceId) {\n        let generation;\n        const sid = serviceId.toHexString();\n        if ((generation = pool.serviceGenerations.get(sid))) {\n          connection.generation = generation;\n        } else {\n          pool.serviceGenerations.set(sid, 0);\n          connection.generation = 0;\n        }\n      }\n    }\n\n    connection.markAvailable();\n    pool.emit(ConnectionPool.CONNECTION_READY, new ConnectionReadyEvent(pool, connection));\n\n    // if a callback has been provided, check out the connection immediately\n    if (typeof callback === 'function') {\n      callback(undefined, connection);\n      return;\n    }\n\n    // otherwise add it to the pool for later acquisition, and try to process the wait queue\n    pool[kConnections].push(connection);\n    process.nextTick(processWaitQueue, pool);\n  });\n}\n\nfunction destroyConnection(pool: ConnectionPool, connection: Connection, reason: string) {\n  pool.emit(ConnectionPool.CONNECTION_CLOSED, new ConnectionClosedEvent(pool, connection, reason));\n\n  // allow more connections to be created\n  pool[kPermits]++;\n\n  // destroy the connection\n  process.nextTick(() => connection.destroy());\n}\n\nfunction processWaitQueue(pool: ConnectionPool) {\n  if (pool.closed || pool[kProcessingWaitQueue]) {\n    return;\n  }\n\n  pool[kProcessingWaitQueue] = true;\n  while (pool.waitQueueSize) {\n    const waitQueueMember = pool[kWaitQueue].peekFront();\n    if (!waitQueueMember) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    if (waitQueueMember[kCancelled]) {\n      pool[kWaitQueue].shift();\n      continue;\n    }\n\n    if (!pool.availableConnectionCount) {\n      break;\n    }\n\n    const connection = pool[kConnections].shift();\n    if (!connection) {\n      break;\n    }\n\n    const isStale = connectionIsStale(pool, connection);\n    const isIdle = connectionIsIdle(pool, connection);\n    if (!isStale && !isIdle && !connection.closed) {\n      pool.emit(\n        ConnectionPool.CONNECTION_CHECKED_OUT,\n        new ConnectionCheckedOutEvent(pool, connection)\n      );\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n\n      pool[kWaitQueue].shift();\n      waitQueueMember.callback(undefined, connection);\n    } else {\n      const reason = connection.closed ? 'error' : isStale ? 'stale' : 'idle';\n      destroyConnection(pool, connection, reason);\n    }\n  }\n\n  const maxPoolSize = pool.options.maxPoolSize;\n  if (pool.waitQueueSize && (maxPoolSize <= 0 || pool.totalConnectionCount < maxPoolSize)) {\n    createConnection(pool, (err, connection) => {\n      const waitQueueMember = pool[kWaitQueue].shift();\n      if (!waitQueueMember || waitQueueMember[kCancelled]) {\n        if (!err && connection) {\n          pool[kConnections].push(connection);\n        }\n\n        pool[kProcessingWaitQueue] = false;\n        return;\n      }\n\n      if (err) {\n        pool.emit(\n          ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n          new ConnectionCheckOutFailedEvent(pool, err)\n        );\n      } else if (connection) {\n        pool.emit(\n          ConnectionPool.CONNECTION_CHECKED_OUT,\n          new ConnectionCheckedOutEvent(pool, connection)\n        );\n      }\n\n      if (waitQueueMember.timer) {\n        clearTimeout(waitQueueMember.timer);\n      }\n      waitQueueMember.callback(err, connection);\n      pool[kProcessingWaitQueue] = false;\n      process.nextTick(() => processWaitQueue(pool));\n    });\n  } else {\n    pool[kProcessingWaitQueue] = false;\n  }\n}\n\nexport const CMAP_EVENTS = [\n  ConnectionPool.CONNECTION_POOL_CREATED,\n  ConnectionPool.CONNECTION_POOL_CLOSED,\n  ConnectionPool.CONNECTION_CREATED,\n  ConnectionPool.CONNECTION_READY,\n  ConnectionPool.CONNECTION_CLOSED,\n  ConnectionPool.CONNECTION_CHECK_OUT_STARTED,\n  ConnectionPool.CONNECTION_CHECK_OUT_FAILED,\n  ConnectionPool.CONNECTION_CHECKED_OUT,\n  ConnectionPool.CONNECTION_CHECKED_IN,\n  ConnectionPool.CONNECTION_POOL_CLEARED\n] as const;\n\n/**\n * A callback provided to `withConnection`\n * @internal\n *\n * @param error - An error instance representing the error during the execution.\n * @param connection - The managed connection which was checked out of the pool.\n * @param callback - A function to call back after connection management is complete\n */\nexport type WithConnectionCallback = (\n  error: MongoError | undefined,\n  connection: Connection | undefined,\n  callback: Callback<Connection>\n) => void;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}