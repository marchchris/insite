{"ast":null,"code":"\"use strict\";\n\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.updateSessionFromResponse = exports.applySession = exports.commandSupportsReadConcern = exports.ServerSessionPool = exports.ServerSession = exports.maybeClearPinnedConnection = exports.ClientSession = void 0;\nconst promise_provider_1 = require(\"./promise_provider\");\nconst bson_1 = require(\"./bson\");\nconst read_preference_1 = require(\"./read_preference\");\nconst transactions_1 = require(\"./transactions\");\nconst common_1 = require(\"./sdam/common\");\nconst shared_1 = require(\"./cmap/wire_protocol/shared\");\nconst error_1 = require(\"./error\");\nconst utils_1 = require(\"./utils\");\nconst execute_operation_1 = require(\"./operations/execute_operation\");\nconst run_command_1 = require(\"./operations/run_command\");\nconst connection_1 = require(\"./cmap/connection\");\nconst metrics_1 = require(\"./cmap/metrics\");\nconst mongo_types_1 = require(\"./mongo_types\");\nconst read_concern_1 = require(\"./read_concern\");\nconst minWireVersionForShardedTransactions = 8;\nfunction assertAlive(session, callback) {\n  if (session.serverSession == null) {\n    const error = new error_1.MongoExpiredSessionError();\n    if (typeof callback === 'function') {\n      callback(error);\n      return false;\n    }\n    throw error;\n  }\n  return true;\n}\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nclass ClientSession extends mongo_types_1.TypedEventEmitter {\n  /**\n   * Create a client session.\n   * @internal\n   * @param topology - The current client's topology (Internal Class)\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(topology, sessionPool, options, clientOptions) {\n    super();\n    /** @internal */\n    this[_a] = false;\n    if (topology == null) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a topology');\n    }\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new error_1.MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n    options = options !== null && options !== void 0 ? options : {};\n    if (options.snapshot === true) {\n      this[kSnapshotEnabled] = true;\n      if (options.causalConsistency === true) {\n        throw new error_1.MongoInvalidArgumentError('Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive');\n      }\n    }\n    this.topology = topology;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this[kServerSession] = undefined;\n    this.supports = {\n      causalConsistency: options.snapshot !== true && options.causalConsistency !== false\n    };\n    this.clusterTime = options.initialClusterTime;\n    this.operationTime = undefined;\n    this.explicit = !!options.explicit;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new transactions_1.Transaction();\n  }\n  /** The server id associated with this session */\n  get id() {\n    var _b;\n    return (_b = this.serverSession) === null || _b === void 0 ? void 0 : _b.id;\n  }\n  get serverSession() {\n    if (this[kServerSession] == null) {\n      this[kServerSession] = this.sessionPool.acquire();\n    }\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this[kServerSession];\n  }\n  /** Whether or not this session is configured for snapshot reads */\n  get snapshotEnabled() {\n    return this[kSnapshotEnabled];\n  }\n  get loadBalanced() {\n    return this.topology.description.type === common_1.TopologyType.LoadBalanced;\n  }\n  /** @internal */\n  get pinnedConnection() {\n    return this[kPinnedConnection];\n  }\n  /** @internal */\n  pin(conn) {\n    if (this[kPinnedConnection]) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n    this[kPinnedConnection] = conn;\n    conn.emit(connection_1.Connection.PINNED, this.inTransaction() ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n  }\n  /** @internal */\n  unpin(options) {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n    this.transaction.unpinServer();\n  }\n  get isPinned() {\n    return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n  }\n  endSession(options, callback) {\n    if (typeof options === 'function') callback = options, options = {};\n    const finalOptions = {\n      force: true,\n      ...options\n    };\n    return (0, utils_1.maybePromise)(callback, done => {\n      if (this.hasEnded) {\n        maybeClearPinnedConnection(this, finalOptions);\n        return done();\n      }\n      const completeEndSession = () => {\n        maybeClearPinnedConnection(this, finalOptions);\n        // release the server session back to the pool\n        this.sessionPool.release(this.serverSession);\n        this[kServerSession] = undefined;\n        // mark the session as ended, and emit a signal\n        this.hasEnded = true;\n        this.emit('ended', this);\n        // spec indicates that we should ignore all errors for `endSessions`\n        done();\n      };\n      if (this.serverSession && this.inTransaction()) {\n        this.abortTransaction(err => {\n          if (err) return done(err);\n          completeEndSession();\n        });\n        return;\n      }\n      completeEndSession();\n    });\n  }\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime) {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n  advanceClusterTime(clusterTime) {\n    var _b, _c;\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must be an object');\n    }\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new error_1.MongoInvalidArgumentError('input cluster time \"clusterTime\" property must be a valid BSON Timestamp');\n    }\n    if (!clusterTime.signature || ((_b = clusterTime.signature.hash) === null || _b === void 0 ? void 0 : _b._bsontype) !== 'Binary' || typeof clusterTime.signature.keyId !== 'number' && ((_c = clusterTime.signature.keyId) === null || _c === void 0 ? void 0 : _c._bsontype) !== 'Long' // apparently we decode the key to number?\n    ) {\n      throw new error_1.MongoInvalidArgumentError('input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId');\n    }\n    (0, common_1._advanceClusterTime)(this, clusterTime);\n  }\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n  equals(session) {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n  /** Increment the transaction number on the internal ServerSession */\n  incrementTransactionNumber() {\n    if (this.serverSession) {\n      this.serverSession.txnNumber = typeof this.serverSession.txnNumber === 'number' ? this.serverSession.txnNumber + 1 : 0;\n    }\n  }\n  /** @returns whether this session is currently in a transaction or not */\n  inTransaction() {\n    return this.transaction.isActive;\n  }\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param options - Options for the transaction\n   */\n  startTransaction(options) {\n    var _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\n    if (this[kSnapshotEnabled]) {\n      throw new error_1.MongoCompatibilityError('Transactions are not allowed with snapshot sessions');\n    }\n    assertAlive(this);\n    if (this.inTransaction()) {\n      throw new error_1.MongoTransactionError('Transaction already in progress');\n    }\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n    const topologyMaxWireVersion = (0, utils_1.maxWireVersion)(this.topology);\n    if ((0, shared_1.isSharded)(this.topology) && topologyMaxWireVersion != null && topologyMaxWireVersion < minWireVersionForShardedTransactions) {\n      throw new error_1.MongoCompatibilityError('Transactions are not supported on sharded clusters in MongoDB < 4.2.');\n    }\n    // increment txnNumber\n    this.incrementTransactionNumber();\n    // create transaction state\n    this.transaction = new transactions_1.Transaction({\n      readConcern: (_c = (_b = options === null || options === void 0 ? void 0 : options.readConcern) !== null && _b !== void 0 ? _b : this.defaultTransactionOptions.readConcern) !== null && _c !== void 0 ? _c : (_d = this.clientOptions) === null || _d === void 0 ? void 0 : _d.readConcern,\n      writeConcern: (_f = (_e = options === null || options === void 0 ? void 0 : options.writeConcern) !== null && _e !== void 0 ? _e : this.defaultTransactionOptions.writeConcern) !== null && _f !== void 0 ? _f : (_g = this.clientOptions) === null || _g === void 0 ? void 0 : _g.writeConcern,\n      readPreference: (_j = (_h = options === null || options === void 0 ? void 0 : options.readPreference) !== null && _h !== void 0 ? _h : this.defaultTransactionOptions.readPreference) !== null && _j !== void 0 ? _j : (_k = this.clientOptions) === null || _k === void 0 ? void 0 : _k.readPreference,\n      maxCommitTimeMS: (_l = options === null || options === void 0 ? void 0 : options.maxCommitTimeMS) !== null && _l !== void 0 ? _l : this.defaultTransactionOptions.maxCommitTimeMS\n    });\n    this.transaction.transition(transactions_1.TxnState.STARTING_TRANSACTION);\n  }\n  commitTransaction(callback) {\n    return (0, utils_1.maybePromise)(callback, cb => endTransaction(this, 'commitTransaction', cb));\n  }\n  abortTransaction(callback) {\n    return (0, utils_1.maybePromise)(callback, cb => endTransaction(this, 'abortTransaction', cb));\n  }\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n  toBSON() {\n    throw new error_1.MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n  /**\n   * Runs a provided lambda within a transaction, retrying either the commit operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\n   * return a Promise will result in undefined behavior.\n   *\n   * @param fn - A lambda to run within a transaction\n   * @param options - Optional settings for the transaction\n   */\n  withTransaction(fn, options) {\n    const startTime = (0, utils_1.now)();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n}\nexports.ClientSession = ClientSession;\n_a = kSnapshotEnabled;\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set(['CannotSatisfyWriteConcern', 'UnknownReplWriteConcern', 'UnsatisfiableWriteConcern']);\nfunction hasNotTimedOut(startTime, max) {\n  return (0, utils_1.calculateDurationInMs)(startTime) < max;\n}\nfunction isUnknownTransactionCommitResult(err) {\n  const isNonDeterministicWriteConcernError = err instanceof error_1.MongoServerError && err.codeName && NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n  return isMaxTimeMSExpiredError(err) || !isNonDeterministicWriteConcernError && err.code !== error_1.MONGODB_ERROR_CODES.UnsatisfiableWriteConcern && err.code !== error_1.MONGODB_ERROR_CODES.UnknownReplWriteConcern;\n}\nfunction maybeClearPinnedConnection(session, options) {\n  // unpin a connection if it has been pinned\n  const conn = session[kPinnedConnection];\n  const error = options === null || options === void 0 ? void 0 : options.error;\n  if (session.inTransaction() && error && error instanceof error_1.MongoError && error.hasErrorLabel('TransientTransactionError')) {\n    return;\n  }\n  // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n  if (conn) {\n    const servers = Array.from(session.topology.s.servers.values());\n    const loadBalancer = servers[0];\n    if ((options === null || options === void 0 ? void 0 : options.error) == null || (options === null || options === void 0 ? void 0 : options.force)) {\n      loadBalancer.s.pool.checkIn(conn);\n      conn.emit(connection_1.Connection.UNPINNED, session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION ? metrics_1.ConnectionPoolMetrics.TXN : metrics_1.ConnectionPoolMetrics.CURSOR);\n      if (options === null || options === void 0 ? void 0 : options.forceClear) {\n        loadBalancer.s.pool.clear(conn.serviceId);\n      }\n    }\n    session[kPinnedConnection] = undefined;\n  }\n}\nexports.maybeClearPinnedConnection = maybeClearPinnedConnection;\nfunction isMaxTimeMSExpiredError(err) {\n  if (err == null || !(err instanceof error_1.MongoServerError)) {\n    return false;\n  }\n  return err.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired || err.writeConcernError && err.writeConcernError.code === error_1.MONGODB_ERROR_CODES.MaxTimeMSExpired;\n}\nfunction attemptTransactionCommit(session, startTime, fn, options) {\n  return session.commitTransaction().catch(err => {\n    if (err instanceof error_1.MongoError && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) && !isMaxTimeMSExpiredError(err)) {\n      if (err.hasErrorLabel('UnknownTransactionCommitResult')) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n      if (err.hasErrorLabel('TransientTransactionError')) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n    throw err;\n  });\n}\nconst USER_EXPLICIT_TXN_END_STATES = new Set([transactions_1.TxnState.NO_TRANSACTION, transactions_1.TxnState.TRANSACTION_COMMITTED, transactions_1.TxnState.TRANSACTION_ABORTED]);\nfunction userExplicitlyEndedTransaction(session) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\nfunction attemptTransaction(session, startTime, fn, options) {\n  const Promise = promise_provider_1.PromiseProvider.get();\n  session.startTransaction(options);\n  let promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n  if (!(0, utils_1.isPromiseLike)(promise)) {\n    session.abortTransaction();\n    throw new error_1.MongoInvalidArgumentError('Function provided to `withTransaction` must return a Promise');\n  }\n  return promise.then(() => {\n    if (userExplicitlyEndedTransaction(session)) {\n      return;\n    }\n    return attemptTransactionCommit(session, startTime, fn, options);\n  }, err => {\n    function maybeRetryOrThrow(err) {\n      if (err instanceof error_1.MongoError && err.hasErrorLabel('TransientTransactionError') && hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n      if (isMaxTimeMSExpiredError(err)) {\n        err.addErrorLabel('UnknownTransactionCommitResult');\n      }\n      throw err;\n    }\n    if (session.transaction.isActive) {\n      return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n    }\n    return maybeRetryOrThrow(err);\n  });\n}\nfunction endTransaction(session, commandName, callback) {\n  if (!assertAlive(session, callback)) {\n    // checking result in case callback was called\n    return;\n  }\n  // handle any initial problematic cases\n  const txnState = session.transaction.state;\n  if (txnState === transactions_1.TxnState.NO_TRANSACTION) {\n    callback(new error_1.MongoTransactionError('No transaction started'));\n    return;\n  }\n  if (commandName === 'commitTransaction') {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call commitTransaction after calling abortTransaction'));\n      return;\n    }\n  } else {\n    if (txnState === transactions_1.TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_ABORTED) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n    if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED || txnState === transactions_1.TxnState.TRANSACTION_COMMITTED_EMPTY) {\n      callback(new error_1.MongoTransactionError('Cannot call abortTransaction after calling commitTransaction'));\n      return;\n    }\n  }\n  // construct and send the command\n  const command = {\n    [commandName]: 1\n  };\n  // apply a writeConcern if specified\n  let writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = {\n      w: session.clientOptions.writeConcern.w\n    };\n  }\n  if (txnState === transactions_1.TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({\n      wtimeout: 10000\n    }, writeConcern, {\n      w: 'majority'\n    });\n  }\n  if (writeConcern) {\n    Object.assign(command, {\n      writeConcern\n    });\n  }\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, {\n      maxTimeMS: session.transaction.options.maxTimeMS\n    });\n  }\n  function commandHandler(e, r) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(transactions_1.TxnState.TRANSACTION_ABORTED);\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, {\n          force: false\n        });\n      }\n      // The spec indicates that we should ignore all errors on `abortTransaction`\n      return callback();\n    }\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_COMMITTED);\n    if (e) {\n      if (e instanceof error_1.MongoNetworkError || e instanceof error_1.MongoWriteConcernError || (0, error_1.isRetryableError)(e) || isMaxTimeMSExpiredError(e)) {\n        if (isUnknownTransactionCommitResult(e)) {\n          e.addErrorLabel('UnknownTransactionCommitResult');\n          // per txns spec, must unpin session in this case\n          session.unpin({\n            error: e\n          });\n        }\n      } else if (e.hasErrorLabel('TransientTransactionError')) {\n        session.unpin({\n          error: e\n        });\n      }\n    }\n    callback(e, r);\n  }\n  // Assumption here that commandName is \"commitTransaction\" or \"abortTransaction\"\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n  // send the command\n  (0, execute_operation_1.executeOperation)(session.topology, new run_command_1.RunAdminCommandOperation(undefined, command, {\n    session,\n    readPreference: read_preference_1.ReadPreference.primary,\n    bypassPinningCheck: true\n  }), (err, reply) => {\n    if (command.abortTransaction) {\n      // always unpin on abort regardless of command outcome\n      session.unpin();\n    }\n    if (err && (0, error_1.isRetryableError)(err)) {\n      // SPEC-1185: apply majority write concern when retrying commitTransaction\n      if (command.commitTransaction) {\n        // per txns spec, must unpin session in this case\n        session.unpin({\n          force: true\n        });\n        command.writeConcern = Object.assign({\n          wtimeout: 10000\n        }, command.writeConcern, {\n          w: 'majority'\n        });\n      }\n      return (0, execute_operation_1.executeOperation)(session.topology, new run_command_1.RunAdminCommandOperation(undefined, command, {\n        session,\n        readPreference: read_preference_1.ReadPreference.primary,\n        bypassPinningCheck: true\n      }), (_err, _reply) => commandHandler(_err, _reply));\n    }\n    commandHandler(err, reply);\n  });\n}\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nclass ServerSession {\n  /** @internal */\n  constructor() {\n    this.id = {\n      id: new bson_1.Binary((0, utils_1.uuidV4)(), bson_1.Binary.SUBTYPE_UUID)\n    };\n    this.lastUse = (0, utils_1.now)();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n  hasTimedOut(sessionTimeoutMinutes) {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round((0, utils_1.calculateDurationInMs)(this.lastUse) % 86400000 % 3600000 / 60000);\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n}\nexports.ServerSession = ServerSession;\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nclass ServerSessionPool {\n  constructor(topology) {\n    if (topology == null) {\n      throw new error_1.MongoRuntimeError('ServerSessionPool requires a topology');\n    }\n    this.topology = topology;\n    this.sessions = [];\n  }\n  /** Ends all sessions in the session pool */\n  endAllPooledSessions(callback) {\n    if (this.sessions.length) {\n      this.topology.endSessions(this.sessions.map(session => session.id), () => {\n        this.sessions = [];\n        if (typeof callback === 'function') {\n          callback();\n        }\n      });\n      return;\n    }\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n  acquire() {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes || 10;\n    while (this.sessions.length) {\n      const session = this.sessions.shift();\n      if (session && (this.topology.loadBalanced || !session.hasTimedOut(sessionTimeoutMinutes))) {\n        return session;\n      }\n    }\n    return new ServerSession();\n  }\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n  release(session) {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n    if (this.topology.loadBalanced && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\nexports.ServerSessionPool = ServerSessionPool;\n// TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nfunction commandSupportsReadConcern(command, options) {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n  if (command.mapReduce && options && options.out && (options.out.inline === 1 || options.out === 'inline')) {\n    return true;\n  }\n  return false;\n}\nexports.commandSupportsReadConcern = commandSupportsReadConcern;\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n */\nfunction applySession(session, command, options) {\n  var _b;\n  // TODO: merge this with `assertAlive`, did not want to throw a try/catch here\n  if (session.hasEnded) {\n    return new error_1.MongoExpiredSessionError();\n  }\n  const serverSession = session.serverSession;\n  if (serverSession == null) {\n    return new error_1.MongoRuntimeError('Unable to acquire server session');\n  }\n  // SPEC-1019: silently ignore explicit session with unacknowledged write for backwards compatibility\n  // FIXME: NODE-2781, this check for write concern shouldn't be happening here, but instead during command construction\n  if (options && options.writeConcern && options.writeConcern.w === 0) {\n    if (session && session.explicit) {\n      return new error_1.MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n    return;\n  }\n  // mark the last use of this session, and apply the `lsid`\n  serverSession.lastUse = (0, utils_1.now)();\n  command.lsid = serverSession.id;\n  // first apply non-transaction-specific sessions data\n  const inTransaction = session.inTransaction() || (0, transactions_1.isTransactionCommand)(command);\n  const isRetryableWrite = (options === null || options === void 0 ? void 0 : options.willRetryWrite) || false;\n  if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {\n    command.txnNumber = bson_1.Long.fromNumber(serverSession.txnNumber);\n  }\n  if (!inTransaction) {\n    if (session.transaction.state !== transactions_1.TxnState.NO_TRANSACTION) {\n      session.transaction.transition(transactions_1.TxnState.NO_TRANSACTION);\n    }\n    if (session.supports.causalConsistency && session.operationTime && commandSupportsReadConcern(command, options)) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || {\n        level: read_concern_1.ReadConcernLevel.snapshot\n      };\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, {\n          atClusterTime: session[kSnapshotTime]\n        });\n      }\n    }\n    return;\n  }\n  // now attempt to apply transaction-specific sessions data\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n  if (session.transaction.state === transactions_1.TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(transactions_1.TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n    const readConcern = session.transaction.options.readConcern || ((_b = session === null || session === void 0 ? void 0 : session.clientOptions) === null || _b === void 0 ? void 0 : _b.readConcern);\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, {\n        afterClusterTime: session.operationTime\n      });\n    }\n  }\n}\nexports.applySession = applySession;\nfunction updateSessionFromResponse(session, document) {\n  var _b;\n  if (document.$clusterTime) {\n    (0, common_1._advanceClusterTime)(session, document.$clusterTime);\n  }\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n  if ((session === null || session === void 0 ? void 0 : session[kSnapshotEnabled]) && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = ((_b = document.cursor) === null || _b === void 0 ? void 0 : _b.atClusterTime) || document.atClusterTime;\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\nexports.updateSessionFromResponse = updateSessionFromResponse;","map":{"version":3,"names":["promise_provider_1","require","bson_1","read_preference_1","transactions_1","common_1","shared_1","error_1","utils_1","execute_operation_1","run_command_1","connection_1","metrics_1","mongo_types_1","read_concern_1","minWireVersionForShardedTransactions","assertAlive","session","callback","serverSession","error","MongoExpiredSessionError","kServerSession","Symbol","kSnapshotTime","kSnapshotEnabled","kPinnedConnection","ClientSession","TypedEventEmitter","constructor","topology","sessionPool","options","clientOptions","_a","MongoRuntimeError","ServerSessionPool","snapshot","causalConsistency","MongoInvalidArgumentError","hasEnded","undefined","supports","clusterTime","initialClusterTime","operationTime","explicit","owner","defaultTransactionOptions","Object","assign","transaction","Transaction","id","_b","acquire","snapshotEnabled","loadBalanced","description","type","TopologyType","LoadBalanced","pinnedConnection","pin","conn","TypeError","emit","Connection","PINNED","inTransaction","ConnectionPoolMetrics","TXN","CURSOR","unpin","maybeClearPinnedConnection","unpinServer","isPinned","endSession","finalOptions","force","maybePromise","done","completeEndSession","release","abortTransaction","err","advanceOperationTime","greaterThan","advanceClusterTime","_bsontype","signature","hash","keyId","_c","_advanceClusterTime","equals","buffer","incrementTransactionNumber","txnNumber","isActive","startTransaction","MongoCompatibilityError","MongoTransactionError","isCommitted","topologyMaxWireVersion","maxWireVersion","isSharded","readConcern","_d","writeConcern","_f","_e","_g","readPreference","_j","_h","_k","maxCommitTimeMS","_l","transition","TxnState","STARTING_TRANSACTION","commitTransaction","cb","endTransaction","toBSON","withTransaction","fn","startTime","now","attemptTransaction","exports","MAX_WITH_TRANSACTION_TIMEOUT","NON_DETERMINISTIC_WRITE_CONCERN_ERRORS","Set","hasNotTimedOut","max","calculateDurationInMs","isUnknownTransactionCommitResult","isNonDeterministicWriteConcernError","MongoServerError","codeName","has","isMaxTimeMSExpiredError","code","MONGODB_ERROR_CODES","UnsatisfiableWriteConcern","UnknownReplWriteConcern","MongoError","hasErrorLabel","servers","Array","from","s","values","loadBalancer","pool","checkIn","UNPINNED","state","NO_TRANSACTION","forceClear","clear","serviceId","MaxTimeMSExpired","writeConcernError","attemptTransactionCommit","catch","USER_EXPLICIT_TXN_END_STATES","TRANSACTION_COMMITTED","TRANSACTION_ABORTED","userExplicitlyEndedTransaction","Promise","PromiseProvider","get","promise","reject","isPromiseLike","then","maybeRetryOrThrow","addErrorLabel","commandName","txnState","TRANSACTION_COMMITTED_EMPTY","command","w","wtimeout","maxTimeMS","commandHandler","e","r","MongoNetworkError","MongoWriteConcernError","isRetryableError","recoveryToken","executeOperation","RunAdminCommandOperation","ReadPreference","primary","bypassPinningCheck","reply","_err","_reply","ServerSession","Binary","uuidV4","SUBTYPE_UUID","lastUse","isDirty","hasTimedOut","sessionTimeoutMinutes","idleTimeMinutes","Math","round","sessions","endAllPooledSessions","length","endSessions","map","logicalSessionTimeoutMinutes","shift","unshift","pooledSession","pop","commandSupportsReadConcern","aggregate","count","distinct","find","geoNear","mapReduce","out","inline","applySession","MongoAPIError","lsid","isTransactionCommand","isRetryableWrite","willRetryWrite","Long","fromNumber","afterClusterTime","level","ReadConcernLevel","atClusterTime","autocommit","TRANSACTION_IN_PROGRESS","updateSessionFromResponse","document","$clusterTime","_recoveryToken","cursor"],"sources":["C:\\Users\\chris\\Desktop\\insite\\node_modules\\mongodb\\src\\sessions.ts"],"sourcesContent":["import { PromiseProvider } from './promise_provider';\nimport { Binary, Long, Timestamp, Document } from './bson';\nimport { ReadPreference } from './read_preference';\nimport { isTransactionCommand, TxnState, Transaction, TransactionOptions } from './transactions';\nimport { _advanceClusterTime, ClusterTime, TopologyType } from './sdam/common';\nimport { isSharded } from './cmap/wire_protocol/shared';\nimport {\n  MongoError,\n  MongoInvalidArgumentError,\n  isRetryableError,\n  MongoCompatibilityError,\n  MongoNetworkError,\n  MongoWriteConcernError,\n  MONGODB_ERROR_CODES,\n  MongoServerError,\n  MongoDriverError,\n  MongoAPIError,\n  AnyError,\n  MongoExpiredSessionError,\n  MongoTransactionError,\n  MongoRuntimeError\n} from './error';\nimport {\n  now,\n  calculateDurationInMs,\n  Callback,\n  isPromiseLike,\n  uuidV4,\n  maxWireVersion,\n  maybePromise\n} from './utils';\nimport type { Topology } from './sdam/topology';\nimport type { MongoOptions } from './mongo_client';\nimport { executeOperation } from './operations/execute_operation';\nimport { RunAdminCommandOperation } from './operations/run_command';\nimport type { AbstractCursor } from './cursor/abstract_cursor';\nimport type { CommandOptions } from './cmap/connection';\nimport { Connection } from './cmap/connection';\nimport { ConnectionPoolMetrics } from './cmap/metrics';\nimport type { WriteConcern } from './write_concern';\nimport { TypedEventEmitter } from './mongo_types';\nimport { ReadConcernLevel } from './read_concern';\n\nconst minWireVersionForShardedTransactions = 8;\n\nfunction assertAlive(session: ClientSession, callback?: Callback): boolean {\n  if (session.serverSession == null) {\n    const error = new MongoExpiredSessionError();\n    if (typeof callback === 'function') {\n      callback(error);\n      return false;\n    }\n\n    throw error;\n  }\n\n  return true;\n}\n\n/** @public */\nexport interface ClientSessionOptions {\n  /** Whether causal consistency should be enabled on this session */\n  causalConsistency?: boolean;\n  /** Whether all read operations should be read from the same snapshot for this session (NOTE: not compatible with `causalConsistency=true`) */\n  snapshot?: boolean;\n  /** The default TransactionOptions to use for transactions started on this session. */\n  defaultTransactionOptions?: TransactionOptions;\n\n  /** @internal */\n  owner?: symbol | AbstractCursor;\n  /** @internal */\n  explicit?: boolean;\n  /** @internal */\n  initialClusterTime?: ClusterTime;\n}\n\n/** @public */\nexport type WithTransactionCallback<T = void> = (session: ClientSession) => Promise<T>;\n\n/** @public */\nexport type ClientSessionEvents = {\n  ended(session: ClientSession): void;\n};\n\n/** @internal */\nconst kServerSession = Symbol('serverSession');\n/** @internal */\nconst kSnapshotTime = Symbol('snapshotTime');\n/** @internal */\nconst kSnapshotEnabled = Symbol('snapshotEnabled');\n/** @internal */\nconst kPinnedConnection = Symbol('pinnedConnection');\n\n/** @public */\nexport interface EndSessionOptions {\n  /**\n   * An optional error which caused the call to end this session\n   * @internal\n   */\n  error?: AnyError;\n  force?: boolean;\n  forceClear?: boolean;\n}\n\n/**\n * A class representing a client session on the server\n *\n * NOTE: not meant to be instantiated directly.\n * @public\n */\nexport class ClientSession extends TypedEventEmitter<ClientSessionEvents> {\n  /** @internal */\n  topology: Topology;\n  /** @internal */\n  sessionPool: ServerSessionPool;\n  hasEnded: boolean;\n  clientOptions?: MongoOptions;\n  supports: { causalConsistency: boolean };\n  clusterTime?: ClusterTime;\n  operationTime?: Timestamp;\n  explicit: boolean;\n  /** @internal */\n  owner?: symbol | AbstractCursor;\n  defaultTransactionOptions: TransactionOptions;\n  transaction: Transaction;\n  /** @internal */\n  [kServerSession]?: ServerSession;\n  /** @internal */\n  [kSnapshotTime]?: Timestamp;\n  /** @internal */\n  [kSnapshotEnabled] = false;\n  /** @internal */\n  [kPinnedConnection]?: Connection;\n\n  /**\n   * Create a client session.\n   * @internal\n   * @param topology - The current client's topology (Internal Class)\n   * @param sessionPool - The server session pool (Internal Class)\n   * @param options - Optional settings\n   * @param clientOptions - Optional settings provided when creating a MongoClient\n   */\n  constructor(\n    topology: Topology,\n    sessionPool: ServerSessionPool,\n    options: ClientSessionOptions,\n    clientOptions?: MongoOptions\n  ) {\n    super();\n\n    if (topology == null) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('ClientSession requires a topology');\n    }\n\n    if (sessionPool == null || !(sessionPool instanceof ServerSessionPool)) {\n      // TODO(NODE-3483)\n      throw new MongoRuntimeError('ClientSession requires a ServerSessionPool');\n    }\n\n    options = options ?? {};\n\n    if (options.snapshot === true) {\n      this[kSnapshotEnabled] = true;\n      if (options.causalConsistency === true) {\n        throw new MongoInvalidArgumentError(\n          'Properties \"causalConsistency\" and \"snapshot\" are mutually exclusive'\n        );\n      }\n    }\n\n    this.topology = topology;\n    this.sessionPool = sessionPool;\n    this.hasEnded = false;\n    this.clientOptions = clientOptions;\n    this[kServerSession] = undefined;\n\n    this.supports = {\n      causalConsistency: options.snapshot !== true && options.causalConsistency !== false\n    };\n\n    this.clusterTime = options.initialClusterTime;\n\n    this.operationTime = undefined;\n    this.explicit = !!options.explicit;\n    this.owner = options.owner;\n    this.defaultTransactionOptions = Object.assign({}, options.defaultTransactionOptions);\n    this.transaction = new Transaction();\n  }\n\n  /** The server id associated with this session */\n  get id(): ServerSessionId | undefined {\n    return this.serverSession?.id;\n  }\n\n  get serverSession(): ServerSession {\n    if (this[kServerSession] == null) {\n      this[kServerSession] = this.sessionPool.acquire();\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    return this[kServerSession]!;\n  }\n\n  /** Whether or not this session is configured for snapshot reads */\n  get snapshotEnabled(): boolean {\n    return this[kSnapshotEnabled];\n  }\n\n  get loadBalanced(): boolean {\n    return this.topology.description.type === TopologyType.LoadBalanced;\n  }\n\n  /** @internal */\n  get pinnedConnection(): Connection | undefined {\n    return this[kPinnedConnection];\n  }\n\n  /** @internal */\n  pin(conn: Connection): void {\n    if (this[kPinnedConnection]) {\n      throw TypeError('Cannot pin multiple connections to the same session');\n    }\n\n    this[kPinnedConnection] = conn;\n    conn.emit(\n      Connection.PINNED,\n      this.inTransaction() ? ConnectionPoolMetrics.TXN : ConnectionPoolMetrics.CURSOR\n    );\n  }\n\n  /** @internal */\n  unpin(options?: { force?: boolean; forceClear?: boolean; error?: AnyError }): void {\n    if (this.loadBalanced) {\n      return maybeClearPinnedConnection(this, options);\n    }\n\n    this.transaction.unpinServer();\n  }\n\n  get isPinned(): boolean {\n    return this.loadBalanced ? !!this[kPinnedConnection] : this.transaction.isPinned;\n  }\n\n  /**\n   * Ends this session on the server\n   *\n   * @param options - Optional settings. Currently reserved for future use\n   * @param callback - Optional callback for completion of this operation\n   */\n  endSession(): Promise<void>;\n  endSession(callback: Callback<void>): void;\n  endSession(options: EndSessionOptions): Promise<void>;\n  endSession(options: EndSessionOptions, callback: Callback<void>): void;\n  endSession(\n    options?: EndSessionOptions | Callback<void>,\n    callback?: Callback<void>\n  ): void | Promise<void> {\n    if (typeof options === 'function') (callback = options), (options = {});\n    const finalOptions = { force: true, ...options };\n\n    return maybePromise(callback, done => {\n      if (this.hasEnded) {\n        maybeClearPinnedConnection(this, finalOptions);\n        return done();\n      }\n\n      const completeEndSession = () => {\n        maybeClearPinnedConnection(this, finalOptions);\n\n        // release the server session back to the pool\n        this.sessionPool.release(this.serverSession);\n        this[kServerSession] = undefined;\n\n        // mark the session as ended, and emit a signal\n        this.hasEnded = true;\n        this.emit('ended', this);\n\n        // spec indicates that we should ignore all errors for `endSessions`\n        done();\n      };\n\n      if (this.serverSession && this.inTransaction()) {\n        this.abortTransaction(err => {\n          if (err) return done(err);\n          completeEndSession();\n        });\n\n        return;\n      }\n\n      completeEndSession();\n    });\n  }\n\n  /**\n   * Advances the operationTime for a ClientSession.\n   *\n   * @param operationTime - the `BSON.Timestamp` of the operation type it is desired to advance to\n   */\n  advanceOperationTime(operationTime: Timestamp): void {\n    if (this.operationTime == null) {\n      this.operationTime = operationTime;\n      return;\n    }\n\n    if (operationTime.greaterThan(this.operationTime)) {\n      this.operationTime = operationTime;\n    }\n  }\n\n  /**\n   * Advances the clusterTime for a ClientSession to the provided clusterTime of another ClientSession\n   *\n   * @param clusterTime - the $clusterTime returned by the server from another session in the form of a document containing the `BSON.Timestamp` clusterTime and signature\n   */\n  advanceClusterTime(clusterTime: ClusterTime): void {\n    if (!clusterTime || typeof clusterTime !== 'object') {\n      throw new MongoInvalidArgumentError('input cluster time must be an object');\n    }\n    if (!clusterTime.clusterTime || clusterTime.clusterTime._bsontype !== 'Timestamp') {\n      throw new MongoInvalidArgumentError(\n        'input cluster time \"clusterTime\" property must be a valid BSON Timestamp'\n      );\n    }\n    if (\n      !clusterTime.signature ||\n      clusterTime.signature.hash?._bsontype !== 'Binary' ||\n      (typeof clusterTime.signature.keyId !== 'number' &&\n        clusterTime.signature.keyId?._bsontype !== 'Long') // apparently we decode the key to number?\n    ) {\n      throw new MongoInvalidArgumentError(\n        'input cluster time must have a valid \"signature\" property with BSON Binary hash and BSON Long keyId'\n      );\n    }\n\n    _advanceClusterTime(this, clusterTime);\n  }\n\n  /**\n   * Used to determine if this session equals another\n   *\n   * @param session - The session to compare to\n   */\n  equals(session: ClientSession): boolean {\n    if (!(session instanceof ClientSession)) {\n      return false;\n    }\n\n    if (this.id == null || session.id == null) {\n      return false;\n    }\n\n    return this.id.id.buffer.equals(session.id.id.buffer);\n  }\n\n  /** Increment the transaction number on the internal ServerSession */\n  incrementTransactionNumber(): void {\n    if (this.serverSession) {\n      this.serverSession.txnNumber =\n        typeof this.serverSession.txnNumber === 'number' ? this.serverSession.txnNumber + 1 : 0;\n    }\n  }\n\n  /** @returns whether this session is currently in a transaction or not */\n  inTransaction(): boolean {\n    return this.transaction.isActive;\n  }\n\n  /**\n   * Starts a new transaction with the given options.\n   *\n   * @param options - Options for the transaction\n   */\n  startTransaction(options?: TransactionOptions): void {\n    if (this[kSnapshotEnabled]) {\n      throw new MongoCompatibilityError('Transactions are not allowed with snapshot sessions');\n    }\n\n    assertAlive(this);\n    if (this.inTransaction()) {\n      throw new MongoTransactionError('Transaction already in progress');\n    }\n\n    if (this.isPinned && this.transaction.isCommitted) {\n      this.unpin();\n    }\n\n    const topologyMaxWireVersion = maxWireVersion(this.topology);\n    if (\n      isSharded(this.topology) &&\n      topologyMaxWireVersion != null &&\n      topologyMaxWireVersion < minWireVersionForShardedTransactions\n    ) {\n      throw new MongoCompatibilityError(\n        'Transactions are not supported on sharded clusters in MongoDB < 4.2.'\n      );\n    }\n\n    // increment txnNumber\n    this.incrementTransactionNumber();\n    // create transaction state\n    this.transaction = new Transaction({\n      readConcern:\n        options?.readConcern ??\n        this.defaultTransactionOptions.readConcern ??\n        this.clientOptions?.readConcern,\n      writeConcern:\n        options?.writeConcern ??\n        this.defaultTransactionOptions.writeConcern ??\n        this.clientOptions?.writeConcern,\n      readPreference:\n        options?.readPreference ??\n        this.defaultTransactionOptions.readPreference ??\n        this.clientOptions?.readPreference,\n      maxCommitTimeMS: options?.maxCommitTimeMS ?? this.defaultTransactionOptions.maxCommitTimeMS\n    });\n\n    this.transaction.transition(TxnState.STARTING_TRANSACTION);\n  }\n\n  /**\n   * Commits the currently active transaction in this session.\n   *\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  commitTransaction(): Promise<Document>;\n  commitTransaction(callback: Callback<Document>): void;\n  commitTransaction(callback?: Callback<Document>): Promise<Document> | void {\n    return maybePromise(callback, cb => endTransaction(this, 'commitTransaction', cb));\n  }\n\n  /**\n   * Aborts the currently active transaction in this session.\n   *\n   * @param callback - An optional callback, a Promise will be returned if none is provided\n   */\n  abortTransaction(): Promise<Document>;\n  abortTransaction(callback: Callback<Document>): void;\n  abortTransaction(callback?: Callback<Document>): Promise<Document> | void {\n    return maybePromise(callback, cb => endTransaction(this, 'abortTransaction', cb));\n  }\n\n  /**\n   * This is here to ensure that ClientSession is never serialized to BSON.\n   */\n  toBSON(): never {\n    throw new MongoRuntimeError('ClientSession cannot be serialized to BSON.');\n  }\n\n  /**\n   * Runs a provided lambda within a transaction, retrying either the commit operation\n   * or entire transaction as needed (and when the error permits) to better ensure that\n   * the transaction can complete successfully.\n   *\n   * IMPORTANT: This method requires the user to return a Promise, all lambdas that do not\n   * return a Promise will result in undefined behavior.\n   *\n   * @param fn - A lambda to run within a transaction\n   * @param options - Optional settings for the transaction\n   */\n  withTransaction<T = void>(\n    fn: WithTransactionCallback<T>,\n    options?: TransactionOptions\n  ): ReturnType<typeof fn> {\n    const startTime = now();\n    return attemptTransaction(this, startTime, fn, options);\n  }\n}\n\nconst MAX_WITH_TRANSACTION_TIMEOUT = 120000;\nconst NON_DETERMINISTIC_WRITE_CONCERN_ERRORS = new Set([\n  'CannotSatisfyWriteConcern',\n  'UnknownReplWriteConcern',\n  'UnsatisfiableWriteConcern'\n]);\n\nfunction hasNotTimedOut(startTime: number, max: number) {\n  return calculateDurationInMs(startTime) < max;\n}\n\nfunction isUnknownTransactionCommitResult(err: MongoError) {\n  const isNonDeterministicWriteConcernError =\n    err instanceof MongoServerError &&\n    err.codeName &&\n    NON_DETERMINISTIC_WRITE_CONCERN_ERRORS.has(err.codeName);\n\n  return (\n    isMaxTimeMSExpiredError(err) ||\n    (!isNonDeterministicWriteConcernError &&\n      err.code !== MONGODB_ERROR_CODES.UnsatisfiableWriteConcern &&\n      err.code !== MONGODB_ERROR_CODES.UnknownReplWriteConcern)\n  );\n}\n\nexport function maybeClearPinnedConnection(\n  session: ClientSession,\n  options?: EndSessionOptions\n): void {\n  // unpin a connection if it has been pinned\n  const conn = session[kPinnedConnection];\n  const error = options?.error;\n\n  if (\n    session.inTransaction() &&\n    error &&\n    error instanceof MongoError &&\n    error.hasErrorLabel('TransientTransactionError')\n  ) {\n    return;\n  }\n\n  // NOTE: the spec talks about what to do on a network error only, but the tests seem to\n  //       to validate that we don't unpin on _all_ errors?\n  if (conn) {\n    const servers = Array.from(session.topology.s.servers.values());\n    const loadBalancer = servers[0];\n\n    if (options?.error == null || options?.force) {\n      loadBalancer.s.pool.checkIn(conn);\n      conn.emit(\n        Connection.UNPINNED,\n        session.transaction.state !== TxnState.NO_TRANSACTION\n          ? ConnectionPoolMetrics.TXN\n          : ConnectionPoolMetrics.CURSOR\n      );\n\n      if (options?.forceClear) {\n        loadBalancer.s.pool.clear(conn.serviceId);\n      }\n    }\n\n    session[kPinnedConnection] = undefined;\n  }\n}\n\nfunction isMaxTimeMSExpiredError(err: MongoError) {\n  if (err == null || !(err instanceof MongoServerError)) {\n    return false;\n  }\n\n  return (\n    err.code === MONGODB_ERROR_CODES.MaxTimeMSExpired ||\n    (err.writeConcernError && err.writeConcernError.code === MONGODB_ERROR_CODES.MaxTimeMSExpired)\n  );\n}\n\nfunction attemptTransactionCommit<T>(\n  session: ClientSession,\n  startTime: number,\n  fn: WithTransactionCallback<T>,\n  options?: TransactionOptions\n): Promise<T> {\n  return session.commitTransaction().catch((err: MongoError) => {\n    if (\n      err instanceof MongoError &&\n      hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT) &&\n      !isMaxTimeMSExpiredError(err)\n    ) {\n      if (err.hasErrorLabel('UnknownTransactionCommitResult')) {\n        return attemptTransactionCommit(session, startTime, fn, options);\n      }\n\n      if (err.hasErrorLabel('TransientTransactionError')) {\n        return attemptTransaction(session, startTime, fn, options);\n      }\n    }\n\n    throw err;\n  });\n}\n\nconst USER_EXPLICIT_TXN_END_STATES = new Set<TxnState>([\n  TxnState.NO_TRANSACTION,\n  TxnState.TRANSACTION_COMMITTED,\n  TxnState.TRANSACTION_ABORTED\n]);\n\nfunction userExplicitlyEndedTransaction(session: ClientSession) {\n  return USER_EXPLICIT_TXN_END_STATES.has(session.transaction.state);\n}\n\nfunction attemptTransaction<TSchema>(\n  session: ClientSession,\n  startTime: number,\n  fn: WithTransactionCallback<TSchema>,\n  options?: TransactionOptions\n): Promise<any> {\n  const Promise = PromiseProvider.get();\n  session.startTransaction(options);\n\n  let promise;\n  try {\n    promise = fn(session);\n  } catch (err) {\n    promise = Promise.reject(err);\n  }\n\n  if (!isPromiseLike(promise)) {\n    session.abortTransaction();\n    throw new MongoInvalidArgumentError(\n      'Function provided to `withTransaction` must return a Promise'\n    );\n  }\n\n  return promise.then(\n    () => {\n      if (userExplicitlyEndedTransaction(session)) {\n        return;\n      }\n\n      return attemptTransactionCommit(session, startTime, fn, options);\n    },\n    err => {\n      function maybeRetryOrThrow(err: MongoError): Promise<any> {\n        if (\n          err instanceof MongoError &&\n          err.hasErrorLabel('TransientTransactionError') &&\n          hasNotTimedOut(startTime, MAX_WITH_TRANSACTION_TIMEOUT)\n        ) {\n          return attemptTransaction(session, startTime, fn, options);\n        }\n\n        if (isMaxTimeMSExpiredError(err)) {\n          err.addErrorLabel('UnknownTransactionCommitResult');\n        }\n\n        throw err;\n      }\n\n      if (session.transaction.isActive) {\n        return session.abortTransaction().then(() => maybeRetryOrThrow(err));\n      }\n\n      return maybeRetryOrThrow(err);\n    }\n  );\n}\n\nfunction endTransaction(session: ClientSession, commandName: string, callback: Callback<Document>) {\n  if (!assertAlive(session, callback)) {\n    // checking result in case callback was called\n    return;\n  }\n\n  // handle any initial problematic cases\n  const txnState = session.transaction.state;\n\n  if (txnState === TxnState.NO_TRANSACTION) {\n    callback(new MongoTransactionError('No transaction started'));\n    return;\n  }\n\n  if (commandName === 'commitTransaction') {\n    if (\n      txnState === TxnState.STARTING_TRANSACTION ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_COMMITTED_EMPTY);\n      callback();\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(\n        new MongoTransactionError('Cannot call commitTransaction after calling abortTransaction')\n      );\n      return;\n    }\n  } else {\n    if (txnState === TxnState.STARTING_TRANSACTION) {\n      // the transaction was never started, we can safely exit here\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      callback();\n      return;\n    }\n\n    if (txnState === TxnState.TRANSACTION_ABORTED) {\n      callback(new MongoTransactionError('Cannot call abortTransaction twice'));\n      return;\n    }\n\n    if (\n      txnState === TxnState.TRANSACTION_COMMITTED ||\n      txnState === TxnState.TRANSACTION_COMMITTED_EMPTY\n    ) {\n      callback(\n        new MongoTransactionError('Cannot call abortTransaction after calling commitTransaction')\n      );\n      return;\n    }\n  }\n\n  // construct and send the command\n  const command: Document = { [commandName]: 1 };\n\n  // apply a writeConcern if specified\n  let writeConcern;\n  if (session.transaction.options.writeConcern) {\n    writeConcern = Object.assign({}, session.transaction.options.writeConcern);\n  } else if (session.clientOptions && session.clientOptions.writeConcern) {\n    writeConcern = { w: session.clientOptions.writeConcern.w };\n  }\n\n  if (txnState === TxnState.TRANSACTION_COMMITTED) {\n    writeConcern = Object.assign({ wtimeout: 10000 }, writeConcern, { w: 'majority' });\n  }\n\n  if (writeConcern) {\n    Object.assign(command, { writeConcern });\n  }\n\n  if (commandName === 'commitTransaction' && session.transaction.options.maxTimeMS) {\n    Object.assign(command, { maxTimeMS: session.transaction.options.maxTimeMS });\n  }\n\n  function commandHandler(e?: MongoError, r?: Document) {\n    if (commandName !== 'commitTransaction') {\n      session.transaction.transition(TxnState.TRANSACTION_ABORTED);\n      if (session.loadBalanced) {\n        maybeClearPinnedConnection(session, { force: false });\n      }\n\n      // The spec indicates that we should ignore all errors on `abortTransaction`\n      return callback();\n    }\n\n    session.transaction.transition(TxnState.TRANSACTION_COMMITTED);\n    if (e) {\n      if (\n        e instanceof MongoNetworkError ||\n        e instanceof MongoWriteConcernError ||\n        isRetryableError(e) ||\n        isMaxTimeMSExpiredError(e)\n      ) {\n        if (isUnknownTransactionCommitResult(e)) {\n          e.addErrorLabel('UnknownTransactionCommitResult');\n\n          // per txns spec, must unpin session in this case\n          session.unpin({ error: e });\n        }\n      } else if (e.hasErrorLabel('TransientTransactionError')) {\n        session.unpin({ error: e });\n      }\n    }\n\n    callback(e, r);\n  }\n\n  // Assumption here that commandName is \"commitTransaction\" or \"abortTransaction\"\n  if (session.transaction.recoveryToken) {\n    command.recoveryToken = session.transaction.recoveryToken;\n  }\n\n  // send the command\n  executeOperation(\n    session.topology,\n    new RunAdminCommandOperation(undefined, command, {\n      session,\n      readPreference: ReadPreference.primary,\n      bypassPinningCheck: true\n    }),\n    (err, reply) => {\n      if (command.abortTransaction) {\n        // always unpin on abort regardless of command outcome\n        session.unpin();\n      }\n\n      if (err && isRetryableError(err as MongoError)) {\n        // SPEC-1185: apply majority write concern when retrying commitTransaction\n        if (command.commitTransaction) {\n          // per txns spec, must unpin session in this case\n          session.unpin({ force: true });\n\n          command.writeConcern = Object.assign({ wtimeout: 10000 }, command.writeConcern, {\n            w: 'majority'\n          });\n        }\n\n        return executeOperation(\n          session.topology,\n          new RunAdminCommandOperation(undefined, command, {\n            session,\n            readPreference: ReadPreference.primary,\n            bypassPinningCheck: true\n          }),\n          (_err, _reply) => commandHandler(_err as MongoError, _reply)\n        );\n      }\n\n      commandHandler(err as MongoError, reply);\n    }\n  );\n}\n\n/** @public */\nexport type ServerSessionId = { id: Binary };\n\n/**\n * Reflects the existence of a session on the server. Can be reused by the session pool.\n * WARNING: not meant to be instantiated directly. For internal use only.\n * @public\n */\nexport class ServerSession {\n  id: ServerSessionId;\n  lastUse: number;\n  txnNumber: number;\n  isDirty: boolean;\n\n  /** @internal */\n  constructor() {\n    this.id = { id: new Binary(uuidV4(), Binary.SUBTYPE_UUID) };\n    this.lastUse = now();\n    this.txnNumber = 0;\n    this.isDirty = false;\n  }\n\n  /**\n   * Determines if the server session has timed out.\n   *\n   * @param sessionTimeoutMinutes - The server's \"logicalSessionTimeoutMinutes\"\n   */\n  hasTimedOut(sessionTimeoutMinutes: number): boolean {\n    // Take the difference of the lastUse timestamp and now, which will result in a value in\n    // milliseconds, and then convert milliseconds to minutes to compare to `sessionTimeoutMinutes`\n    const idleTimeMinutes = Math.round(\n      ((calculateDurationInMs(this.lastUse) % 86400000) % 3600000) / 60000\n    );\n\n    return idleTimeMinutes > sessionTimeoutMinutes - 1;\n  }\n}\n\n/**\n * Maintains a pool of Server Sessions.\n * For internal use only\n * @internal\n */\nexport class ServerSessionPool {\n  topology: Topology;\n  sessions: ServerSession[];\n\n  constructor(topology: Topology) {\n    if (topology == null) {\n      throw new MongoRuntimeError('ServerSessionPool requires a topology');\n    }\n\n    this.topology = topology;\n    this.sessions = [];\n  }\n\n  /** Ends all sessions in the session pool */\n  endAllPooledSessions(callback?: Callback<void>): void {\n    if (this.sessions.length) {\n      this.topology.endSessions(\n        this.sessions.map((session: ServerSession) => session.id),\n        () => {\n          this.sessions = [];\n          if (typeof callback === 'function') {\n            callback();\n          }\n        }\n      );\n\n      return;\n    }\n\n    if (typeof callback === 'function') {\n      callback();\n    }\n  }\n\n  /**\n   * Acquire a Server Session from the pool.\n   * Iterates through each session in the pool, removing any stale sessions\n   * along the way. The first non-stale session found is removed from the\n   * pool and returned. If no non-stale session is found, a new ServerSession is created.\n   */\n  acquire(): ServerSession {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes || 10;\n\n    while (this.sessions.length) {\n      const session = this.sessions.shift();\n      if (session && (this.topology.loadBalanced || !session.hasTimedOut(sessionTimeoutMinutes))) {\n        return session;\n      }\n    }\n\n    return new ServerSession();\n  }\n\n  /**\n   * Release a session to the session pool\n   * Adds the session back to the session pool if the session has not timed out yet.\n   * This method also removes any stale sessions from the pool.\n   *\n   * @param session - The session to release to the pool\n   */\n  release(session: ServerSession): void {\n    const sessionTimeoutMinutes = this.topology.logicalSessionTimeoutMinutes;\n\n    if (this.topology.loadBalanced && !sessionTimeoutMinutes) {\n      this.sessions.unshift(session);\n    }\n\n    if (!sessionTimeoutMinutes) {\n      return;\n    }\n\n    while (this.sessions.length) {\n      const pooledSession = this.sessions[this.sessions.length - 1];\n      if (pooledSession.hasTimedOut(sessionTimeoutMinutes)) {\n        this.sessions.pop();\n      } else {\n        break;\n      }\n    }\n\n    if (!session.hasTimedOut(sessionTimeoutMinutes)) {\n      if (session.isDirty) {\n        return;\n      }\n\n      // otherwise, readd this session to the session pool\n      this.sessions.unshift(session);\n    }\n  }\n}\n\n// TODO: this should be codified in command construction\n// @see https://github.com/mongodb/specifications/blob/master/source/read-write-concern/read-write-concern.rst#read-concern\nexport function commandSupportsReadConcern(command: Document, options?: Document): boolean {\n  if (command.aggregate || command.count || command.distinct || command.find || command.geoNear) {\n    return true;\n  }\n\n  if (\n    command.mapReduce &&\n    options &&\n    options.out &&\n    (options.out.inline === 1 || options.out === 'inline')\n  ) {\n    return true;\n  }\n\n  return false;\n}\n\n/**\n * Optionally decorate a command with sessions specific keys\n *\n * @param session - the session tracking transaction state\n * @param command - the command to decorate\n * @param options - Optional settings passed to calling operation\n */\nexport function applySession(\n  session: ClientSession,\n  command: Document,\n  options?: CommandOptions\n): MongoDriverError | undefined {\n  // TODO: merge this with `assertAlive`, did not want to throw a try/catch here\n  if (session.hasEnded) {\n    return new MongoExpiredSessionError();\n  }\n\n  const serverSession = session.serverSession;\n  if (serverSession == null) {\n    return new MongoRuntimeError('Unable to acquire server session');\n  }\n\n  // SPEC-1019: silently ignore explicit session with unacknowledged write for backwards compatibility\n  // FIXME: NODE-2781, this check for write concern shouldn't be happening here, but instead during command construction\n  if (options && options.writeConcern && (options.writeConcern as WriteConcern).w === 0) {\n    if (session && session.explicit) {\n      return new MongoAPIError('Cannot have explicit session with unacknowledged writes');\n    }\n    return;\n  }\n\n  // mark the last use of this session, and apply the `lsid`\n  serverSession.lastUse = now();\n  command.lsid = serverSession.id;\n\n  // first apply non-transaction-specific sessions data\n  const inTransaction = session.inTransaction() || isTransactionCommand(command);\n  const isRetryableWrite = options?.willRetryWrite || false;\n\n  if (serverSession.txnNumber && (isRetryableWrite || inTransaction)) {\n    command.txnNumber = Long.fromNumber(serverSession.txnNumber);\n  }\n\n  if (!inTransaction) {\n    if (session.transaction.state !== TxnState.NO_TRANSACTION) {\n      session.transaction.transition(TxnState.NO_TRANSACTION);\n    }\n\n    if (\n      session.supports.causalConsistency &&\n      session.operationTime &&\n      commandSupportsReadConcern(command, options)\n    ) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    } else if (session[kSnapshotEnabled]) {\n      command.readConcern = command.readConcern || { level: ReadConcernLevel.snapshot };\n      if (session[kSnapshotTime] != null) {\n        Object.assign(command.readConcern, { atClusterTime: session[kSnapshotTime] });\n      }\n    }\n\n    return;\n  }\n\n  // now attempt to apply transaction-specific sessions data\n\n  // `autocommit` must always be false to differentiate from retryable writes\n  command.autocommit = false;\n\n  if (session.transaction.state === TxnState.STARTING_TRANSACTION) {\n    session.transaction.transition(TxnState.TRANSACTION_IN_PROGRESS);\n    command.startTransaction = true;\n\n    const readConcern =\n      session.transaction.options.readConcern || session?.clientOptions?.readConcern;\n    if (readConcern) {\n      command.readConcern = readConcern;\n    }\n\n    if (session.supports.causalConsistency && session.operationTime) {\n      command.readConcern = command.readConcern || {};\n      Object.assign(command.readConcern, { afterClusterTime: session.operationTime });\n    }\n  }\n}\n\nexport function updateSessionFromResponse(session: ClientSession, document: Document): void {\n  if (document.$clusterTime) {\n    _advanceClusterTime(session, document.$clusterTime);\n  }\n\n  if (document.operationTime && session && session.supports.causalConsistency) {\n    session.advanceOperationTime(document.operationTime);\n  }\n\n  if (document.recoveryToken && session && session.inTransaction()) {\n    session.transaction._recoveryToken = document.recoveryToken;\n  }\n\n  if (session?.[kSnapshotEnabled] && session[kSnapshotTime] == null) {\n    // find and aggregate commands return atClusterTime on the cursor\n    // distinct includes it in the response body\n    const atClusterTime = document.cursor?.atClusterTime || document.atClusterTime;\n    if (atClusterTime) {\n      session[kSnapshotTime] = atClusterTime;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}