{"ast":null,"code":"const hexCharacters = 'a-f\\\\d';\nconst match3or4Hex = `#?[${hexCharacters}]{3}[${hexCharacters}]?`;\nconst match6or8Hex = `#?[${hexCharacters}]{6}([${hexCharacters}]{2})?`;\nconst nonHexChars = new RegExp(`[^#${hexCharacters}]`, 'gi');\nconst validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');\nexport default function hexRgb(hex, options = {}) {\n  if (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n    throw new TypeError('Expected a valid hex string');\n  }\n  hex = hex.replace(/^#/, '');\n  let alphaFromHex = 1;\n  if (hex.length === 8) {\n    alphaFromHex = Number.parseInt(hex.slice(6, 8), 16) / 255;\n    hex = hex.slice(0, 6);\n  }\n  if (hex.length === 4) {\n    alphaFromHex = Number.parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n    hex = hex.slice(0, 3);\n  }\n  if (hex.length === 3) {\n    hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n  }\n  const number = Number.parseInt(hex, 16);\n  const red = number >> 16;\n  const green = number >> 8 & 255;\n  const blue = number & 255;\n  const alpha = typeof options.alpha === 'number' ? options.alpha : alphaFromHex;\n  if (options.format === 'array') {\n    return [red, green, blue, alpha];\n  }\n  if (options.format === 'css') {\n    const alphaString = alpha === 1 ? '' : ` / ${Number((alpha * 100).toFixed(2))}%`;\n    return `rgb(${red} ${green} ${blue}${alphaString})`;\n  }\n  return {\n    red,\n    green,\n    blue,\n    alpha\n  };\n}","map":{"version":3,"names":["hexCharacters","match3or4Hex","match6or8Hex","nonHexChars","RegExp","validHexSize","hexRgb","hex","options","test","TypeError","replace","alphaFromHex","length","Number","parseInt","slice","repeat","number","red","green","blue","alpha","format","alphaString","toFixed"],"sources":["C:/Users/chris/Desktop/insite/node_modules/hex-rgb/index.js"],"sourcesContent":["const hexCharacters = 'a-f\\\\d';\nconst match3or4Hex = `#?[${hexCharacters}]{3}[${hexCharacters}]?`;\nconst match6or8Hex = `#?[${hexCharacters}]{6}([${hexCharacters}]{2})?`;\nconst nonHexChars = new RegExp(`[^#${hexCharacters}]`, 'gi');\nconst validHexSize = new RegExp(`^${match3or4Hex}$|^${match6or8Hex}$`, 'i');\n\nexport default function hexRgb(hex, options = {}) {\n\tif (typeof hex !== 'string' || nonHexChars.test(hex) || !validHexSize.test(hex)) {\n\t\tthrow new TypeError('Expected a valid hex string');\n\t}\n\n\thex = hex.replace(/^#/, '');\n\tlet alphaFromHex = 1;\n\n\tif (hex.length === 8) {\n\t\talphaFromHex = Number.parseInt(hex.slice(6, 8), 16) / 255;\n\t\thex = hex.slice(0, 6);\n\t}\n\n\tif (hex.length === 4) {\n\t\talphaFromHex = Number.parseInt(hex.slice(3, 4).repeat(2), 16) / 255;\n\t\thex = hex.slice(0, 3);\n\t}\n\n\tif (hex.length === 3) {\n\t\thex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];\n\t}\n\n\tconst number = Number.parseInt(hex, 16);\n\tconst red = number >> 16;\n\tconst green = (number >> 8) & 255;\n\tconst blue = number & 255;\n\tconst alpha = typeof options.alpha === 'number' ? options.alpha : alphaFromHex;\n\n\tif (options.format === 'array') {\n\t\treturn [red, green, blue, alpha];\n\t}\n\n\tif (options.format === 'css') {\n\t\tconst alphaString = alpha === 1 ? '' : ` / ${Number((alpha * 100).toFixed(2))}%`;\n\t\treturn `rgb(${red} ${green} ${blue}${alphaString})`;\n\t}\n\n\treturn {red, green, blue, alpha};\n}\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG,QAAQ;AAC9B,MAAMC,YAAY,GAAG,MAAMD,aAAa,QAAQA,aAAa,IAAI;AACjE,MAAME,YAAY,GAAG,MAAMF,aAAa,SAASA,aAAa,QAAQ;AACtE,MAAMG,WAAW,GAAG,IAAIC,MAAM,CAAC,MAAMJ,aAAa,GAAG,EAAE,IAAI,CAAC;AAC5D,MAAMK,YAAY,GAAG,IAAID,MAAM,CAAC,IAAIH,YAAY,MAAMC,YAAY,GAAG,EAAE,GAAG,CAAC;AAE3E,eAAe,SAASI,MAAMA,CAACC,GAAG,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EACjD,IAAI,OAAOD,GAAG,KAAK,QAAQ,IAAIJ,WAAW,CAACM,IAAI,CAACF,GAAG,CAAC,IAAI,CAACF,YAAY,CAACI,IAAI,CAACF,GAAG,CAAC,EAAE;IAChF,MAAM,IAAIG,SAAS,CAAC,6BAA6B,CAAC;EACnD;EAEAH,GAAG,GAAGA,GAAG,CAACI,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;EAC3B,IAAIC,YAAY,GAAG,CAAC;EAEpB,IAAIL,GAAG,CAACM,MAAM,KAAK,CAAC,EAAE;IACrBD,YAAY,GAAGE,MAAM,CAACC,QAAQ,CAACR,GAAG,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG;IACzDT,GAAG,GAAGA,GAAG,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACtB;EAEA,IAAIT,GAAG,CAACM,MAAM,KAAK,CAAC,EAAE;IACrBD,YAAY,GAAGE,MAAM,CAACC,QAAQ,CAACR,GAAG,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,GAAG;IACnEV,GAAG,GAAGA,GAAG,CAACS,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;EACtB;EAEA,IAAIT,GAAG,CAACM,MAAM,KAAK,CAAC,EAAE;IACrBN,GAAG,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC,GAAGA,GAAG,CAAC,CAAC,CAAC;EAC1D;EAEA,MAAMW,MAAM,GAAGJ,MAAM,CAACC,QAAQ,CAACR,GAAG,EAAE,EAAE,CAAC;EACvC,MAAMY,GAAG,GAAGD,MAAM,IAAI,EAAE;EACxB,MAAME,KAAK,GAAIF,MAAM,IAAI,CAAC,GAAI,GAAG;EACjC,MAAMG,IAAI,GAAGH,MAAM,GAAG,GAAG;EACzB,MAAMI,KAAK,GAAG,OAAOd,OAAO,CAACc,KAAK,KAAK,QAAQ,GAAGd,OAAO,CAACc,KAAK,GAAGV,YAAY;EAE9E,IAAIJ,OAAO,CAACe,MAAM,KAAK,OAAO,EAAE;IAC/B,OAAO,CAACJ,GAAG,EAAEC,KAAK,EAAEC,IAAI,EAAEC,KAAK,CAAC;EACjC;EAEA,IAAId,OAAO,CAACe,MAAM,KAAK,KAAK,EAAE;IAC7B,MAAMC,WAAW,GAAGF,KAAK,KAAK,CAAC,GAAG,EAAE,GAAG,MAAMR,MAAM,CAAC,CAACQ,KAAK,GAAG,GAAG,EAAEG,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG;IAChF,OAAO,OAAON,GAAG,IAAIC,KAAK,IAAIC,IAAI,GAAGG,WAAW,GAAG;EACpD;EAEA,OAAO;IAACL,GAAG;IAAEC,KAAK;IAAEC,IAAI;IAAEC;EAAK,CAAC;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}